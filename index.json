[{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp.html","title":"BioFSharp","content":"Alignment \nAminoAcidSymbols \nAminoAcids \nAminoProperties \nAnnotatedSequence \nBioArray \nBioCollectionsExtensions \nBioID \nBioItem \nBioItemsConverter \nBioList \nBioSeq \nDigestion \nElements \nFormula \nGlobalModificationInfo \nIsoelectricPoint \nIsotopes \nIsotopicDistribution \nMass \nModificationInfo \nNucleotides \nPeptideClassification \nPhylogeneticTree \nPhysicalConstants \nWorkflowLanguage \nAnnotatedSequence\u003C\u0027T\u003E \nIBioItem \nNcbiParsingType \nPhylogeneticTree\u003C\u0027T\u003E \nSequenceFeature \nTaggedSequence\u003C\u0027T, \u0027S\u003E","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm.html","title":"BioFSharp.Algorithm","content":"PairwiseAlignment \nScoringMatrix \nStringMatching","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats.html","title":"BioFSharp.FileFormats","content":"AgilentRaw \nBlastCLI \nBlastHits \nBlastQueries \nClustal \nClustalOCLI \nDSSP \nFasta \nFastq \nFormatting \nGAF \nGFF3 \nGenBank \nMgf \nNewick \nObo \nOrthoMCL \nPDB \nSOFT \nStride \nSecondaryStructure \nStructureFormat","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io.html","title":"BioFSharp.IO","content":"AgilentRaw \nBlastCLI \nBlastQueries \nClustal \nClustalOCLI \nCustomBlastResult \nFasta \nFastq \nGFF3","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-alignment.html","title":"Alignment","content":"Alignment \nBasic structure and functionality for sequence alignments. Alignment functions can be found in the BioFSharp.Algorithm namespace. \nAlignment.Alignment\u003C\u0027Sequence, \u0027Metadata\u003E \nAlignment\u003C\u0027Sequence, \u0027Metadata\u003E \nAlignment.createAlignment \ncreateAlignment \nAlignment.mapSequences \nmapSequences \nAlignment.mapmetaData \nmapmetaData","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-alignment.html#createAlignment","title":"Alignment.createAlignment","content":"Alignment.createAlignment \ncreateAlignment \nCreates Alignment type ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-alignment.html#mapSequences","title":"Alignment.mapSequences","content":"Alignment.mapSequences \nmapSequences \nMapping function for aligned sequences, keeping the associated metadata.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-alignment.html#mapmetaData","title":"Alignment.mapmetaData","content":"Alignment.mapmetaData \nmapmetaData \nMapping function for aligned sequences, keeping the associated metadata.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-alignment-alignment-2.html","title":"Alignment\u003C\u0027Sequence, \u0027Metadata\u003E","content":"Alignment\u003C\u0027Sequence, \u0027Metadata\u003E \nGeneral Alignment type used throughout BioFSharp \nAlignment\u003C\u0027Sequence, \u0027Metadata\u003E.MetaData \nMetaData \nAlignment\u003C\u0027Sequence, \u0027Metadata\u003E.Sequences \nSequences","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-alignment-alignment-2.html#MetaData","title":"Alignment\u003C\u0027Sequence, \u0027Metadata\u003E.MetaData","content":"Alignment\u003C\u0027Sequence, \u0027Metadata\u003E.MetaData \nMetaData \nAdditional information for this alignment","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-alignment-alignment-2.html#Sequences","title":"Alignment\u003C\u0027Sequence, \u0027Metadata\u003E.Sequences","content":"Alignment\u003C\u0027Sequence, \u0027Metadata\u003E.Sequences \nSequences \nList of aligned Sequences","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html","title":"AminoAcidSymbols","content":"AminoAcidSymbols \nContains the AminoAcidSymbol type and its according functions. The AminoAcidSymbol type is a lightweight, efficient presentation of amino acids \nAminoAcidSymbols.AminoAcidSymbol \nAminoAcidSymbol \nAminoAcidSymbols.aminoAcidSymbol \naminoAcidSymbol \nAminoAcidSymbols.parseChar \nparseChar \nAminoAcidSymbols.AminoSymbolSetStandard \nAminoSymbolSetStandard \nAminoAcidSymbols.AminoSymbolSetAmbiguity \nAminoSymbolSetAmbiguity \nAminoAcidSymbols.AminoSymbolSetGapTer \nAminoSymbolSetGapTer \nAminoAcidSymbols.AminoSymbolSetPosCharged \nAminoSymbolSetPosCharged \nAminoAcidSymbols.AminoSymbolSetNegCharged \nAminoSymbolSetNegCharged \nAminoAcidSymbols.AminoAcidSetPolar \nAminoAcidSetPolar \nAminoAcidSymbols.AminoAcidSetHydrophobic \nAminoAcidSetHydrophobic \nAminoAcidSymbols.name \nname \nAminoAcidSymbols.formula \nformula \nAminoAcidSymbols.symbol \nsymbol \nAminoAcidSymbols.isTerminator \nisTerminator \nAminoAcidSymbols.isGap \nisGap \nAminoAcidSymbols.monoisoMass \nmonoisoMass \nAminoAcidSymbols.averageMass \naverageMass \nAminoAcidSymbols.initMonoisoMassWithMemP \ninitMonoisoMassWithMemP \nAminoAcidSymbols.initAverageMassWithMemP \ninitAverageMassWithMemP \nAminoAcidSymbols.isCharged \nisCharged \nAminoAcidSymbols.isPosCharged \nisPosCharged \nAminoAcidSymbols.isNegCharged \nisNegCharged \nAminoAcidSymbols.isPolar \nisPolar \nAminoAcidSymbols.isHydrophobic \nisHydrophobic \nAminoAcidSymbols.(|Field|_|) \n(|Field|_|)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#aminoAcidSymbol","title":"AminoAcidSymbols.aminoAcidSymbol","content":"AminoAcidSymbols.aminoAcidSymbol \naminoAcidSymbol \n Maps input to AminoAcidSymbol if possible","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#parseChar","title":"AminoAcidSymbols.parseChar","content":"AminoAcidSymbols.parseChar \nparseChar \nReturns the corresponding AminoAcidSymbol for the input character","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#AminoSymbolSetStandard","title":"AminoAcidSymbols.AminoSymbolSetStandard","content":"AminoAcidSymbols.AminoSymbolSetStandard \nAminoSymbolSetStandard \nSet of the 20 standard amino acids","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#AminoSymbolSetAmbiguity","title":"AminoAcidSymbols.AminoSymbolSetAmbiguity","content":"AminoAcidSymbols.AminoSymbolSetAmbiguity \nAminoSymbolSetAmbiguity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#AminoSymbolSetGapTer","title":"AminoAcidSymbols.AminoSymbolSetGapTer","content":"AminoAcidSymbols.AminoSymbolSetGapTer \nAminoSymbolSetGapTer \nSet containing the Gap and the Terminator AminoAcidSymbols","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#AminoSymbolSetPosCharged","title":"AminoAcidSymbols.AminoSymbolSetPosCharged","content":"AminoAcidSymbols.AminoSymbolSetPosCharged \nAminoSymbolSetPosCharged \nSet of all AminoAcidSymbols with basic sidechain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#AminoSymbolSetNegCharged","title":"AminoAcidSymbols.AminoSymbolSetNegCharged","content":"AminoAcidSymbols.AminoSymbolSetNegCharged \nAminoSymbolSetNegCharged \nSet of all AminoAcidSymbols with acidic sidechain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#AminoAcidSetPolar","title":"AminoAcidSymbols.AminoAcidSetPolar","content":"AminoAcidSymbols.AminoAcidSetPolar \nAminoAcidSetPolar \nSet of all AminoAcids with polar sidechain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#AminoAcidSetHydrophobic","title":"AminoAcidSymbols.AminoAcidSetHydrophobic","content":"AminoAcidSymbols.AminoAcidSetHydrophobic \nAminoAcidSetHydrophobic \nSet of all AminoAcids with hydrophobic sidechain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#name","title":"AminoAcidSymbols.name","content":"AminoAcidSymbols.name \nname \n Returns the name of AminoAcidSymbol","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#formula","title":"AminoAcidSymbols.formula","content":"AminoAcidSymbols.formula \nformula \nReturns AminoAcidSymbol formulas minus H20            ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#symbol","title":"AminoAcidSymbols.symbol","content":"AminoAcidSymbols.symbol \nsymbol \n Returns the symbol of AminoAcidSymbol       ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#isTerminator","title":"AminoAcidSymbols.isTerminator","content":"AminoAcidSymbols.isTerminator \nisTerminator \n Returns true if AminoAcidSymbol represents a sequence terminator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#isGap","title":"AminoAcidSymbols.isGap","content":"AminoAcidSymbols.isGap \nisGap \n Returns true if AminoAcidSymbol represents a sequence gap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#monoisoMass","title":"AminoAcidSymbols.monoisoMass","content":"AminoAcidSymbols.monoisoMass \nmonoisoMass \n Returns the monoisotopic mass of AminoAcidSymbol (without H20)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#averageMass","title":"AminoAcidSymbols.averageMass","content":"AminoAcidSymbols.averageMass \naverageMass \n Returns the average mass of AminoAcidSymbol (without H20)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#initMonoisoMassWithMemP","title":"AminoAcidSymbols.initMonoisoMassWithMemP","content":"AminoAcidSymbols.initMonoisoMassWithMemP \ninitMonoisoMassWithMemP \n Returns a function to calculate the monoisotopic mass of a bio item with memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#initAverageMassWithMemP","title":"AminoAcidSymbols.initAverageMassWithMemP","content":"AminoAcidSymbols.initAverageMassWithMemP \ninitAverageMassWithMemP \n Returns a function to calculate the average mass of a bio item with memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#isCharged","title":"AminoAcidSymbols.isCharged","content":"AminoAcidSymbols.isCharged \nisCharged \n Returns true, if the AminoAcidSymbol has a basic or acidic side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#isPosCharged","title":"AminoAcidSymbols.isPosCharged","content":"AminoAcidSymbols.isPosCharged \nisPosCharged \n Returns true, if the AminoAcidSymbol has a basic side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#isNegCharged","title":"AminoAcidSymbols.isNegCharged","content":"AminoAcidSymbols.isNegCharged \nisNegCharged \n Returns true, if the AminoAcidSymbol has an acidic side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#isPolar","title":"AminoAcidSymbols.isPolar","content":"AminoAcidSymbols.isPolar \nisPolar \n Returns true, if the AminoAcidSymbol has a polar side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#isHydrophobic","title":"AminoAcidSymbols.isHydrophobic","content":"AminoAcidSymbols.isHydrophobic \nisHydrophobic \n Returns true, if the AminoAcidSymbol has a hydrophobic side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols.html#(|Field|_|)","title":"AminoAcidSymbols.(|Field|_|)","content":"AminoAcidSymbols.(|Field|_|) \n(|Field|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html","title":"AminoAcidSymbol","content":"AminoAcidSymbol \n \nAminoAcidSymbol.op_Explicit \nop_Explicit \nAminoAcidSymbol.op_Explicit \nop_Explicit \nAminoAcidSymbol.op_Explicit \nop_Explicit \nAminoAcidSymbol.Ala \nAla \nAminoAcidSymbol.Ile \nIle \nAminoAcidSymbol.Lys \nLys \nAminoAcidSymbol.Gly \nGly \nAminoAcidSymbol.Trp \nTrp \nAminoAcidSymbol.Cys \nCys \nAminoAcidSymbol.Leu \nLeu \nAminoAcidSymbol.Ser \nSer \nAminoAcidSymbol.Xle \nXle \nAminoAcidSymbol.Glx \nGlx \nAminoAcidSymbol.Asp \nAsp \nAminoAcidSymbol.Glu \nGlu \nAminoAcidSymbol.Gln \nGln \nAminoAcidSymbol.Asn \nAsn \nAminoAcidSymbol.Val \nVal \nAminoAcidSymbol.Ter \nTer \nAminoAcidSymbol.Tyr \nTyr \nAminoAcidSymbol.Asx \nAsx \nAminoAcidSymbol.Xaa \nXaa \nAminoAcidSymbol.His \nHis \nAminoAcidSymbol.Sel \nSel \nAminoAcidSymbol.Thr \nThr \nAminoAcidSymbol.Met \nMet \nAminoAcidSymbol.Pro \nPro \nAminoAcidSymbol.Phe \nPhe \nAminoAcidSymbol.Pyl \nPyl \nAminoAcidSymbol.Gap \nGap \nAminoAcidSymbol.Sec \nSec \nAminoAcidSymbol.Arg \nArg","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#op_Explicit","title":"AminoAcidSymbol.op_Explicit","content":"AminoAcidSymbol.op_Explicit \nop_Explicit \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#op_Explicit","title":"AminoAcidSymbol.op_Explicit","content":"AminoAcidSymbol.op_Explicit \nop_Explicit \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#op_Explicit","title":"AminoAcidSymbol.op_Explicit","content":"AminoAcidSymbol.op_Explicit \nop_Explicit \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Ala","title":"AminoAcidSymbol.Ala","content":"AminoAcidSymbol.Ala \nAla \n \u0027A\u0027  *Alanin","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Ile","title":"AminoAcidSymbol.Ile","content":"AminoAcidSymbol.Ile \nIle \n \u0027I\u0027  *Isoleucine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Lys","title":"AminoAcidSymbol.Lys","content":"AminoAcidSymbol.Lys \nLys \n \u0027K\u0027  *Lysine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Gly","title":"AminoAcidSymbol.Gly","content":"AminoAcidSymbol.Gly \nGly \n \u0027G\u0027  *Glycine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Trp","title":"AminoAcidSymbol.Trp","content":"AminoAcidSymbol.Trp \nTrp \n \u0027W\u0027  *Tryptophan","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Cys","title":"AminoAcidSymbol.Cys","content":"AminoAcidSymbol.Cys \nCys \n \u0027C\u0027  *Cysteine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Leu","title":"AminoAcidSymbol.Leu","content":"AminoAcidSymbol.Leu \nLeu \n \u0027L\u0027  *Leucine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Ser","title":"AminoAcidSymbol.Ser","content":"AminoAcidSymbol.Ser \nSer \n \u0027S\u0027  *Serine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Xle","title":"AminoAcidSymbol.Xle","content":"AminoAcidSymbol.Xle \nXle \n \u0027J\u0027  *Leucine/Isoleucine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Glx","title":"AminoAcidSymbol.Glx","content":"AminoAcidSymbol.Glx \nGlx \n \u0027Z\u0027  *Glutamine/glutamic acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Asp","title":"AminoAcidSymbol.Asp","content":"AminoAcidSymbol.Asp \nAsp \n \u0027D\u0027  *Aspartic Acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Glu","title":"AminoAcidSymbol.Glu","content":"AminoAcidSymbol.Glu \nGlu \n \u0027E\u0027  *Glutamic Acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Gln","title":"AminoAcidSymbol.Gln","content":"AminoAcidSymbol.Gln \nGln \n \u0027Q\u0027  *Glutamine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Asn","title":"AminoAcidSymbol.Asn","content":"AminoAcidSymbol.Asn \nAsn \n \u0027N\u0027  *Asparagine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Val","title":"AminoAcidSymbol.Val","content":"AminoAcidSymbol.Val \nVal \n \u0027V\u0027  *Valine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Ter","title":"AminoAcidSymbol.Ter","content":"AminoAcidSymbol.Ter \nTer \n \u0027*\u0027  *Termination","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Tyr","title":"AminoAcidSymbol.Tyr","content":"AminoAcidSymbol.Tyr \nTyr \n \u0027Y\u0027  *Tyrosine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Asx","title":"AminoAcidSymbol.Asx","content":"AminoAcidSymbol.Asx \nAsx \n \u0027B\u0027  *Asparagine/aspartic acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Xaa","title":"AminoAcidSymbol.Xaa","content":"AminoAcidSymbol.Xaa \nXaa \n \u0027X\u0027  *Unspecified","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#His","title":"AminoAcidSymbol.His","content":"AminoAcidSymbol.His \nHis \n \u0027H\u0027  *Histidine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Sel","title":"AminoAcidSymbol.Sel","content":"AminoAcidSymbol.Sel \nSel \n \u0027U\u0027  *Selenocysteine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Thr","title":"AminoAcidSymbol.Thr","content":"AminoAcidSymbol.Thr \nThr \n \u0027T\u0027  *Threonine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Met","title":"AminoAcidSymbol.Met","content":"AminoAcidSymbol.Met \nMet \n \u0027M\u0027  *Methionine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Pro","title":"AminoAcidSymbol.Pro","content":"AminoAcidSymbol.Pro \nPro \n \u0027P\u0027  *Proline","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Phe","title":"AminoAcidSymbol.Phe","content":"AminoAcidSymbol.Phe \nPhe \n \u0027F\u0027  *Glutamic Acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Pyl","title":"AminoAcidSymbol.Pyl","content":"AminoAcidSymbol.Pyl \nPyl \n \u0027O\u0027  *Pyrrolysine   ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Gap","title":"AminoAcidSymbol.Gap","content":"AminoAcidSymbol.Gap \nGap \n \u0027-\u0027  *Gap ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Sec","title":"AminoAcidSymbol.Sec","content":"AminoAcidSymbol.Sec \nSec \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacidsymbols-aminoacidsymbol.html#Arg","title":"AminoAcidSymbol.Arg","content":"AminoAcidSymbol.Arg \nArg \n \u0027R\u0027  *Arginine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html","title":"AminoAcids","content":"AminoAcids \nContains the AminoAcid type and its according functions. The AminoAcid type is a complex presentation of amino acids, allowing modifications \nAminoAcids.AminoAcid \nAminoAcid \nAminoAcids.ParsedAminoAcidChar \nParsedAminoAcidChar \nAminoAcids.setModification \nsetModification \nAminoAcids.setModifications \nsetModifications \nAminoAcids.getModifications \ngetModifications \nAminoAcids.getAminoAcidWithoutMod \ngetAminoAcidWithoutMod \nAminoAcids.tryGetModifications \ntryGetModifications \nAminoAcids.isotopicLabelFunc \nisotopicLabelFunc \nAminoAcids.charToParsedAminoAcidChar \ncharToParsedAminoAcidChar \nAminoAcids.AminoAcidSetStandard \nAminoAcidSetStandard \nAminoAcids.aminoAcidSetStandard \naminoAcidSetStandard \nAminoAcids.aminoAcidSetProteinogenic \naminoAcidSetProteinogenic \nAminoAcids.aminoAcidSetProteinogenicEucaryotes \naminoAcidSetProteinogenicEucaryotes \nAminoAcids.AminoAcidSetAmbiguity \nAminoAcidSetAmbiguity \nAminoAcids.aminoAcidSetAmbiguity \naminoAcidSetAmbiguity \nAminoAcids.AminoAcidSetGapTer \nAminoAcidSetGapTer \nAminoAcids.aminoAcidSetGapTer \naminoAcidSetGapTer \nAminoAcids.AminoAcidSetPosCharged \nAminoAcidSetPosCharged \nAminoAcids.aminoAcidSetPosCharged \naminoAcidSetPosCharged \nAminoAcids.AminoAcidSetNegCharged \nAminoAcidSetNegCharged \nAminoAcids.aminoAcidSetNegCharged \naminoAcidSetNegCharged \nAminoAcids.AminoAcidSetPolar \nAminoAcidSetPolar \nAminoAcids.aminoAcidSetPolarUncharged \naminoAcidSetPolarUncharged \nAminoAcids.AminoAcidSetHydrophobic \nAminoAcidSetHydrophobic \nAminoAcids.aminoAcidSetHydrophobic \naminoAcidSetHydrophobic \nAminoAcids.aminoAcidSetSpecialCases \naminoAcidSetSpecialCases \nAminoAcids.name \nname \nAminoAcids.formula \nformula \nAminoAcids.symbol \nsymbol \nAminoAcids.isTerminator \nisTerminator \nAminoAcids.isGap \nisGap \nAminoAcids.monoisoMass \nmonoisoMass \nAminoAcids.averageMass \naverageMass \nAminoAcids.initMonoisoMassWithMemP \ninitMonoisoMassWithMemP \nAminoAcids.initAverageMassWithMemP \ninitAverageMassWithMemP \nAminoAcids.isCharged \nisCharged \nAminoAcids.isPosCharged \nisPosCharged \nAminoAcids.isNegCharged \nisNegCharged \nAminoAcids.isPolar \nisPolar \nAminoAcids.isPolarUncharged \nisPolarUncharged \nAminoAcids.isHydrophobic \nisHydrophobic \nAminoAcids.isModified \nisModified","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#setModification","title":"AminoAcids.setModification","content":"AminoAcids.setModification \nsetModification \n Sets amino acid modification ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#setModifications","title":"AminoAcids.setModifications","content":"AminoAcids.setModifications \nsetModifications \n Sets multiple amino acid modifications ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#getModifications","title":"AminoAcids.getModifications","content":"AminoAcids.getModifications \ngetModifications \n Gets amino acid modifications ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#getAminoAcidWithoutMod","title":"AminoAcids.getAminoAcidWithoutMod","content":"AminoAcids.getAminoAcidWithoutMod \ngetAminoAcidWithoutMod \n Gets amino acid without the modifications ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#tryGetModifications","title":"AminoAcids.tryGetModifications","content":"AminoAcids.tryGetModifications \ntryGetModifications \n Gets amino acid modifications ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isotopicLabelFunc","title":"AminoAcids.isotopicLabelFunc","content":"AminoAcids.isotopicLabelFunc \nisotopicLabelFunc \nModifies a formula f by applying all isotopic modifications of a given amino acid aa","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#charToParsedAminoAcidChar","title":"AminoAcids.charToParsedAminoAcidChar","content":"AminoAcids.charToParsedAminoAcidChar \ncharToParsedAminoAcidChar \nSimple Lexer for parsing AminoAcids from chars. The full parser is located in the BioItemsConverter-module","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#AminoAcidSetStandard","title":"AminoAcids.AminoAcidSetStandard","content":"AminoAcids.AminoAcidSetStandard \nAminoAcidSetStandard \nSet of the 20 standard amino acids","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetStandard","title":"AminoAcids.aminoAcidSetStandard","content":"AminoAcids.aminoAcidSetStandard \naminoAcidSetStandard \nSet of the 20 standard amino acids of the genetic code","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetProteinogenic","title":"AminoAcids.aminoAcidSetProteinogenic","content":"AminoAcids.aminoAcidSetProteinogenic \naminoAcidSetProteinogenic \nSet of all 22 proteinogenic amino acids (20 standard \u002B Selenocysteine \u002B Pyrrolysine)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetProteinogenicEucaryotes","title":"AminoAcids.aminoAcidSetProteinogenicEucaryotes","content":"AminoAcids.aminoAcidSetProteinogenicEucaryotes \naminoAcidSetProteinogenicEucaryotes \nSet of all 21 proteinogenic amino acids in eucaryotes (20 standard \u002B Selenocysteine)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#AminoAcidSetAmbiguity","title":"AminoAcids.AminoAcidSetAmbiguity","content":"AminoAcids.AminoAcidSetAmbiguity \nAminoAcidSetAmbiguity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetAmbiguity","title":"AminoAcids.aminoAcidSetAmbiguity","content":"AminoAcids.aminoAcidSetAmbiguity \naminoAcidSetAmbiguity \nSet of all ambiguous codes","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#AminoAcidSetGapTer","title":"AminoAcids.AminoAcidSetGapTer","content":"AminoAcids.AminoAcidSetGapTer \nAminoAcidSetGapTer \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetGapTer","title":"AminoAcids.aminoAcidSetGapTer","content":"AminoAcids.aminoAcidSetGapTer \naminoAcidSetGapTer \nSet containing the Gap and the Terminator AminoAcid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#AminoAcidSetPosCharged","title":"AminoAcids.AminoAcidSetPosCharged","content":"AminoAcids.AminoAcidSetPosCharged \nAminoAcidSetPosCharged \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetPosCharged","title":"AminoAcids.aminoAcidSetPosCharged","content":"AminoAcids.aminoAcidSetPosCharged \naminoAcidSetPosCharged \nSet of all AminoAcids with basic (positively charged) sidechain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#AminoAcidSetNegCharged","title":"AminoAcids.AminoAcidSetNegCharged","content":"AminoAcids.AminoAcidSetNegCharged \nAminoAcidSetNegCharged \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetNegCharged","title":"AminoAcids.aminoAcidSetNegCharged","content":"AminoAcids.aminoAcidSetNegCharged \naminoAcidSetNegCharged \nSet of all AminoAcids with acidic sidechain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#AminoAcidSetPolar","title":"AminoAcids.AminoAcidSetPolar","content":"AminoAcids.AminoAcidSetPolar \nAminoAcidSetPolar \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetPolarUncharged","title":"AminoAcids.aminoAcidSetPolarUncharged","content":"AminoAcids.aminoAcidSetPolarUncharged \naminoAcidSetPolarUncharged \nSet of all AminoAcids with uncharged polar sidechain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#AminoAcidSetHydrophobic","title":"AminoAcids.AminoAcidSetHydrophobic","content":"AminoAcids.AminoAcidSetHydrophobic \nAminoAcidSetHydrophobic \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetHydrophobic","title":"AminoAcids.aminoAcidSetHydrophobic","content":"AminoAcids.aminoAcidSetHydrophobic \naminoAcidSetHydrophobic \nSet of all AminoAcids with hydrophobic sidechain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#aminoAcidSetSpecialCases","title":"AminoAcids.aminoAcidSetSpecialCases","content":"AminoAcids.aminoAcidSetSpecialCases \naminoAcidSetSpecialCases \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#name","title":"AminoAcids.name","content":"AminoAcids.name \nname \n Returns the name of AminoAcid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#formula","title":"AminoAcids.formula","content":"AminoAcids.formula \nformula \nReturns amino acid formulas minus H20            ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#symbol","title":"AminoAcids.symbol","content":"AminoAcids.symbol \nsymbol \n Returns the symbol of AminoAcid       ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isTerminator","title":"AminoAcids.isTerminator","content":"AminoAcids.isTerminator \nisTerminator \n Returns true if AminoAcid represents a sequence terminator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isGap","title":"AminoAcids.isGap","content":"AminoAcids.isGap \nisGap \n Returns true if AminoAcid represents a sequence gap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#monoisoMass","title":"AminoAcids.monoisoMass","content":"AminoAcids.monoisoMass \nmonoisoMass \n Returns the monoisotopic mass of AminoAcid (without H20)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#averageMass","title":"AminoAcids.averageMass","content":"AminoAcids.averageMass \naverageMass \n Returns the average mass of AminoAcid (without H20)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#initMonoisoMassWithMemP","title":"AminoAcids.initMonoisoMassWithMemP","content":"AminoAcids.initMonoisoMassWithMemP \ninitMonoisoMassWithMemP \n Returns a function to calculate the monoisotopic mass of a AminoAcid with memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#initAverageMassWithMemP","title":"AminoAcids.initAverageMassWithMemP","content":"AminoAcids.initAverageMassWithMemP \ninitAverageMassWithMemP \n Returns a function to calculate the average mass of a AminoAcid with memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isCharged","title":"AminoAcids.isCharged","content":"AminoAcids.isCharged \nisCharged \n Returns true, if the AminoAcid has a basic or acidic side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isPosCharged","title":"AminoAcids.isPosCharged","content":"AminoAcids.isPosCharged \nisPosCharged \n Returns true, if the AminoAcid has a basic side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isNegCharged","title":"AminoAcids.isNegCharged","content":"AminoAcids.isNegCharged \nisNegCharged \n Returns true, if the AminoAcid has an acidic side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isPolar","title":"AminoAcids.isPolar","content":"AminoAcids.isPolar \nisPolar \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isPolarUncharged","title":"AminoAcids.isPolarUncharged","content":"AminoAcids.isPolarUncharged \nisPolarUncharged \n Returns true, if the AminoAcid has a polar, uncharged side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isHydrophobic","title":"AminoAcids.isHydrophobic","content":"AminoAcids.isHydrophobic \nisHydrophobic \n Returns true, if the AminoAcid has a hydrophobic side chain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids.html#isModified","title":"AminoAcids.isModified","content":"AminoAcids.isModified \nisModified \n Returns true if AminoAcid contains a modification","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html","title":"AminoAcid","content":"AminoAcid \n Amino acid Codes \nAminoAcid.op_Explicit \nop_Explicit \nAminoAcid.op_Explicit \nop_Explicit \nAminoAcid.Ala \nAla \nAminoAcid.Cys \nCys \nAminoAcid.Asp \nAsp \nAminoAcid.Glu \nGlu \nAminoAcid.Phe \nPhe \nAminoAcid.Gly \nGly \nAminoAcid.His \nHis \nAminoAcid.Ile \nIle \nAminoAcid.Lys \nLys \nAminoAcid.Leu \nLeu \nAminoAcid.Met \nMet \nAminoAcid.Asn \nAsn \nAminoAcid.Pyl \nPyl \nAminoAcid.Pro \nPro \nAminoAcid.Gln \nGln \nAminoAcid.Arg \nArg \nAminoAcid.Ser \nSer \nAminoAcid.Thr \nThr \nAminoAcid.Sel \nSel \nAminoAcid.Sec \nSec \nAminoAcid.Val \nVal \nAminoAcid.Trp \nTrp \nAminoAcid.Tyr \nTyr \nAminoAcid.Xaa \nXaa \nAminoAcid.Xle \nXle \nAminoAcid.Glx \nGlx \nAminoAcid.Asx \nAsx \nAminoAcid.Gap \nGap \nAminoAcid.Ter \nTer \nAminoAcid.Mod \nMod","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#op_Explicit","title":"AminoAcid.op_Explicit","content":"AminoAcid.op_Explicit \nop_Explicit \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#op_Explicit","title":"AminoAcid.op_Explicit","content":"AminoAcid.op_Explicit \nop_Explicit \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Ala","title":"AminoAcid.Ala","content":"AminoAcid.Ala \nAla \n \u0027A\u0027 - Ala - Alanine\n\n Very abundant and very versatile, it is more stiff than glycine, but small enough to pose only small steric limits for the protein conformation. It behaves fairly neutrally, and can be located in both hydrophilic regions on the protein outside and the hydrophobic areas inside.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Cys","title":"AminoAcid.Cys","content":"AminoAcid.Cys \nCys \n \u0027C\u0027 - Cys - Cysteine\n\n The sulfur atom bonds readily to heavy metal ions. Under oxidizing conditions, two cysteines can join together in a disulfide bond to form the amino acid cystine. When cystines are part of a protein, insulin for example, the tertiary structure is stabilized, which makes the protein more resistant to denaturation; therefore, disulfide bonds are common in proteins that have to function in harsh environments including digestive enzymes (e.g., pepsin and chymotrypsin) and structural proteins (e.g., keratin). Disulfides are also found in peptides too small to hold a stable shape on their own (e.g. insulin).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Asp","title":"AminoAcid.Asp","content":"AminoAcid.Asp \nAsp \n \u0027D\u0027 - Asp - Aspartic Acid\n\n Asp behaves similarly to glutamic acid, and carries a hydrophilic acidic group with strong negative charge. Usually, it is located on the outer surface of the protein, making it water-soluble. It binds to positively charged molecules and ions, and is often used in enzymes to fix the metal ion. When located inside of the protein, aspartate and glutamate are usually paired with arginine and lysine.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Glu","title":"AminoAcid.Glu","content":"AminoAcid.Glu \nGlu \n \u0027E\u0027 - Glu - Glutamic Acid\n\n Glu behaves similarly to aspartic acid, and has a longer, slightly more flexible side chain.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Phe","title":"AminoAcid.Phe","content":"AminoAcid.Phe \nPhe \n \u0027F\u0027 - Phe - Phenylalanine\n\n Essential for humans, phenylalanine, tyrosine, and tryptophan contain a large, rigid aromatic group on the side chain. These are the biggest amino acids. Like isoleucine, leucine, and valine, these are hydrophobic and tend to orient towards the interior of the folded protein molecule. Phenylalanine can be converted into tyrosine.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Gly","title":"AminoAcid.Gly","content":"AminoAcid.Gly \nGly \n \u0027G\u0027 - Gly - Glycine\n\n Because of the two hydrogen atoms at the \u03B1 carbon, glycine is not optically active. It is the smallest amino acid, rotates easily, and adds flexibility to the protein chain. It is able to fit into the tightest spaces, e.g., the triple helix of collagen. As too much flexibility is usually not desired, as a structural component, it is less common than alanine.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#His","title":"AminoAcid.His","content":"AminoAcid.His \nHis \n \u0027H\u0027 - His - Histidine\n\n His is essential for humans. In even slightly acidic conditions, protonation of the nitrogen occurs, changing the properties of histidine and the polypeptide as a whole. It is used by many proteins as a regulatory mechanism, changing the conformation and behavior of the polypeptide in acidic regions such as the late endosome or lysosome, enforcing conformation change in enzymes. However, only a few histidines are needed for this, so it is comparatively scarce.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Ile","title":"AminoAcid.Ile","content":"AminoAcid.Ile \nIle \n \u0027I\u0027 - Ile - Isoleucine\n\n Ile is essential for humans. Isoleucine, leucine, and valine have large aliphatic hydrophobic side chains. Their molecules are rigid, and their mutual hydrophobic interactions are important for the correct folding of proteins, as these chains tend to be located inside of the protein molecule.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Lys","title":"AminoAcid.Lys","content":"AminoAcid.Lys \nLys \n \u0027K\u0027 - Lys - Lysine\n\n Lys is essential for humans, and behaves similarly to arginine. It contains a long, flexible side chain with a positively charged end. The flexibility of the chain makes lysine and arginine suitable for binding to molecules with many negative charges on their surfaces. E.g., DNA-binding proteins have their active regions rich with arginine and lysine. The strong charge makes these two amino acids prone to be located on the outer hydrophilic surfaces of the proteins; when they are found inside, they are usually paired with a corresponding negatively charged amino acid, e.g., aspartate or glutamate.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Leu","title":"AminoAcid.Leu","content":"AminoAcid.Leu \nLeu \n \u0027L\u0027 - Leu - Leucine\n\n Leu is essential for humans, and behaves similarly to isoleucine and valine.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Met","title":"AminoAcid.Met","content":"AminoAcid.Met \nMet \n \u0027M\u0027 - Met - Methionine\n\n Met is essential for humans. Always the first amino acid to be incorporated into a protein, it is sometimes removed after translation. Like cysteine, it contains sulfur, but with a methyl group instead of hydrogen. This methyl group can be activated, and is used in many reactions where a new carbon atom is being added to another molecule.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Asn","title":"AminoAcid.Asn","content":"AminoAcid.Asn \nAsn \n \u0027N\u0027 - Asn - Asparagine\n\n Similar to aspartic acid, Asn contains an amide group where Asp has a carboxyl.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Pyl","title":"AminoAcid.Pyl","content":"AminoAcid.Pyl \nPyl \n \u0027O\u0027 - Pyl - Pyrrolysine\n\n Similar to lysine, but it has a pyrroline ring attached. In some methanogenic prokaryotes, the UAG codon (normally a stop codon) can also be translated to pyrrolysine.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Pro","title":"AminoAcid.Pro","content":"AminoAcid.Pro \nPro \n \u0027P\u0027 - Pro - Proline\n\n Pro contains an unusual ring to the N-end amine group, which forces the CO-NH amide sequence into a fixed conformation. It can disrupt protein folding structures like \u03B1 helix or \u03B2 sheet, forcing the desired kink in the protein chain. Common in collagen, it often undergoes a post-translational modification to hydroxyproline.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Gln","title":"AminoAcid.Gln","content":"AminoAcid.Gln \nGln \n \u0027Q\u0027 - Gln - Glutamine\n\n Similar to glutamic acid, Gln contains an amide group where Glu has a carboxyl. Used in proteins and as a storage for ammonia, it is the most abundant amino acid in the body.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Arg","title":"AminoAcid.Arg","content":"AminoAcid.Arg \nArg \n \u0027R\u0027 - Arg - Arginine\n\n Functionally similar to lysine.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Ser","title":"AminoAcid.Ser","content":"AminoAcid.Ser \nSer \n \u0027S\u0027 - Ser - Serine\n\n Serine and threonine have a short group ended with a hydroxyl group. Its hydrogen is easy to remove, so serine and threonine often act as hydrogen donors in enzymes. Both are very hydrophilic, so the outer regions of soluble proteins tend to be rich with them.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Thr","title":"AminoAcid.Thr","content":"AminoAcid.Thr \nThr \n \u0027T\u0027 - Thr - Threonine\n\n Essential for humans, Thr behaves similarly to serine.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Sel","title":"AminoAcid.Sel","content":"AminoAcid.Sel \nSel \n \u0027U\u0027 - Sel - Selenocysteine\n\n The selenium analog of cysteine, in which selenium replaces the sulfur atom.\n Warning: \u0027Sel\u0027 is not the official UPAC abbreviation. \n This case will be removed in favor of \u0027Sec\u0027 in the next major release","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Sec","title":"AminoAcid.Sec","content":"AminoAcid.Sec \nSec \n \u0027U\u0027 - Sec - Selenocysteine\n\n The selenium analog of cysteine, in which selenium replaces the sulfur atom.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Val","title":"AminoAcid.Val","content":"AminoAcid.Val \nVal \n \u0027V\u0027 - Val - Valine\n\n Essential for humans, Val behaves similarly to isoleucine and leucine.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Trp","title":"AminoAcid.Trp","content":"AminoAcid.Trp \nTrp \n \u0027W\u0027 - Trp - Tryptophan\n\n Essential for humans, Trp behaves similarly to phenylalanine and tyrosine. It is a precursor of serotonin and is naturally fluorescent.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Tyr","title":"AminoAcid.Tyr","content":"AminoAcid.Tyr \nTyr \n \u0027Y\u0027 - Tyr - Tyrosine\n\n Tyr behaves similarly to phenylalanine (precursor to tyrosine) and tryptophan, and is a precursor of melanin, epinephrine, and thyroid hormones. Naturally fluorescent, its fluorescence is usually quenched by energy transfer to tryptophans.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Xaa","title":"AminoAcid.Xaa","content":"AminoAcid.Xaa \nXaa \n \u0027X\u0027 - Xaa - Unspecified \n\n Placeholder in a sequence for any amino acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Xle","title":"AminoAcid.Xle","content":"AminoAcid.Xle \nXle \n \u0027J\u0027  *Leucine/Isoleucine\n\n Placeholder in a sequence for either Leucine or Isoleucine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Glx","title":"AminoAcid.Glx","content":"AminoAcid.Glx \nGlx \n \u0027Z\u0027 - Glx - Glutamine/glutamic acid\n\n Placeholder in a sequence for either Glutamine or Glutamic Acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Asx","title":"AminoAcid.Asx","content":"AminoAcid.Asx \nAsx \n \u0027B\u0027 - Asx - Asparagine/aspartic acid\n\n Placeholder in a sequence for either Asparagine or Aspartic Acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Gap","title":"AminoAcid.Gap","content":"AminoAcid.Gap \nGap \n \u0027-\u0027  Gap ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Ter","title":"AminoAcid.Ter","content":"AminoAcid.Ter \nTer \n \u0027*\u0027  Termination","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-aminoacid.html#Mod","title":"AminoAcid.Mod","content":"AminoAcid.Mod \nMod \n Modified AminoAcid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-parsedaminoacidchar.html","title":"ParsedAminoAcidChar","content":"ParsedAminoAcidChar \nLexer tags for parsing AminoAcids \nParsedAminoAcidChar.StandardCodes \nStandardCodes \nParsedAminoAcidChar.AmbiguityCodes \nAmbiguityCodes \nParsedAminoAcidChar.GapTer \nGapTer \nParsedAminoAcidChar.NoAAChar \nNoAAChar","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-parsedaminoacidchar.html#StandardCodes","title":"ParsedAminoAcidChar.StandardCodes","content":"ParsedAminoAcidChar.StandardCodes \nStandardCodes \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-parsedaminoacidchar.html#AmbiguityCodes","title":"ParsedAminoAcidChar.AmbiguityCodes","content":"ParsedAminoAcidChar.AmbiguityCodes \nAmbiguityCodes \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-parsedaminoacidchar.html#GapTer","title":"ParsedAminoAcidChar.GapTer","content":"ParsedAminoAcidChar.GapTer \nGapTer \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoacids-parsedaminoacidchar.html#NoAAChar","title":"ParsedAminoAcidChar.NoAAChar","content":"ParsedAminoAcidChar.NoAAChar \nNoAAChar \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties.html","title":"AminoProperties","content":"AminoProperties \nContains functionalities for obtaining included literary data on key amino acid properties \nAminoProperties.AminoProperty \nAminoProperty \nAminoProperties.initGetAminoProperty \ninitGetAminoProperty \nAminoProperties.initGetAminoPropertyZnorm \ninitGetAminoPropertyZnorm \nAminoProperties.ofWindowedBioArray \nofWindowedBioArray \nAminoProperties.ofBioArrayRndNorm \nofBioArrayRndNorm","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties.html#initGetAminoProperty","title":"AminoProperties.initGetAminoProperty","content":"AminoProperties.initGetAminoProperty \ninitGetAminoProperty \nReturns a simple mapping function for the given amino acid property","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties.html#initGetAminoPropertyZnorm","title":"AminoProperties.initGetAminoPropertyZnorm","content":"AminoProperties.initGetAminoPropertyZnorm \ninitGetAminoPropertyZnorm \nReturns a simple mapping function for the given amino acid property. Normalizes the values to the Z-Norm scale","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties.html#ofWindowedBioArray","title":"AminoProperties.ofWindowedBioArray","content":"AminoProperties.ofWindowedBioArray \nofWindowedBioArray \n Returns an array of sliding windows based property averages.\n Each window contains the n elements surrounding the current element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties.html#ofBioArrayRndNorm","title":"AminoProperties.ofBioArrayRndNorm","content":"AminoProperties.ofBioArrayRndNorm \nofBioArrayRndNorm \n Returns an array of sliding windows based property averages.\n Each window contains the n elements surrounding the current element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html","title":"AminoProperty","content":"AminoProperty \nUnion case of amino acid properties, referencing the according included information in this library. Use \u0022initGetAminoProperty\u0022 function to obtain a simple mapping function \nAminoProperty.toString \ntoString \nAminoProperty.GravyScore \nGravyScore \nAminoProperty.HydrophobicityIndex \nHydrophobicityIndex \nAminoProperty.HydrophobicityFasman \nHydrophobicityFasman \nAminoProperty.MeltingPointFasman \nMeltingPointFasman \nAminoProperty.OpticalRotationFasman \nOpticalRotationFasman \nAminoProperty.PK_NFasman \nPK_NFasman \nAminoProperty.PK_CFasman \nPK_CFasman \nAminoProperty.NormalizedBetaSheet \nNormalizedBetaSheet \nAminoProperty.NormalizedHelix \nNormalizedHelix \nAminoProperty.NormalizedTurn \nNormalizedTurn \nAminoProperty.HelixCoil \nHelixCoil \nAminoProperty.BetaCoil \nBetaCoil \nAminoProperty.Helicity \nHelicity \nAminoProperty.BetaSheetPropensity \nBetaSheetPropensity \nAminoProperty.Amphiphilicity \nAmphiphilicity \nAminoProperty.NNEIG \nNNEIG \nAminoProperty.SWEIG \nSWEIG \nAminoProperty.PRILS \nPRILS \nAminoProperty.ALTFT \nALTFT \nAminoProperty.ALTLS \nALTLS \nAminoProperty.TOTFT \nTOTFT \nAminoProperty.TOTLS \nTOTLS \nAminoProperty.PKr \nPKr \nAminoProperty.ActivationGibbsEnergy9 \nActivationGibbsEnergy9 \nAminoProperty.MEMofSingleSpanning \nMEMofSingleSpanning \nAminoProperty.PrincipalComponentI \nPrincipalComponentI \nAminoProperty.PrincipalComponentII \nPrincipalComponentII \nAminoProperty.PrincipalComponentIII \nPrincipalComponentIII \nAminoProperty.PrincipalComponentIV \nPrincipalComponentIV \nAminoProperty.HydrationPotential \nHydrationPotential \nAminoProperty.HydrophobicityIndex2 \nHydrophobicityIndex2 \nAminoProperty.ChouFasmanCoil \nChouFasmanCoil \nAminoProperty.AverageNumberSurroundingResidues \nAverageNumberSurroundingResidues \nAminoProperty.CompositionIntracellular \nCompositionIntracellular \nAminoProperty.CompositionExtracellular \nCompositionExtracellular \nAminoProperty.WeightsCoilMinus3 \nWeightsCoilMinus3 \nAminoProperty.WeightsHelixMinus3 \nWeightsHelixMinus3 \nAminoProperty.HelixFormationParameters \nHelixFormationParameters \nAminoProperty.FreeEnergyHelicalRegion \nFreeEnergyHelicalRegion \nAminoProperty.ELi \nELi","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#toString","title":"AminoProperty.toString","content":"AminoProperty.toString \ntoString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#GravyScore","title":"AminoProperty.GravyScore","content":"AminoProperty.GravyScore \nGravyScore \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#HydrophobicityIndex","title":"AminoProperty.HydrophobicityIndex","content":"AminoProperty.HydrophobicityIndex \nHydrophobicityIndex \n Hydrophobicity index (Argos et al., 1982)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#HydrophobicityFasman","title":"AminoProperty.HydrophobicityFasman","content":"AminoProperty.HydrophobicityFasman \nHydrophobicityFasman \n Hydrophobicity index (Fasman, 1989)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#MeltingPointFasman","title":"AminoProperty.MeltingPointFasman","content":"AminoProperty.MeltingPointFasman \nMeltingPointFasman \n Melting point (Fasman, 1976)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#OpticalRotationFasman","title":"AminoProperty.OpticalRotationFasman","content":"AminoProperty.OpticalRotationFasman \nOpticalRotationFasman \n Optical rotation (Fasman, 1976)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#PK_NFasman","title":"AminoProperty.PK_NFasman","content":"AminoProperty.PK_NFasman \nPK_NFasman \n pK-N (Fasman, 1976)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#PK_CFasman","title":"AminoProperty.PK_CFasman","content":"AminoProperty.PK_CFasman \nPK_CFasman \n pK-C (Fasman, 1976)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#NormalizedBetaSheet","title":"AminoProperty.NormalizedBetaSheet","content":"AminoProperty.NormalizedBetaSheet \nNormalizedBetaSheet \n Normalized frequency of beta-sheet (Crawford et al., 1973)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#NormalizedHelix","title":"AminoProperty.NormalizedHelix","content":"AminoProperty.NormalizedHelix \nNormalizedHelix \n Normalized frequency of middle helix (Crawford et al., 1973)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#NormalizedTurn","title":"AminoProperty.NormalizedTurn","content":"AminoProperty.NormalizedTurn \nNormalizedTurn \n Normalized frequency of turn (Crawford et al., 1973)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#HelixCoil","title":"AminoProperty.HelixCoil","content":"AminoProperty.HelixCoil \nHelixCoil \n Helix-coil equilibrium constant (Ptitsyn-Finkelstein, 1983)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#BetaCoil","title":"AminoProperty.BetaCoil","content":"AminoProperty.BetaCoil \nBetaCoil \n Beta-coil equilibrium constant (Ptitsyn-Finkelstein, 1983)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#Helicity","title":"AminoProperty.Helicity","content":"AminoProperty.Helicity \nHelicity \n Alpha-helix propensity derived from designed sequences (Koehl-Levitt, 1999)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#BetaSheetPropensity","title":"AminoProperty.BetaSheetPropensity","content":"AminoProperty.BetaSheetPropensity \nBetaSheetPropensity \n Beta-sheet propensity derived from designed sequences (Koehl-Levitt, 1999)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#Amphiphilicity","title":"AminoProperty.Amphiphilicity","content":"AminoProperty.Amphiphilicity \nAmphiphilicity \n PRIFT index (Cornette et al., 1987)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#NNEIG","title":"AminoProperty.NNEIG","content":"AminoProperty.NNEIG \nNNEIG \n NNEIG index (Cornette et al., 1987)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#SWEIG","title":"AminoProperty.SWEIG","content":"AminoProperty.SWEIG \nSWEIG \n SWEIG index (Cornette et al., 1987)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#PRILS","title":"AminoProperty.PRILS","content":"AminoProperty.PRILS \nPRILS \n PRILS index (Cornette et al., 1987)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#ALTFT","title":"AminoProperty.ALTFT","content":"AminoProperty.ALTFT \nALTFT \n ALTFT index (Cornette et al., 1987)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#ALTLS","title":"AminoProperty.ALTLS","content":"AminoProperty.ALTLS \nALTLS \n ALTLS index (Cornette et al., 1987)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#TOTFT","title":"AminoProperty.TOTFT","content":"AminoProperty.TOTFT \nTOTFT \n TOTFT index (Cornette et al., 1987)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#TOTLS","title":"AminoProperty.TOTLS","content":"AminoProperty.TOTLS \nTOTLS \n TOTLS index (Cornette et al., 1987)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#PKr","title":"AminoProperty.PKr","content":"AminoProperty.PKr \nPKr \n pKr (Christen, Jaussi, Benoit 2016)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#ActivationGibbsEnergy9","title":"AminoProperty.ActivationGibbsEnergy9","content":"AminoProperty.ActivationGibbsEnergy9 \nActivationGibbsEnergy9 \n Activation Gibbs energy of unfolding, pH9.0 (Yutani et al., 1987)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#MEMofSingleSpanning","title":"AminoProperty.MEMofSingleSpanning","content":"AminoProperty.MEMofSingleSpanning \nMEMofSingleSpanning \n AA composition of MEM of single-spanning proteins (Nakashima-Nishikawa, 1992)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#PrincipalComponentI","title":"AminoProperty.PrincipalComponentI","content":"AminoProperty.PrincipalComponentI \nPrincipalComponentI \n Principal component I (Sneath, 1966)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#PrincipalComponentII","title":"AminoProperty.PrincipalComponentII","content":"AminoProperty.PrincipalComponentII \nPrincipalComponentII \n Principal component II (Sneath, 1966)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#PrincipalComponentIII","title":"AminoProperty.PrincipalComponentIII","content":"AminoProperty.PrincipalComponentIII \nPrincipalComponentIII \n Principal component III (Sneath, 1966)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#PrincipalComponentIV","title":"AminoProperty.PrincipalComponentIV","content":"AminoProperty.PrincipalComponentIV \nPrincipalComponentIV \n Principal component IV (Sneath, 1966)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#HydrationPotential","title":"AminoProperty.HydrationPotential","content":"AminoProperty.HydrationPotential \nHydrationPotential \n Hydration potential (Wolfenden et al., 1981)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#HydrophobicityIndex2","title":"AminoProperty.HydrophobicityIndex2","content":"AminoProperty.HydrophobicityIndex2 \nHydrophobicityIndex2 \n Hydrophobicity index (Wolfenden et al., 1979)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#ChouFasmanCoil","title":"AminoProperty.ChouFasmanCoil","content":"AminoProperty.ChouFasmanCoil \nChouFasmanCoil \n The Chou-Fasman parameter of the coil conformation (Charton-Charton, 1983)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#AverageNumberSurroundingResidues","title":"AminoProperty.AverageNumberSurroundingResidues","content":"AminoProperty.AverageNumberSurroundingResidues \nAverageNumberSurroundingResidues \n Average number of surrounding residues (Ponnuswamy et al., 1980)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#CompositionIntracellular","title":"AminoProperty.CompositionIntracellular","content":"AminoProperty.CompositionIntracellular \nCompositionIntracellular \n Interior composition of amino acids in intracellular proteins of mesophiles (percent) (Fukuchi-Nishikawa, 2001)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#CompositionExtracellular","title":"AminoProperty.CompositionExtracellular","content":"AminoProperty.CompositionExtracellular \nCompositionExtracellular \n Composition of amino acids in extracellular proteins (percent) (Cedano et al., 1997)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#WeightsCoilMinus3","title":"AminoProperty.WeightsCoilMinus3","content":"AminoProperty.WeightsCoilMinus3 \nWeightsCoilMinus3 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#WeightsHelixMinus3","title":"AminoProperty.WeightsHelixMinus3","content":"AminoProperty.WeightsHelixMinus3 \nWeightsHelixMinus3 \n Weights for alpha-helix at the window position of -3 (Qian-Sejnowski, 1988)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#HelixFormationParameters","title":"AminoProperty.HelixFormationParameters","content":"AminoProperty.HelixFormationParameters \nHelixFormationParameters \n Helix formation parameters (delta delta G) (O\u0027Neil-DeGrado, 1990)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#FreeEnergyHelicalRegion","title":"AminoProperty.FreeEnergyHelicalRegion","content":"AminoProperty.FreeEnergyHelicalRegion \nFreeEnergyHelicalRegion \n Free energy in alpha-helical region (Munoz-Serrano, 1994)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-aminoproperties-aminoproperty.html#ELi","title":"AminoProperty.ELi","content":"AminoProperty.ELi \nELi \n Average relative fractional occurrence in EL(i) (Rackovsky-Scheraga, 1982)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-annotatedsequence.html","title":"AnnotatedSequence","content":"AnnotatedSequence \n \nAnnotatedSequence.create \ncreate \nAnnotatedSequence.addFeatures \naddFeatures \nAnnotatedSequence.toStrings \ntoStrings \nAnnotatedSequence.format \nformat","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-annotatedsequence.html#create","title":"AnnotatedSequence.create","content":"AnnotatedSequence.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-annotatedsequence.html#addFeatures","title":"AnnotatedSequence.addFeatures","content":"AnnotatedSequence.addFeatures \naddFeatures \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-annotatedsequence.html#toStrings","title":"AnnotatedSequence.toStrings","content":"AnnotatedSequence.toStrings \ntoStrings \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-annotatedsequence.html#format","title":"AnnotatedSequence.format","content":"AnnotatedSequence.format \nformat \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html","title":"BioArray","content":"BioArray \nThis module contains the BioArray type and its according functions. The BioArray type is an array of objects using the IBioItem interface \nBioArray.BioArray\u003C\u0027a\u003E \nBioArray\u003C\u0027a\u003E \nBioArray.ofAminoAcidStringWithOptionConverter \nofAminoAcidStringWithOptionConverter \nBioArray.ofAminoAcidString \nofAminoAcidString \nBioArray.ofAminoAcidSymbolString \nofAminoAcidSymbolString \nBioArray.ofNucleotideStringWithOptionConverter \nofNucleotideStringWithOptionConverter \nBioArray.ofNucleotideString \nofNucleotideString \nBioArray.reverse \nreverse \nBioArray.complement \ncomplement \nBioArray.reverseComplement \nreverseComplement \nBioArray.mapInTriplets \nmapInTriplets \nBioArray.transcribeCodeingStrand \ntranscribeCodeingStrand \nBioArray.transcribeCodingStrand \ntranscribeCodingStrand \nBioArray.transcribeTemplateStrand \ntranscribeTemplateStrand \nBioArray.translate \ntranslate \nBioArray.isEqual \nisEqual \nBioArray.toString \ntoString \nBioArray.toMonoisotopicMass \ntoMonoisotopicMass \nBioArray.toAverageMass \ntoAverageMass \nBioArray.toMonoisotopicMassWith \ntoMonoisotopicMassWith \nBioArray.toAverageMassWith \ntoAverageMassWith \nBioArray.initMonoisoMass \ninitMonoisoMass \nBioArray.initAverageMass \ninitAverageMass \nBioArray.initMonoisoMassWith \ninitMonoisoMassWith \nBioArray.initAverageMassWith \ninitAverageMassWith \nBioArray.toCompositionVector \ntoCompositionVector \nBioArray.toRelCompositionVector \ntoRelCompositionVector \nBioArray.initSampleBy \ninitSampleBy","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#ofAminoAcidStringWithOptionConverter","title":"BioArray.ofAminoAcidStringWithOptionConverter","content":"BioArray.ofAminoAcidStringWithOptionConverter \nofAminoAcidStringWithOptionConverter \n Generates amino acid sequence of one-letter-code string using given OptionConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#ofAminoAcidString","title":"BioArray.ofAminoAcidString","content":"BioArray.ofAminoAcidString \nofAminoAcidString \n Generates amino acid sequence of one-letter-code raw string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#ofAminoAcidSymbolString","title":"BioArray.ofAminoAcidSymbolString","content":"BioArray.ofAminoAcidSymbolString \nofAminoAcidSymbolString \n Generates amino acid symbol sequence of one-letter-code raw string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#ofNucleotideStringWithOptionConverter","title":"BioArray.ofNucleotideStringWithOptionConverter","content":"BioArray.ofNucleotideStringWithOptionConverter \nofNucleotideStringWithOptionConverter \n Generates nucleotide sequence of one-letter-code string using given OptionConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#ofNucleotideString","title":"BioArray.ofNucleotideString","content":"BioArray.ofNucleotideString \nofNucleotideString \n Generates nucleotide sequence of one-letter-code raw string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#reverse","title":"BioArray.reverse","content":"BioArray.reverse \nreverse \n Create the reverse DNA or RNA strand. For example, the sequence \u0022ATGC\u0022 is converted to \u0022CGTA\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#complement","title":"BioArray.complement","content":"BioArray.complement \ncomplement \n Create the complement DNA or cDNA (from RNA) strand. For example, the sequence \u0022ATGC\u0022 is converted to \u0022TACG\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#reverseComplement","title":"BioArray.reverseComplement","content":"BioArray.reverseComplement \nreverseComplement \n Create the reverse complement strand meaning antiparallel DNA strand or the cDNA (from RNA) respectivly. For example, the sequence \u0022ATGC\u0022 is converted to \u0022GCAT\u0022. \u0022Antiparallel\u0022 combines the two functions \u0022Complement\u0022 and \u0022Inverse\u0022.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#mapInTriplets","title":"BioArray.mapInTriplets","content":"BioArray.mapInTriplets \nmapInTriplets \n Builts a new collection whose elements are the result of applying\n the given function to each triplet of the collection.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#transcribeCodeingStrand","title":"BioArray.transcribeCodeingStrand","content":"BioArray.transcribeCodeingStrand \ntranscribeCodeingStrand \n Transcribe a given DNA coding strand (5\u0027-----3\u0027)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#transcribeCodingStrand","title":"BioArray.transcribeCodingStrand","content":"BioArray.transcribeCodingStrand \ntranscribeCodingStrand \n Transcribe a given DNA coding strand (5\u0027-----3\u0027)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#transcribeTemplateStrand","title":"BioArray.transcribeTemplateStrand","content":"BioArray.transcribeTemplateStrand \ntranscribeTemplateStrand \n Transcribe a given DNA template strand (3\u0027-----5\u0027)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#translate","title":"BioArray.translate","content":"BioArray.translate \ntranslate \n translates nucleotide sequence to aminoacid sequence    ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#isEqual","title":"BioArray.isEqual","content":"BioArray.isEqual \nisEqual \n Compares the elemens of two biosequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#toString","title":"BioArray.toString","content":"BioArray.toString \ntoString \n Returns string of one-letter-code","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#toMonoisotopicMass","title":"BioArray.toMonoisotopicMass","content":"BioArray.toMonoisotopicMass \ntoMonoisotopicMass \n Returns monoisotopic mass of the given sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#toAverageMass","title":"BioArray.toAverageMass","content":"BioArray.toAverageMass \ntoAverageMass \n Returns average mass of the given sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#toMonoisotopicMassWith","title":"BioArray.toMonoisotopicMassWith","content":"BioArray.toMonoisotopicMassWith \ntoMonoisotopicMassWith \n Returns monoisotopic mass of the given sequence and initial value (e.g. H2O) ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#toAverageMassWith","title":"BioArray.toAverageMassWith","content":"BioArray.toAverageMassWith \ntoAverageMassWith \n Returns average mass of the given sequence and initial value (e.g. H2O) ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#initMonoisoMass","title":"BioArray.initMonoisoMass","content":"BioArray.initMonoisoMass \ninitMonoisoMass \n Returns a function to calculate the monoisotopic mass of the given sequence !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#initAverageMass","title":"BioArray.initAverageMass","content":"BioArray.initAverageMass \ninitAverageMass \n Returns a function to calculate the average mass of the given sequence !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#initMonoisoMassWith","title":"BioArray.initMonoisoMassWith","content":"BioArray.initMonoisoMassWith \ninitMonoisoMassWith \n Returns a function to calculate the monoisotopic mass of the given sequence and initial value (e.g. H2O) !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#initAverageMassWith","title":"BioArray.initAverageMassWith","content":"BioArray.initAverageMassWith \ninitAverageMassWith \n Returns a function to calculate the average mass of the given sequence and initial value (e.g. H2O) !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#toCompositionVector","title":"BioArray.toCompositionVector","content":"BioArray.toCompositionVector \ntoCompositionVector \nCreates an array with information about the abundacies of the distinct BioItems by converting the symbol of the BioItem to an integer and incrementing the given integer. To decrease the size of the resulting array by still having a fast performance, all indices are shifted by 65. Therefore to call the abundancy of a given BioItem, use \u0022Resultcompositionvector.[(BioItem.symbol bioitem) - 65]\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#toRelCompositionVector","title":"BioArray.toRelCompositionVector","content":"BioArray.toRelCompositionVector \ntoRelCompositionVector \nCreates an array with information about the abundacies of the distinct BioItems by converting the symbol of the BioItem to an integer and incrementing the given integer. To decrease the size of the resulting array by still having a fast performance, all indices are shifted by 65. Therefore to call the abundancy of a given BioItem, use \u0022Resultcompositionvector.[(BioItem.symbol bioitem) - 65]\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray.html#initSampleBy","title":"BioArray.initSampleBy","content":"BioArray.initSampleBy \ninitSampleBy \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioarray-bioarray-1.html","title":"BioArray\u003C\u0027a\u003E","content":"BioArray\u003C\u0027a\u003E \nArray of objects using the IBioItem interface","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions.html","title":"BioCollectionsExtensions","content":"BioCollectionsExtensions \n \nBioCollectionsExtensions.BioArray \nBioArray \nBioCollectionsExtensions.BioList \nBioList \nBioCollectionsExtensions.BioSeq \nBioSeq","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioarray.html","title":"BioArray","content":"BioArray \n \nBioArray.toBioList \ntoBioList \nBioArray.toBioSeq \ntoBioSeq \nBioArray.ofBioList \nofBioList \nBioArray.ofBioSeq \nofBioSeq \nBioArray.map \nmap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioarray.html#toBioList","title":"BioArray.toBioList","content":"BioArray.toBioList \ntoBioList \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioarray.html#toBioSeq","title":"BioArray.toBioSeq","content":"BioArray.toBioSeq \ntoBioSeq \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioarray.html#ofBioList","title":"BioArray.ofBioList","content":"BioArray.ofBioList \nofBioList \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioarray.html#ofBioSeq","title":"BioArray.ofBioSeq","content":"BioArray.ofBioSeq \nofBioSeq \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioarray.html#map","title":"BioArray.map","content":"BioArray.map \nmap \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-biolist.html","title":"BioList","content":"BioList \n \nBioList.toBioArray \ntoBioArray \nBioList.toBioSeq \ntoBioSeq \nBioList.ofBioArray \nofBioArray \nBioList.ofBioSeq \nofBioSeq \nBioList.map \nmap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-biolist.html#toBioArray","title":"BioList.toBioArray","content":"BioList.toBioArray \ntoBioArray \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-biolist.html#toBioSeq","title":"BioList.toBioSeq","content":"BioList.toBioSeq \ntoBioSeq \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-biolist.html#ofBioArray","title":"BioList.ofBioArray","content":"BioList.ofBioArray \nofBioArray \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-biolist.html#ofBioSeq","title":"BioList.ofBioSeq","content":"BioList.ofBioSeq \nofBioSeq \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-biolist.html#map","title":"BioList.map","content":"BioList.map \nmap \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioseq.html","title":"BioSeq","content":"BioSeq \n \nBioSeq.toBioArray \ntoBioArray \nBioSeq.toBioList \ntoBioList \nBioSeq.ofBioArray \nofBioArray \nBioSeq.ofBioList \nofBioList \nBioSeq.map \nmap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioseq.html#toBioArray","title":"BioSeq.toBioArray","content":"BioSeq.toBioArray \ntoBioArray \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioseq.html#toBioList","title":"BioSeq.toBioList","content":"BioSeq.toBioList \ntoBioList \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioseq.html#ofBioArray","title":"BioSeq.ofBioArray","content":"BioSeq.ofBioArray \nofBioArray \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioseq.html#ofBioList","title":"BioSeq.ofBioList","content":"BioSeq.ofBioList \nofBioList \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biocollectionsextensions-bioseq.html#map","title":"BioSeq.map","content":"BioSeq.map \nmap \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid.html","title":"BioID","content":"BioID \nParsing Library for common biological ID formats like Cre(C.reinhardtii) or YeastId \nBioID.FastA \nFastA \nBioID.ProteinExistence \nProteinExistence \nBioID.UniProtId \nUniProtId","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html","title":"FastA","content":"FastA \n \nFastA.FastaHeader\u003C\u0027IdType\u003E \nFastaHeader\u003C\u0027IdType\u003E \nFastA.createFastaHeader \ncreateFastaHeader \nFastA.displayIdOf \ndisplayIdOf \nFastA.aliasesOf \naliasesOf \nFastA.dataBaseVersionOf \ndataBaseVersionOf \nFastA.touOf \ntouOf \nFastA.sequenceVersionOf \nsequenceVersionOf \nFastA.organismNameOf \norganismNameOf \nFastA.proteinExistenceOf \nproteinExistenceOf \nFastA.geneNameOf \ngeneNameOf \nFastA.proteinNameOf \nproteinNameOf \nFastA.setDisplayId \nsetDisplayId \nFastA.setAliases \nsetAliases \nFastA.setDataBaseVersion \nsetDataBaseVersion \nFastA.setIdType \nsetIdType \nFastA.setSequenceVersion \nsetSequenceVersion \nFastA.setOrganismName \nsetOrganismName \nFastA.setProteinExistence \nsetProteinExistence \nFastA.setGeneName \nsetGeneName \nFastA.setProteinName \nsetProteinName \nFastA.fromString \nfromString","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#createFastaHeader","title":"FastA.createFastaHeader","content":"FastA.createFastaHeader \ncreateFastaHeader \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#displayIdOf","title":"FastA.displayIdOf","content":"FastA.displayIdOf \ndisplayIdOf \n Returns DisplayId of FastA header. None if none present.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#aliasesOf","title":"FastA.aliasesOf","content":"FastA.aliasesOf \naliasesOf \n Returns Aliases of FastA header. None if none present.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#dataBaseVersionOf","title":"FastA.dataBaseVersionOf","content":"FastA.dataBaseVersionOf \ndataBaseVersionOf \n Returns DataBaseVersion of FastA header. None if none present.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#touOf","title":"FastA.touOf","content":"FastA.touOf \ntouOf \n Returns Type of UniqueIdentifier of FastA header. None if none present.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#sequenceVersionOf","title":"FastA.sequenceVersionOf","content":"FastA.sequenceVersionOf \nsequenceVersionOf \n Returns SequenceVersion of FastA header. None if none present.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#organismNameOf","title":"FastA.organismNameOf","content":"FastA.organismNameOf \norganismNameOf \n Returns OrganismName of FastA header. None if none present.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#proteinExistenceOf","title":"FastA.proteinExistenceOf","content":"FastA.proteinExistenceOf \nproteinExistenceOf \n Returns ProteinExistence of FastA header. None if none present.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#geneNameOf","title":"FastA.geneNameOf","content":"FastA.geneNameOf \ngeneNameOf \n Returns GeneName of FastA header. None if none present.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#proteinNameOf","title":"FastA.proteinNameOf","content":"FastA.proteinNameOf \nproteinNameOf \n Returns ProteinName of FastA header. None if none present.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#setDisplayId","title":"FastA.setDisplayId","content":"FastA.setDisplayId \nsetDisplayId \n Sets DisplayId in FastA header.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#setAliases","title":"FastA.setAliases","content":"FastA.setAliases \nsetAliases \n Sets Aliases in FastA header.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#setDataBaseVersion","title":"FastA.setDataBaseVersion","content":"FastA.setDataBaseVersion \nsetDataBaseVersion \n Sets DataBaseVersion in FastA header.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#setIdType","title":"FastA.setIdType","content":"FastA.setIdType \nsetIdType \n Sets Type of UniqueIdentifier in FastA header.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#setSequenceVersion","title":"FastA.setSequenceVersion","content":"FastA.setSequenceVersion \nsetSequenceVersion \n Sets SequenceVersion in FastA header.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#setOrganismName","title":"FastA.setOrganismName","content":"FastA.setOrganismName \nsetOrganismName \n Sets OrganismName in FastA header.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#setProteinExistence","title":"FastA.setProteinExistence","content":"FastA.setProteinExistence \nsetProteinExistence \n Sets ProteinExistence in FastA header.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#setGeneName","title":"FastA.setGeneName","content":"FastA.setGeneName \nsetGeneName \n Sets GeneName in FastA header.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#setProteinName","title":"FastA.setProteinName","content":"FastA.setProteinName \nsetProteinName \n Sets ProteinName in FastA header.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta.html#fromString","title":"FastA.fromString","content":"FastA.fromString \nfromString \n Returns FastAHeader Object from UniProt style FastAHeader string\n\n For Reference see: https://www.uniprot.org/help/fasta-headers","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta-fastaheader-1.html","title":"FastaHeader\u003C\u0027IdType\u003E","content":"FastaHeader\u003C\u0027IdType\u003E \n \nFastaHeader\u003C\u0027IdType\u003E.ID \nID \nFastaHeader\u003C\u0027IdType\u003E.Description \nDescription \nFastaHeader\u003C\u0027IdType\u003E.Info \nInfo","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta-fastaheader-1.html#ID","title":"FastaHeader\u003C\u0027IdType\u003E.ID","content":"FastaHeader\u003C\u0027IdType\u003E.ID \nID \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta-fastaheader-1.html#Description","title":"FastaHeader\u003C\u0027IdType\u003E.Description","content":"FastaHeader\u003C\u0027IdType\u003E.Description \nDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-fasta-fastaheader-1.html#Info","title":"FastaHeader\u003C\u0027IdType\u003E.Info","content":"FastaHeader\u003C\u0027IdType\u003E.Info \nInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-proteinexistence.html","title":"ProteinExistence","content":"ProteinExistence \n Indicates the type of evidence that supports the existence of the protein \nProteinExistence.Unknown \nUnknown \nProteinExistence.ExperimentalProtein \nExperimentalProtein \nProteinExistence.ExperimentalTranscript \nExperimentalTranscript \nProteinExistence.Homology \nHomology \nProteinExistence.Predicted \nPredicted \nProteinExistence.Uncertain \nUncertain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-proteinexistence.html#Unknown","title":"ProteinExistence.Unknown","content":"ProteinExistence.Unknown \nUnknown \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-proteinexistence.html#ExperimentalProtein","title":"ProteinExistence.ExperimentalProtein","content":"ProteinExistence.ExperimentalProtein \nExperimentalProtein \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-proteinexistence.html#ExperimentalTranscript","title":"ProteinExistence.ExperimentalTranscript","content":"ProteinExistence.ExperimentalTranscript \nExperimentalTranscript \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-proteinexistence.html#Homology","title":"ProteinExistence.Homology","content":"ProteinExistence.Homology \nHomology \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-proteinexistence.html#Predicted","title":"ProteinExistence.Predicted","content":"ProteinExistence.Predicted \nPredicted \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-proteinexistence.html#Uncertain","title":"ProteinExistence.Uncertain","content":"ProteinExistence.Uncertain \nUncertain \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-uniprotid.html","title":"UniProtId","content":"UniProtId \n UniProt sequence identifier \nUniProtId.UniProtKB \nUniProtKB \nUniProtId.EntryName \nEntryName \nUniProtId.Isoform \nIsoform \nUniProtId.SequenceRange \nSequenceRange \nUniProtId.UniParc \nUniParc \nUniProtId.UniRef \nUniRef","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-uniprotid.html#UniProtKB","title":"UniProtId.UniProtKB","content":"UniProtId.UniProtKB \nUniProtKB \n UniProtKB entry: P00750","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-uniprotid.html#EntryName","title":"UniProtId.EntryName","content":"UniProtId.EntryName \nEntryName \n UniProtKB entry name: A4_HUMAN","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-uniprotid.html#Isoform","title":"UniProtId.Isoform","content":"UniProtId.Isoform \nIsoform \nUniProtKB entry isoform sequence: P00750-2","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-uniprotid.html#SequenceRange","title":"UniProtId.SequenceRange","content":"UniProtId.SequenceRange \nSequenceRange \n\tUniProtKB sequence range: P00750[39-81]","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-uniprotid.html#UniParc","title":"UniProtId.UniParc","content":"UniProtId.UniParc \nUniParc \n UniParc entry: UPI0000000001","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioid-uniprotid.html#UniRef","title":"UniProtId.UniRef","content":"UniProtId.UniRef \nUniRef \n UniRef entry: UniRef100_P00750","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html","title":"BioItem","content":"BioItem \n Basic functions on IBioItems interface \nBioItem.name \nname \nBioItem.symbol \nsymbol \nBioItem.formula \nformula \nBioItem.isTerminator \nisTerminator \nBioItem.isGap \nisGap \nBioItem.monoisoMass \nmonoisoMass \nBioItem.averageMass \naverageMass \nBioItem.initMonoisoMassWithMem \ninitMonoisoMassWithMem \nBioItem.initAverageMassWithMem \ninitAverageMassWithMem \nBioItem.initMonoisoMassWithMemP \ninitMonoisoMassWithMemP \nBioItem.initAverageMassWithMemP \ninitAverageMassWithMemP","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#name","title":"BioItem.name","content":"BioItem.name \nname \n Returns the display name of the bio item","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#symbol","title":"BioItem.symbol","content":"BioItem.symbol \nsymbol \n Returns the symbol of the bio item","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#formula","title":"BioItem.formula","content":"BioItem.formula \nformula \n Returns the formula of the bio item","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#isTerminator","title":"BioItem.isTerminator","content":"BioItem.isTerminator \nisTerminator \n Returns true if the bio item represents a sequence terminator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#isGap","title":"BioItem.isGap","content":"BioItem.isGap \nisGap \n Returns true if the bio item represents a sequence gap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#monoisoMass","title":"BioItem.monoisoMass","content":"BioItem.monoisoMass \nmonoisoMass \n Returns the monoisotopic mass of a bio item (without H20)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#averageMass","title":"BioItem.averageMass","content":"BioItem.averageMass \naverageMass \n Returns the average mass of a bio item  (without H20)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#initMonoisoMassWithMem","title":"BioItem.initMonoisoMassWithMem","content":"BioItem.initMonoisoMassWithMem \ninitMonoisoMassWithMem \n Returns a function to calculate the monoisotopic mass of a bio item with memoization !Attention! Not thread safe!","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#initAverageMassWithMem","title":"BioItem.initAverageMassWithMem","content":"BioItem.initAverageMassWithMem \ninitAverageMassWithMem \n Returns a function to calculate the average mass of a bio item with memoization !Attention! Not thread safe!","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#initMonoisoMassWithMemP","title":"BioItem.initMonoisoMassWithMemP","content":"BioItem.initMonoisoMassWithMemP \ninitMonoisoMassWithMemP \n Returns a function to calculate the monoisotopic mass of a bio item with memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitem.html#initAverageMassWithMemP","title":"BioItem.initAverageMassWithMemP","content":"BioItem.initAverageMassWithMemP \ninitAverageMassWithMemP \n Returns a function to calculate the average mass of a bio item with memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter.html","title":"BioItemsConverter","content":"BioItemsConverter \nContains Functionalities for parsing Bioitems \nBioItemsConverter.OptionConverter \nOptionConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter-optionconverter.html","title":"OptionConverter","content":"OptionConverter \nContains Functionalities for trying to parse Bioitems \nOptionConverter.AminoAcidOptionConverter \nAminoAcidOptionConverter \nOptionConverter.NucleotideOptionConverter \nNucleotideOptionConverter \nOptionConverter.charToOptionAminoAcid \ncharToOptionAminoAcid \nOptionConverter.charToOptionAminoAcidWithoutGapTer \ncharToOptionAminoAcidWithoutGapTer \nOptionConverter.charToOptionStandardAminoAcid \ncharToOptionStandardAminoAcid \nOptionConverter.charToOptionStandardAminoAcidWithoutGapTer \ncharToOptionStandardAminoAcidWithoutGapTer \nOptionConverter.charToOptionNucleotid \ncharToOptionNucleotid \nOptionConverter.charToOptionStandardNucleotid \ncharToOptionStandardNucleotid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter-optionconverter.html#charToOptionAminoAcid","title":"OptionConverter.charToOptionAminoAcid","content":"OptionConverter.charToOptionAminoAcid \ncharToOptionAminoAcid \n Converters char to AminoAcid option by ignoring bad character","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter-optionconverter.html#charToOptionAminoAcidWithoutGapTer","title":"OptionConverter.charToOptionAminoAcidWithoutGapTer","content":"OptionConverter.charToOptionAminoAcidWithoutGapTer \ncharToOptionAminoAcidWithoutGapTer \n Converters char to AminoAcid option by ignoring bad character\n Ignores Gap and Ter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter-optionconverter.html#charToOptionStandardAminoAcid","title":"OptionConverter.charToOptionStandardAminoAcid","content":"OptionConverter.charToOptionStandardAminoAcid \ncharToOptionStandardAminoAcid \n Converters char to AminoAcid option by ignoring bad character and ambiguis code        ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter-optionconverter.html#charToOptionStandardAminoAcidWithoutGapTer","title":"OptionConverter.charToOptionStandardAminoAcidWithoutGapTer","content":"OptionConverter.charToOptionStandardAminoAcidWithoutGapTer \ncharToOptionStandardAminoAcidWithoutGapTer \n Converters char to AminoAcid option by ignoring bad character and ambiguis code\n Ignores Gap and Ter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter-optionconverter.html#charToOptionNucleotid","title":"OptionConverter.charToOptionNucleotid","content":"OptionConverter.charToOptionNucleotid \ncharToOptionNucleotid \n Converters char to AminoAcid option by ignoring bad character","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter-optionconverter.html#charToOptionStandardNucleotid","title":"OptionConverter.charToOptionStandardNucleotid","content":"OptionConverter.charToOptionStandardNucleotid \ncharToOptionStandardNucleotid \n Converters char to AminoAcid option by ignoring bad character","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter-optionconverter-aminoacidoptionconverter.html","title":"AminoAcidOptionConverter","content":"AminoAcidOptionConverter \n Type abbreviation for converting char to optional AminoAcid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioitemsconverter-optionconverter-nucleotideoptionconverter.html","title":"NucleotideOptionConverter","content":"NucleotideOptionConverter \n Type abbreviation for converting char to optional Nucleotide","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html","title":"BioList","content":"BioList \nThis module contains the BioList type and its according functions. The BioList type is a List of objects using the IBioItem interface \nBioList.BioList\u003C\u0027a\u003E \nBioList\u003C\u0027a\u003E \nBioList.ofAminoAcidStringWithOptionConverter \nofAminoAcidStringWithOptionConverter \nBioList.ofAminoAcidString \nofAminoAcidString \nBioList.ofAminoAcidSymbolString \nofAminoAcidSymbolString \nBioList.ofNucleotideStringWithOptionConverter \nofNucleotideStringWithOptionConverter \nBioList.ofNucleotideString \nofNucleotideString \nBioList.reverse \nreverse \nBioList.complement \ncomplement \nBioList.reverseComplement \nreverseComplement \nBioList.mapInTriplets \nmapInTriplets \nBioList.transcribeCodeingStrand \ntranscribeCodeingStrand \nBioList.transcribeCodingStrand \ntranscribeCodingStrand \nBioList.transcribeTemplateStrand \ntranscribeTemplateStrand \nBioList.translate \ntranslate \nBioList.isEqual \nisEqual \nBioList.toString \ntoString \nBioList.toFormula \ntoFormula \nBioList.toMonoisotopicMass \ntoMonoisotopicMass \nBioList.toAverageMass \ntoAverageMass \nBioList.toMonoisotopicMassWith \ntoMonoisotopicMassWith \nBioList.toAverageMassWith \ntoAverageMassWith \nBioList.initMonoisoMass \ninitMonoisoMass \nBioList.initAverageMass \ninitAverageMass \nBioList.initMonoisoMassWith \ninitMonoisoMassWith \nBioList.initAverageMassWith \ninitAverageMassWith \nBioList.toCompositionVector \ntoCompositionVector","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#ofAminoAcidStringWithOptionConverter","title":"BioList.ofAminoAcidStringWithOptionConverter","content":"BioList.ofAminoAcidStringWithOptionConverter \nofAminoAcidStringWithOptionConverter \n Generates amino acid sequence of one-letter-code string using given OptionConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#ofAminoAcidString","title":"BioList.ofAminoAcidString","content":"BioList.ofAminoAcidString \nofAminoAcidString \n Generates amino acid sequence of one-letter-code raw string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#ofAminoAcidSymbolString","title":"BioList.ofAminoAcidSymbolString","content":"BioList.ofAminoAcidSymbolString \nofAminoAcidSymbolString \n Generates AminoAcidSymbol sequence of one-letter-code raw string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#ofNucleotideStringWithOptionConverter","title":"BioList.ofNucleotideStringWithOptionConverter","content":"BioList.ofNucleotideStringWithOptionConverter \nofNucleotideStringWithOptionConverter \n Generates nucleotide sequence of one-letter-code string using given OptionConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#ofNucleotideString","title":"BioList.ofNucleotideString","content":"BioList.ofNucleotideString \nofNucleotideString \n Generates nucleotide sequence of one-letter-code raw string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#reverse","title":"BioList.reverse","content":"BioList.reverse \nreverse \n Create the reverse DNA or RNA strand. For example, the sequence \u0022ATGC\u0022 is converted to \u0022CGTA\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#complement","title":"BioList.complement","content":"BioList.complement \ncomplement \n Create the complement DNA or cDNA (from RNA) strand. For example, the sequence \u0022ATGC\u0022 is converted to \u0022TACG\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#reverseComplement","title":"BioList.reverseComplement","content":"BioList.reverseComplement \nreverseComplement \n Create the reverse complement strand meaning antiparallel DNA strand or the cDNA (from RNA) respectivly. For example, the sequence \u0022ATGC\u0022 is converted to \u0022GCAT\u0022. \u0022Antiparallel\u0022 combines the two functions \u0022Complement\u0022 and \u0022Inverse\u0022.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#mapInTriplets","title":"BioList.mapInTriplets","content":"BioList.mapInTriplets \nmapInTriplets \n Builts a new collection whose elements are the result of applying\n the given function to each triplet of the collection.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#transcribeCodeingStrand","title":"BioList.transcribeCodeingStrand","content":"BioList.transcribeCodeingStrand \ntranscribeCodeingStrand \n Transcribe a given DNA coding strand (5\u0027-----3\u0027)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#transcribeCodingStrand","title":"BioList.transcribeCodingStrand","content":"BioList.transcribeCodingStrand \ntranscribeCodingStrand \n Transcribe a given DNA coding strand (5\u0027-----3\u0027)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#transcribeTemplateStrand","title":"BioList.transcribeTemplateStrand","content":"BioList.transcribeTemplateStrand \ntranscribeTemplateStrand \n Transcribe a given DNA template strand (3\u0027-----5\u0027)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#translate","title":"BioList.translate","content":"BioList.translate \ntranslate \n translates nucleotide sequence to aminoacid sequence    ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#isEqual","title":"BioList.isEqual","content":"BioList.isEqual \nisEqual \n Compares the elemens of two sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#toString","title":"BioList.toString","content":"BioList.toString \ntoString \n Returns string of one-letter-code","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#toFormula","title":"BioList.toFormula","content":"BioList.toFormula \ntoFormula \n Returns formula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#toMonoisotopicMass","title":"BioList.toMonoisotopicMass","content":"BioList.toMonoisotopicMass \ntoMonoisotopicMass \n Returns monoisotopic mass of the given sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#toAverageMass","title":"BioList.toAverageMass","content":"BioList.toAverageMass \ntoAverageMass \n Returns average mass of the given sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#toMonoisotopicMassWith","title":"BioList.toMonoisotopicMassWith","content":"BioList.toMonoisotopicMassWith \ntoMonoisotopicMassWith \n Returns monoisotopic mass of the given sequence and initial value (e.g. H2O) ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#toAverageMassWith","title":"BioList.toAverageMassWith","content":"BioList.toAverageMassWith \ntoAverageMassWith \n Returns average mass of the given sequence and initial value (e.g. H2O) ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#initMonoisoMass","title":"BioList.initMonoisoMass","content":"BioList.initMonoisoMass \ninitMonoisoMass \n Returns a function to calculate the monoisotopic mass of the given sequence !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#initAverageMass","title":"BioList.initAverageMass","content":"BioList.initAverageMass \ninitAverageMass \n Returns a function to calculate the average mass of the given sequence !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#initMonoisoMassWith","title":"BioList.initMonoisoMassWith","content":"BioList.initMonoisoMassWith \ninitMonoisoMassWith \n Returns a function to calculate the monoisotopic mass of the given sequence and initial value (e.g. H2O) !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#initAverageMassWith","title":"BioList.initAverageMassWith","content":"BioList.initAverageMassWith \ninitAverageMassWith \n Returns a function to calculate the average mass of the given sequence and initial value (e.g. H2O) !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist.html#toCompositionVector","title":"BioList.toCompositionVector","content":"BioList.toCompositionVector \ntoCompositionVector \nCreates an array with information about the abundacies of the distinct BioItems by converting the symbol of the BioItem to an integer and incrementing the given integer. To decrease the size of the resulting array by still having a fast performance, all indices are shifted by 65. Therefore to call the abundancy of a given BioItem, use \u0022Resultcompositionvector.[(BioItem.symbol bioitem) - 65]\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist-biolist-1.html","title":"BioList\u003C\u0027a\u003E","content":"BioList\u003C\u0027a\u003E \nList of objects using the IBioItem interface \nBioList\u003C\u0027a\u003E.Head \nHead \nBioList\u003C\u0027a\u003E.Length \nLength \nBioList\u003C\u0027a\u003E.Tail \nTail \nBioList\u003C\u0027a\u003E.IsEmpty \nIsEmpty \nBioList\u003C\u0027a\u003E.Item \nItem \nBioList\u003C\u0027a\u003E.Empty \nEmpty","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist-biolist-1.html#Head","title":"BioList\u003C\u0027a\u003E.Head","content":"BioList\u003C\u0027a\u003E.Head \nHead \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist-biolist-1.html#Length","title":"BioList\u003C\u0027a\u003E.Length","content":"BioList\u003C\u0027a\u003E.Length \nLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist-biolist-1.html#Tail","title":"BioList\u003C\u0027a\u003E.Tail","content":"BioList\u003C\u0027a\u003E.Tail \nTail \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist-biolist-1.html#IsEmpty","title":"BioList\u003C\u0027a\u003E.IsEmpty","content":"BioList\u003C\u0027a\u003E.IsEmpty \nIsEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist-biolist-1.html#Item","title":"BioList\u003C\u0027a\u003E.Item","content":"BioList\u003C\u0027a\u003E.Item \nItem \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-biolist-biolist-1.html#Empty","title":"BioList\u003C\u0027a\u003E.Empty","content":"BioList\u003C\u0027a\u003E.Empty \nEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html","title":"BioSeq","content":"BioSeq \nThis module contains the BioSeq type and its according functions. The BioSeq type is a sequence of objects using the IBioItem interface \nBioSeq.BioSeq\u003C\u0027a\u003E \nBioSeq\u003C\u0027a\u003E \nBioSeq.ofAminoAcidStringWithOptionConverter \nofAminoAcidStringWithOptionConverter \nBioSeq.ofAminoAcidString \nofAminoAcidString \nBioSeq.ofAminoAcidSymbolString \nofAminoAcidSymbolString \nBioSeq.ofNucleotideStringWithOptionConverter \nofNucleotideStringWithOptionConverter \nBioSeq.ofNucleotideString \nofNucleotideString \nBioSeq.mapInTriplets \nmapInTriplets \nBioSeq.reverse \nreverse \nBioSeq.complement \ncomplement \nBioSeq.reverseComplement \nreverseComplement \nBioSeq.transcribeCodingStrand \ntranscribeCodingStrand \nBioSeq.transcribeTemplateStrand \ntranscribeTemplateStrand \nBioSeq.translate \ntranslate \nBioSeq.isEqual \nisEqual \nBioSeq.toString \ntoString \nBioSeq.toFormula \ntoFormula \nBioSeq.toMonoisotopicMass \ntoMonoisotopicMass \nBioSeq.toAverageMass \ntoAverageMass \nBioSeq.toMonoisotopicMassWith \ntoMonoisotopicMassWith \nBioSeq.toAverageMassWith \ntoAverageMassWith \nBioSeq.initMonoisoMass \ninitMonoisoMass \nBioSeq.initAverageMass \ninitAverageMass \nBioSeq.initMonoisoMassWith \ninitMonoisoMassWith \nBioSeq.initAverageMassWith \ninitAverageMassWith \nBioSeq.toCompositionVector \ntoCompositionVector","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#ofAminoAcidStringWithOptionConverter","title":"BioSeq.ofAminoAcidStringWithOptionConverter","content":"BioSeq.ofAminoAcidStringWithOptionConverter \nofAminoAcidStringWithOptionConverter \n Generates AminoAcid sequence of one-letter-code string using given OptionConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#ofAminoAcidString","title":"BioSeq.ofAminoAcidString","content":"BioSeq.ofAminoAcidString \nofAminoAcidString \n Generates AminoAcid sequence of one-letter-code raw string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#ofAminoAcidSymbolString","title":"BioSeq.ofAminoAcidSymbolString","content":"BioSeq.ofAminoAcidSymbolString \nofAminoAcidSymbolString \n Generates AminoAcidSymbol sequence of one-letter-code raw string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#ofNucleotideStringWithOptionConverter","title":"BioSeq.ofNucleotideStringWithOptionConverter","content":"BioSeq.ofNucleotideStringWithOptionConverter \nofNucleotideStringWithOptionConverter \n Generates nucleotide sequence of one-letter-code string using given OptionConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#ofNucleotideString","title":"BioSeq.ofNucleotideString","content":"BioSeq.ofNucleotideString \nofNucleotideString \n Generates nucleotide sequence of one-letter-code raw string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#mapInTriplets","title":"BioSeq.mapInTriplets","content":"BioSeq.mapInTriplets \nmapInTriplets \n Builts a new collection whose elements are the result of applying\n the given function to each triplet of the collection.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#reverse","title":"BioSeq.reverse","content":"BioSeq.reverse \nreverse \n Create the reverse DNA or RNA strand. For example, the sequence \u0022ATGC\u0022 is converted to \u0022CGTA\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#complement","title":"BioSeq.complement","content":"BioSeq.complement \ncomplement \n Create the complement DNA or cDNA (from RNA) strand. For example, the sequence \u0022ATGC\u0022 is converted to \u0022TACG\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#reverseComplement","title":"BioSeq.reverseComplement","content":"BioSeq.reverseComplement \nreverseComplement \n Create the reverse complement strand meaning antiparallel DNA strand or the cDNA (from RNA) respectivly. For example, the sequence \u0022ATGC\u0022 is converted to \u0022GCAT\u0022. \u0022Antiparallel\u0022 combines the two functions \u0022Complement\u0022 and \u0022Inverse\u0022.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#transcribeCodingStrand","title":"BioSeq.transcribeCodingStrand","content":"BioSeq.transcribeCodingStrand \ntranscribeCodingStrand \n Transcribe a given DNA coding strand (5\u0027-----3\u0027)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#transcribeTemplateStrand","title":"BioSeq.transcribeTemplateStrand","content":"BioSeq.transcribeTemplateStrand \ntranscribeTemplateStrand \n Transcribe a given DNA template strand (3\u0027-----5\u0027)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#translate","title":"BioSeq.translate","content":"BioSeq.translate \ntranslate \n translates nucleotide sequence to aminoacid sequence    ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#isEqual","title":"BioSeq.isEqual","content":"BioSeq.isEqual \nisEqual \n Compares the elemens of two sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#toString","title":"BioSeq.toString","content":"BioSeq.toString \ntoString \n Returns string of one-letter-code","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#toFormula","title":"BioSeq.toFormula","content":"BioSeq.toFormula \ntoFormula \n Returns formula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#toMonoisotopicMass","title":"BioSeq.toMonoisotopicMass","content":"BioSeq.toMonoisotopicMass \ntoMonoisotopicMass \n Returns monoisotopic mass of the given sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#toAverageMass","title":"BioSeq.toAverageMass","content":"BioSeq.toAverageMass \ntoAverageMass \n Returns average mass of the given sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#toMonoisotopicMassWith","title":"BioSeq.toMonoisotopicMassWith","content":"BioSeq.toMonoisotopicMassWith \ntoMonoisotopicMassWith \n Returns monoisotopic mass of the given sequence and initial value (e.g. H2O) ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#toAverageMassWith","title":"BioSeq.toAverageMassWith","content":"BioSeq.toAverageMassWith \ntoAverageMassWith \n Returns average mass of the given sequence and initial value (e.g. H2O) ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#initMonoisoMass","title":"BioSeq.initMonoisoMass","content":"BioSeq.initMonoisoMass \ninitMonoisoMass \n Returns a function to calculate the monoisotopic mass of the given sequence !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#initAverageMass","title":"BioSeq.initAverageMass","content":"BioSeq.initAverageMass \ninitAverageMass \n Returns a function to calculate the average mass of the given sequence !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#initMonoisoMassWith","title":"BioSeq.initMonoisoMassWith","content":"BioSeq.initMonoisoMassWith \ninitMonoisoMassWith \n Returns a function to calculate the monoisotopic mass of the given sequence and initial value (e.g. H2O) !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#initAverageMassWith","title":"BioSeq.initAverageMassWith","content":"BioSeq.initAverageMassWith \ninitAverageMassWith \n Returns a function to calculate the average mass of the given sequence and initial value (e.g. H2O) !memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq.html#toCompositionVector","title":"BioSeq.toCompositionVector","content":"BioSeq.toCompositionVector \ntoCompositionVector \nCreates an array with information about the abundacies of the distinct BioItems by converting the symbol of the BioItem to an integer and incrementing the given integer. To decrease the size of the resulting array by still having a fast performance, all indices are shifted by 65. Therefore to call the abundancy of a given BioItem, use \u0022Resultcompositionvector.[(BioItem.symbol bioitem) - 65]\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-bioseq-bioseq-1.html","title":"BioSeq\u003C\u0027a\u003E","content":"BioSeq\u003C\u0027a\u003E \nSequence of objects using the IBioItem interface","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion.html","title":"Digestion","content":"Digestion \nContains types and functions needed to digest amino acid sequences with proteases \nDigestion.BioArray \nBioArray \nDigestion.BioList \nBioList \nDigestion.BioSeq \nBioSeq \nDigestion.CleavageScore \nCleavageScore \nDigestion.Table \nTable \nDigestion.DigestedPeptide\u003C\u0027a\u003E \nDigestedPeptide\u003C\u0027a\u003E \nDigestion.Protease \nProtease \nDigestion.createProtease \ncreateProtease \nDigestion.createDigestedPeptide \ncreateDigestedPeptide \nDigestion.isCuttingSite \nisCuttingSite \nDigestion.isCutingSite \nisCutingSite","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion.html#createProtease","title":"Digestion.createProtease","content":"Digestion.createProtease \ncreateProtease \nCreates a Protease from given name and motifFunction f","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion.html#createDigestedPeptide","title":"Digestion.createDigestedPeptide","content":"Digestion.createDigestedPeptide \ncreateDigestedPeptide \nCreates digested peptide from given information","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion.html#isCuttingSite","title":"Digestion.isCuttingSite","content":"Digestion.isCuttingSite \nisCuttingSite \nReturns true, if AminoAcid array resembles cutting site of given protease, else returns false","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion.html#isCutingSite","title":"Digestion.isCutingSite","content":"Digestion.isCutingSite \nisCutingSite \nReturns true, if AminoAcid array resembles cutting site of given protease, else returns false","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-bioarray.html","title":"BioArray","content":"BioArray \n \nBioArray.motivy \nmotivy \nBioArray.digest \ndigest \nBioArray.concernMissCleavages \nconcernMissCleavages","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-bioarray.html#motivy","title":"BioArray.motivy","content":"BioArray.motivy \nmotivy \n Returns current value,array tuple (current, [|prefix; current; suffix|])","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-bioarray.html#digest","title":"BioArray.digest","content":"BioArray.digest \ndigest \n Takes Proteinsequence as input and returns Array of resulting DigestedPeptides","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-bioarray.html#concernMissCleavages","title":"BioArray.concernMissCleavages","content":"BioArray.concernMissCleavages \nconcernMissCleavages \n Returns Sequence of DigestedPeptides including those resulting of one or more Misscleavage events.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-biolist.html","title":"BioList","content":"BioList \n \nBioList.motivy \nmotivy \nBioList.digest \ndigest \nBioList.concernMissCleavages \nconcernMissCleavages","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-biolist.html#motivy","title":"BioList.motivy","content":"BioList.motivy \nmotivy \n Returns current value,array tuple (current, [|prefix; current; suffix|])","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-biolist.html#digest","title":"BioList.digest","content":"BioList.digest \ndigest \n Returns list of resulting DigestedPeptides","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-biolist.html#concernMissCleavages","title":"BioList.concernMissCleavages","content":"BioList.concernMissCleavages \nconcernMissCleavages \n Returns list of DigestedPeptides including those resulting of one or more Misscleavage events.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-bioseq.html","title":"BioSeq","content":"BioSeq \n \nBioSeq.motivy \nmotivy \nBioSeq.digest \ndigest \nBioSeq.concernMissCleavages \nconcernMissCleavages","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-bioseq.html#motivy","title":"BioSeq.motivy","content":"BioSeq.motivy \nmotivy \n Returns current value,array tuple (current, [|prefix; current; suffix)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-bioseq.html#digest","title":"BioSeq.digest","content":"BioSeq.digest \ndigest \nCuts AminoAcid sequence at each place, where the sequence fits the cutting pattern of the protease. Returns sequence of resulting AminoAcid sequences","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-bioseq.html#concernMissCleavages","title":"BioSeq.concernMissCleavages","content":"BioSeq.concernMissCleavages \nconcernMissCleavages \n Returns Sequence of DigestedPeptides including those resulting of one or more Misscleavage events.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-cleavagescore.html","title":"CleavageScore","content":"CleavageScore \n Get cleaved probability \nCleavageScore.getCleavedP \ngetCleavedP \nCleavageScore.getMissedP \ngetMissedP \nCleavageScore.calculateCleavageScore \ncalculateCleavageScore","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-cleavagescore.html#getCleavedP","title":"CleavageScore.getCleavedP","content":"CleavageScore.getCleavedP \ngetCleavedP \n Get cleaved probability","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-cleavagescore.html#getMissedP","title":"CleavageScore.getMissedP","content":"CleavageScore.getMissedP \ngetMissedP \n Get missed probability","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-cleavagescore.html#calculateCleavageScore","title":"CleavageScore.calculateCleavageScore","content":"CleavageScore.calculateCleavageScore \ncalculateCleavageScore \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-table.html","title":"Table","content":"Table \nContains frequently needed proteases \nTable.Trypsin \nTrypsin \nTable.Lys_C \nLys_C \nTable.getProteaseBy \ngetProteaseBy","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-table.html#Trypsin","title":"Table.Trypsin","content":"Table.Trypsin \nTrypsin \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-table.html#Lys_C","title":"Table.Lys_C","content":"Table.Lys_C \nLys_C \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-table.html#getProteaseBy","title":"Table.getProteaseBy","content":"Table.getProteaseBy \ngetProteaseBy \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-digestedpeptide-1.html","title":"DigestedPeptide\u003C\u0027a\u003E","content":"DigestedPeptide\u003C\u0027a\u003E \n Digested peptide \nDigestedPeptide\u003C\u0027a\u003E.ProteinID \nProteinID \nDigestedPeptide\u003C\u0027a\u003E.MissCleavages \nMissCleavages \nDigestedPeptide\u003C\u0027a\u003E.CleavageStart \nCleavageStart \nDigestedPeptide\u003C\u0027a\u003E.CleavageEnd \nCleavageEnd \nDigestedPeptide\u003C\u0027a\u003E.PepSequence \nPepSequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-digestedpeptide-1.html#ProteinID","title":"DigestedPeptide\u003C\u0027a\u003E.ProteinID","content":"DigestedPeptide\u003C\u0027a\u003E.ProteinID \nProteinID \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-digestedpeptide-1.html#MissCleavages","title":"DigestedPeptide\u003C\u0027a\u003E.MissCleavages","content":"DigestedPeptide\u003C\u0027a\u003E.MissCleavages \nMissCleavages \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-digestedpeptide-1.html#CleavageStart","title":"DigestedPeptide\u003C\u0027a\u003E.CleavageStart","content":"DigestedPeptide\u003C\u0027a\u003E.CleavageStart \nCleavageStart \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-digestedpeptide-1.html#CleavageEnd","title":"DigestedPeptide\u003C\u0027a\u003E.CleavageEnd","content":"DigestedPeptide\u003C\u0027a\u003E.CleavageEnd \nCleavageEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-digestedpeptide-1.html#PepSequence","title":"DigestedPeptide\u003C\u0027a\u003E.PepSequence","content":"DigestedPeptide\u003C\u0027a\u003E.PepSequence \nPepSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-protease.html","title":"Protease","content":"Protease \n p4 p3 p2 p1 || p1\u0027 p2\u0027 \nProtease.Name \nName \nProtease.Expression \nExpression","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-protease.html#Name","title":"Protease.Name","content":"Protease.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-digestion-protease.html#Expression","title":"Protease.Expression","content":"Protease.Expression \nExpression \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html","title":"Elements","content":"Elements \nContains chemical elements represented as a mixture of their stable isotopes and functionality for building them \nElements.Table \nTable \nElements.DiIsotopic \nDiIsotopic \nElements.Element \nElement \nElements.MonoIsotopic \nMonoIsotopic \nElements.MultiIsotopic \nMultiIsotopic \nElements.TriIsotopic \nTriIsotopic \nElements.createMono \ncreateMono \nElements.createDi \ncreateDi \nElements.createTri \ncreateTri \nElements.createMulti \ncreateMulti \nElements.getMainIsotope \ngetMainIsotope \nElements.getMainXComp \ngetMainXComp \nElements.getSinglePhiL \ngetSinglePhiL \nElements.getSinglePhiM \ngetSinglePhiM \nElements.getAtomicSymbol \ngetAtomicSymbol","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html#createMono","title":"Elements.createMono","content":"Elements.createMono \ncreateMono \n Create a mono-isotopic element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html#createDi","title":"Elements.createDi","content":"Elements.createDi \ncreateDi \n Create a di-isotopic element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html#createTri","title":"Elements.createTri","content":"Elements.createTri \ncreateTri \n Create a three-isotopic element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html#createMulti","title":"Elements.createMulti","content":"Elements.createMulti \ncreateMulti \n Create a multi-isotopic element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html#getMainIsotope","title":"Elements.getMainIsotope","content":"Elements.getMainIsotope \ngetMainIsotope \n Returns the main isotop of an Element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html#getMainXComp","title":"Elements.getMainXComp","content":"Elements.getMainXComp \ngetMainXComp \n Returns the main isotop of an Element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html#getSinglePhiL","title":"Elements.getSinglePhiL","content":"Elements.getSinglePhiL \ngetSinglePhiL \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html#getSinglePhiM","title":"Elements.getSinglePhiM","content":"Elements.getSinglePhiM \ngetSinglePhiM \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements.html#getAtomicSymbol","title":"Elements.getAtomicSymbol","content":"Elements.getAtomicSymbol \ngetAtomicSymbol \nReturns the atomic symbol of the given element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html","title":"Table","content":"Table \nContains the biologically relevant, chemical elements represented as a mixture of their stable isotopes \nTable.Heavy \nHeavy \nTable.H \nH \nTable.C \nC \nTable.N \nN \nTable.O \nO \nTable.Na \nNa \nTable.Mg \nMg \nTable.P \nP \nTable.S \nS \nTable.K \nK \nTable.Cu \nCu \nTable.Se \nSe \nTable.Zn \nZn \nTable.ofSymbol \nofSymbol","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#H","title":"Table.H","content":"Table.H \nH \nHydrogen","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#C","title":"Table.C","content":"Table.C \nC \nCarbon","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#N","title":"Table.N","content":"Table.N \nN \nNitrogen","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#O","title":"Table.O","content":"Table.O \nO \nOxygen","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#Na","title":"Table.Na","content":"Table.Na \nNa \nSodium","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#Mg","title":"Table.Mg","content":"Table.Mg \nMg \nMagnesium","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#P","title":"Table.P","content":"Table.P \nP \nPhosphorus","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#S","title":"Table.S","content":"Table.S \nS \nSulfur","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#K","title":"Table.K","content":"Table.K \nK \nPotassium","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#Cu","title":"Table.Cu","content":"Table.Cu \nCu \nCopper","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#Se","title":"Table.Se","content":"Table.Se \nSe \nSelenium  -Attention! Se is Multi-","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#Zn","title":"Table.Zn","content":"Table.Zn \nZn \nZinc","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table.html#ofSymbol","title":"Table.ofSymbol","content":"Table.ofSymbol \nofSymbol \n Maps the given symbol to an Element. Will fail if the symbol does not map to an element implemented. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table-heavy.html","title":"Heavy","content":"Heavy \nContains elements with higher proportions of their heavy isotopes \nHeavy.N15 \nN15 \nHeavy.N15full \nN15full","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table-heavy.html#N15","title":"Heavy.N15","content":"Heavy.N15 \nN15 \nDiisotopic representation of nitrogen with abundancy of N14 and N15 swapped","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-table-heavy.html#N15full","title":"Heavy.N15full","content":"Heavy.N15full \nN15full \nMonoisotopic representation of pure N15","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-diisotopic.html","title":"DiIsotopic","content":"DiIsotopic \n Di-isotopic elements consist of two isotopes \nDiIsotopic.Symbol \nSymbol \nDiIsotopic.X \nX \nDiIsotopic.Xcomp \nXcomp \nDiIsotopic.X1 \nX1 \nDiIsotopic.X1comp \nX1comp \nDiIsotopic.Root \nRoot","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-diisotopic.html#Symbol","title":"DiIsotopic.Symbol","content":"DiIsotopic.Symbol \nSymbol \nSymbol of element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-diisotopic.html#X","title":"DiIsotopic.X","content":"DiIsotopic.X \nX \nFirst isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-diisotopic.html#Xcomp","title":"DiIsotopic.Xcomp","content":"DiIsotopic.Xcomp \nXcomp \nRelative abundancy of first isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-diisotopic.html#X1","title":"DiIsotopic.X1","content":"DiIsotopic.X1 \nX1 \nSecond isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-diisotopic.html#X1comp","title":"DiIsotopic.X1comp","content":"DiIsotopic.X1comp \nX1comp \nRelative abundancy of second isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-diisotopic.html#Root","title":"DiIsotopic.Root","content":"DiIsotopic.Root \nRoot \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-element.html","title":"Element","content":"Element \n Discriminant union type of Mono-,Di-,Tri- and Multi-isotopic elements    \nElement.Mono \nMono \nElement.Di \nDi \nElement.Tri \nTri \nElement.Multi \nMulti","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-element.html#Mono","title":"Element.Mono","content":"Element.Mono \nMono \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-element.html#Di","title":"Element.Di","content":"Element.Di \nDi \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-element.html#Tri","title":"Element.Tri","content":"Element.Tri \nTri \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-element.html#Multi","title":"Element.Multi","content":"Element.Multi \nMulti \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-monoisotopic.html","title":"MonoIsotopic","content":"MonoIsotopic \n Mono-isotopic elements consist of one isotope \nMonoIsotopic.Symbol \nSymbol \nMonoIsotopic.X \nX \nMonoIsotopic.Xcomp \nXcomp \nMonoIsotopic.Root \nRoot","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-monoisotopic.html#Symbol","title":"MonoIsotopic.Symbol","content":"MonoIsotopic.Symbol \nSymbol \nSymbol of Element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-monoisotopic.html#X","title":"MonoIsotopic.X","content":"MonoIsotopic.X \nX \nIsotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-monoisotopic.html#Xcomp","title":"MonoIsotopic.Xcomp","content":"MonoIsotopic.Xcomp \nXcomp \nRelative abundancy of isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-monoisotopic.html#Root","title":"MonoIsotopic.Root","content":"MonoIsotopic.Root \nRoot \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-multiisotopic.html","title":"MultiIsotopic","content":"MultiIsotopic \n Multi-isotopic elements consist of more than three isotopes \nMultiIsotopic.Symbol \nSymbol \nMultiIsotopic.X \nX \nMultiIsotopic.Xcomp \nXcomp \nMultiIsotopic.X1 \nX1 \nMultiIsotopic.X1comp \nX1comp \nMultiIsotopic.X2 \nX2 \nMultiIsotopic.X2comp \nX2comp \nMultiIsotopic.XL \nXL","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-multiisotopic.html#Symbol","title":"MultiIsotopic.Symbol","content":"MultiIsotopic.Symbol \nSymbol \nSymbol of element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-multiisotopic.html#X","title":"MultiIsotopic.X","content":"MultiIsotopic.X \nX \nFirst isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-multiisotopic.html#Xcomp","title":"MultiIsotopic.Xcomp","content":"MultiIsotopic.Xcomp \nXcomp \nRelative abundancy of first isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-multiisotopic.html#X1","title":"MultiIsotopic.X1","content":"MultiIsotopic.X1 \nX1 \nSecond isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-multiisotopic.html#X1comp","title":"MultiIsotopic.X1comp","content":"MultiIsotopic.X1comp \nX1comp \nRelative abundancy of first isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-multiisotopic.html#X2","title":"MultiIsotopic.X2","content":"MultiIsotopic.X2 \nX2 \nThird isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-multiisotopic.html#X2comp","title":"MultiIsotopic.X2comp","content":"MultiIsotopic.X2comp \nX2comp \nRelative abundancy of first isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-multiisotopic.html#XL","title":"MultiIsotopic.XL","content":"MultiIsotopic.XL \nXL \nOther isotopes of element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-triisotopic.html","title":"TriIsotopic","content":"TriIsotopic \n Tri-isotopic elements consist of three isotopes \nTriIsotopic.Symbol \nSymbol \nTriIsotopic.X \nX \nTriIsotopic.Xcomp \nXcomp \nTriIsotopic.X1 \nX1 \nTriIsotopic.X1comp \nX1comp \nTriIsotopic.X2 \nX2 \nTriIsotopic.X2comp \nX2comp \nTriIsotopic.Root \nRoot","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-triisotopic.html#Symbol","title":"TriIsotopic.Symbol","content":"TriIsotopic.Symbol \nSymbol \nSymbol of element","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-triisotopic.html#X","title":"TriIsotopic.X","content":"TriIsotopic.X \nX \nFirst isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-triisotopic.html#Xcomp","title":"TriIsotopic.Xcomp","content":"TriIsotopic.Xcomp \nXcomp \nRelative abundancy of first isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-triisotopic.html#X1","title":"TriIsotopic.X1","content":"TriIsotopic.X1 \nX1 \nSecond isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-triisotopic.html#X1comp","title":"TriIsotopic.X1comp","content":"TriIsotopic.X1comp \nX1comp \nRelative abundancy of second isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-triisotopic.html#X2","title":"TriIsotopic.X2","content":"TriIsotopic.X2 \nX2 \nThird isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-triisotopic.html#X2comp","title":"TriIsotopic.X2comp","content":"TriIsotopic.X2comp \nX2comp \nRelative abundancy of third isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-elements-triisotopic.html#Root","title":"TriIsotopic.Root","content":"TriIsotopic.Root \nRoot \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html","title":"Formula","content":"Formula \nContains functionality for working with molecules as a formula of their elements and formulas of biologically relevant molecules \nFormula.Table \nTable \nFormula.Formula \nFormula \nFormula.emptyFormula \nemptyFormula \nFormula.toString \ntoString \nFormula.add \nadd \nFormula.substract \nsubstract \nFormula.averageMass \naverageMass \nFormula.monoisoMass \nmonoisoMass \nFormula.replaceElement \nreplaceElement \nFormula.replaceNumberOfElement \nreplaceNumberOfElement \nFormula.contains \ncontains \nFormula.count \ncount \nFormula.countBySym \ncountBySym \nFormula.parseFormulaString \nparseFormulaString","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#emptyFormula","title":"Formula.emptyFormula","content":"Formula.emptyFormula \nemptyFormula \n Empty formula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#toString","title":"Formula.toString","content":"Formula.toString \ntoString \n Returns Formula as string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#add","title":"Formula.add","content":"Formula.add \nadd \n adds two formula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#substract","title":"Formula.substract","content":"Formula.substract \nsubstract \n substracts f1 from f2","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#averageMass","title":"Formula.averageMass","content":"Formula.averageMass \naverageMass \n Returns average mass of sum formula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#monoisoMass","title":"Formula.monoisoMass","content":"Formula.monoisoMass \nmonoisoMass \n Returns monoisotopic mass of sum formula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#replaceElement","title":"Formula.replaceElement","content":"Formula.replaceElement \nreplaceElement \n Lables all elements of a certain kind within a formula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#replaceNumberOfElement","title":"Formula.replaceNumberOfElement","content":"Formula.replaceNumberOfElement \nreplaceNumberOfElement \n Lables a given number of elements of a certain kind within a formula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#contains","title":"Formula.contains","content":"Formula.contains \ncontains \nRetruns true if the formula contains the element of interest. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#count","title":"Formula.count","content":"Formula.count \ncount \nReturns the number of occurences of the element of interest.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#countBySym","title":"Formula.countBySym","content":"Formula.countBySym \ncountBySym \nReturns the number of occurences of the element with the given symbolic representation.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula.html#parseFormulaString","title":"Formula.parseFormulaString","content":"Formula.parseFormulaString \nparseFormulaString \n Parse formula string and returns formula type","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html","title":"Table","content":"Table \nContains formulas for amino acids, nucleotides and biologically relevant anorganic molecules \nTable.CO \nCO \nTable.CO2 \nCO2 \nTable.OH \nOH \nTable.H2O \nH2O \nTable.NH \nNH \nTable.NH2 \nNH2 \nTable.NH3 \nNH3 \nTable.Ala \nAla \nTable.Cys \nCys \nTable.Asp \nAsp \nTable.Glu \nGlu \nTable.Phe \nPhe \nTable.Gly \nGly \nTable.His \nHis \nTable.Ile \nIle \nTable.Lys \nLys \nTable.Leu \nLeu \nTable.Met \nMet \nTable.Asn \nAsn \nTable.Pyl \nPyl \nTable.Pro \nPro \nTable.Gln \nGln \nTable.Arg \nArg \nTable.Ser \nSer \nTable.Thr \nThr \nTable.Sel \nSel \nTable.Sec \nSec \nTable.Val \nVal \nTable.Trp \nTrp \nTable.Tyr \nTyr \nTable.Xaa \nXaa \nTable.Xle \nXle \nTable.Glx \nGlx \nTable.Asx \nAsx \nTable.A \nA \nTable.T \nT \nTable.G \nG \nTable.C \nC \nTable.U \nU \nTable.I \nI","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#CO","title":"Table.CO","content":"Table.CO \nCO \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#CO2","title":"Table.CO2","content":"Table.CO2 \nCO2 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#OH","title":"Table.OH","content":"Table.OH \nOH \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#H2O","title":"Table.H2O","content":"Table.H2O \nH2O \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#NH","title":"Table.NH","content":"Table.NH \nNH \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#NH2","title":"Table.NH2","content":"Table.NH2 \nNH2 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#NH3","title":"Table.NH3","content":"Table.NH3 \nNH3 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Ala","title":"Table.Ala","content":"Table.Ala \nAla \nAlanine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Cys","title":"Table.Cys","content":"Table.Cys \nCys \nCysteine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Asp","title":"Table.Asp","content":"Table.Asp \nAsp \nAsparagic Acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Glu","title":"Table.Glu","content":"Table.Glu \nGlu \nGlutamic Acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Phe","title":"Table.Phe","content":"Table.Phe \nPhe \nPhenylalanine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Gly","title":"Table.Gly","content":"Table.Gly \nGly \nGlycine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#His","title":"Table.His","content":"Table.His \nHis \nHistidine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Ile","title":"Table.Ile","content":"Table.Ile \nIle \nIsoleucine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Lys","title":"Table.Lys","content":"Table.Lys \nLys \nLysine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Leu","title":"Table.Leu","content":"Table.Leu \nLeu \nLeucine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Met","title":"Table.Met","content":"Table.Met \nMet \nMethionine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Asn","title":"Table.Asn","content":"Table.Asn \nAsn \nAsparagine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Pyl","title":"Table.Pyl","content":"Table.Pyl \nPyl \nPyrrolysine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Pro","title":"Table.Pro","content":"Table.Pro \nPro \nProline","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Gln","title":"Table.Gln","content":"Table.Gln \nGln \nGLutamine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Arg","title":"Table.Arg","content":"Table.Arg \nArg \nArginine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Ser","title":"Table.Ser","content":"Table.Ser \nSer \nSerine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Thr","title":"Table.Thr","content":"Table.Thr \nThr \nThreonine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Sel","title":"Table.Sel","content":"Table.Sel \nSel \nSelenocysteine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Sec","title":"Table.Sec","content":"Table.Sec \nSec \nSelenocysteine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Val","title":"Table.Val","content":"Table.Val \nVal \nValine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Trp","title":"Table.Trp","content":"Table.Trp \nTrp \nTryptophane","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Tyr","title":"Table.Tyr","content":"Table.Tyr \nTyr \nTyrosine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Xaa","title":"Table.Xaa","content":"Table.Xaa \nXaa \nAmbiguity: Unknown amino acid                                        ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Xle","title":"Table.Xle","content":"Table.Xle \nXle \nAmbiguity: Leucine or Isoleucine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Glx","title":"Table.Glx","content":"Table.Glx \nGlx \nAmbiguity: Glutamine or Glutamic Acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#Asx","title":"Table.Asx","content":"Table.Asx \nAsx \nAmbiguity: Asparagine or Asparagic Acid","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#A","title":"Table.A","content":"Table.A \nA \n A : Adenine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#T","title":"Table.T","content":"Table.T \nT \n T : Thymidine (only DNA)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#G","title":"Table.G","content":"Table.G \nG \n G : Guanine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#C","title":"Table.C","content":"Table.C \nC \n C : Cytosine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#U","title":"Table.U","content":"Table.U \nU \n U : Uracil    (only RNA)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-table.html#I","title":"Table.I","content":"Table.I \nI \n I : Inosine   (only RNA)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-formula.html","title":"Formula","content":"Formula \n Type abreviation for Map\u003CElements.Element,float\u003E \nFormula.Count \nCount \nFormula.IsEmpty \nIsEmpty \nFormula.Item \nItem \nFormula.Values \nValues \nFormula.Keys \nKeys","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-formula.html#Count","title":"Formula.Count","content":"Formula.Count \nCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-formula.html#IsEmpty","title":"Formula.IsEmpty","content":"Formula.IsEmpty \nIsEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-formula.html#Item","title":"Formula.Item","content":"Formula.Item \nItem \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-formula.html#Values","title":"Formula.Values","content":"Formula.Values \nValues \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-formula-formula.html#Keys","title":"Formula.Keys","content":"Formula.Keys \nKeys \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-globalmodificationinfo.html","title":"GlobalModificationInfo","content":"GlobalModificationInfo \n \nGlobalModificationInfo.GlobalAAModificator \nGlobalAAModificator \nGlobalModificationInfo.GlobalModModificator \nGlobalModModificator \nGlobalModificationInfo.initGlobalModificationDeltaOfAA \ninitGlobalModificationDeltaOfAA \nGlobalModificationInfo.initGlobalModificationDeltaOfMod \ninitGlobalModificationDeltaOfMod","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-globalmodificationinfo.html#initGlobalModificationDeltaOfAA","title":"GlobalModificationInfo.initGlobalModificationDeltaOfAA","content":"GlobalModificationInfo.initGlobalModificationDeltaOfAA \ninitGlobalModificationDeltaOfAA \n Returns a function that calculates the difference between the unmodified and the isotopically modified version of a given amino acid.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-globalmodificationinfo.html#initGlobalModificationDeltaOfMod","title":"GlobalModificationInfo.initGlobalModificationDeltaOfMod","content":"GlobalModificationInfo.initGlobalModificationDeltaOfMod \ninitGlobalModificationDeltaOfMod \n Returns a function that calculates the difference between the unmodified and the isotopically modified version of a given modification","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-globalmodificationinfo-globalaamodificator.html","title":"GlobalAAModificator","content":"GlobalAAModificator \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-globalmodificationinfo-globalmodmodificator.html","title":"GlobalModModificator","content":"GlobalModModificator \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isoelectricpoint.html","title":"IsoelectricPoint","content":"IsoelectricPoint \nFinding the isoelectric point of peptides \nIsoelectricPoint.getpKr \ngetpKr \nIsoelectricPoint.tryFind \ntryFind","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isoelectricpoint.html#getpKr","title":"IsoelectricPoint.getpKr","content":"IsoelectricPoint.getpKr \ngetpKr \nMaps AminoAcidSymbol to default pK value of it\u0027s sidechain. Returns 0.0 if sidechain is neither acidic nor basic","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isoelectricpoint.html#tryFind","title":"IsoelectricPoint.tryFind","content":"IsoelectricPoint.tryFind \ntryFind \nFinds the pH for which the global charge of the aaSeq is closer to 0 than the given accuracy.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes.html","title":"Isotopes","content":"Isotopes \nContains functionality for working with and creating isotopes and list of biologically relevant isotopes \nIsotopes.Table \nTable \nIsotopes.Isotope \nIsotope \nIsotopes.create \ncreate","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes.html#create","title":"Isotopes.create","content":"Isotopes.create \ncreate \nCreates an isotope out of the given information about the isotope","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html","title":"Table","content":"Table \nContains the stable isotopes of biologically relevant chemical elements.\n\nNote that the name convention of isotopes e.g. 15N cannot be satisfied here, \nas name bindings starting with numbers are not allowed. \n\nTherefore, numbers and element symbols are switched, e.g. 15N becoming N15 \nTable.H1 \nH1 \nTable.H2 \nH2 \nTable.H3 \nH3 \nTable.C12 \nC12 \nTable.C13 \nC13 \nTable.C14 \nC14 \nTable.N14 \nN14 \nTable.N15 \nN15 \nTable.O16 \nO16 \nTable.O17 \nO17 \nTable.O18 \nO18 \nTable.Na23 \nNa23 \nTable.Mg24 \nMg24 \nTable.Mg25 \nMg25 \nTable.Mg26 \nMg26 \nTable.P31 \nP31 \nTable.S32 \nS32 \nTable.S33 \nS33 \nTable.S34 \nS34 \nTable.S36 \nS36 \nTable.K39 \nK39 \nTable.K40 \nK40 \nTable.K41 \nK41 \nTable.Ca40 \nCa40 \nTable.Ca42 \nCa42 \nTable.Ca43 \nCa43 \nTable.Ca44 \nCa44 \nTable.Ca46 \nCa46 \nTable.Ca48 \nCa48 \nTable.Fe54 \nFe54 \nTable.Fe56 \nFe56 \nTable.Fe57 \nFe57 \nTable.Fe58 \nFe58 \nTable.Cu63 \nCu63 \nTable.Cu65 \nCu65 \nTable.Zn64 \nZn64 \nTable.Zn66 \nZn66 \nTable.Zn67 \nZn67 \nTable.Zn68 \nZn68 \nTable.Zn70 \nZn70 \nTable.Se74 \nSe74 \nTable.Se76 \nSe76 \nTable.Se77 \nSe77 \nTable.Se78 \nSe78 \nTable.Se80 \nSe80 \nTable.Se82 \nSe82","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#H1","title":"Table.H1","content":"Table.H1 \nH1 \nHydrogen whose nucleus consist of 1 proton","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#H2","title":"Table.H2","content":"Table.H2 \nH2 \nHydrogen whose nucleus consist of 1 proton and 1 neutron","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#H3","title":"Table.H3","content":"Table.H3 \nH3 \nHydrogen whose nucleus consist of 1 proton and 2 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#C12","title":"Table.C12","content":"Table.C12 \nC12 \nCarbon whose nucleus consist of 6 protons and 6 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#C13","title":"Table.C13","content":"Table.C13 \nC13 \nCarbon whose nucleus consist of 6 protons and 7 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#C14","title":"Table.C14","content":"Table.C14 \nC14 \nCarbon whose nucleus consist of 6 protons and 8 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#N14","title":"Table.N14","content":"Table.N14 \nN14 \nNitrogen whose nucleus consist of 7 protons and 7 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#N15","title":"Table.N15","content":"Table.N15 \nN15 \nNitrogen whose nucleus consist of 7 protons and 8 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#O16","title":"Table.O16","content":"Table.O16 \nO16 \nOxygen whose nucleus consist of 8 protons and 8 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#O17","title":"Table.O17","content":"Table.O17 \nO17 \nOxygen whose nucleus consist of 8 protons and 9 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#O18","title":"Table.O18","content":"Table.O18 \nO18 \nOxygen whose nucleus consist of 8 protons and 10 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Na23","title":"Table.Na23","content":"Table.Na23 \nNa23 \nSodium whose nucleus consist of 11 protons and 12 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Mg24","title":"Table.Mg24","content":"Table.Mg24 \nMg24 \nMagnesium whose nucleus consist of 12 proton and 12 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Mg25","title":"Table.Mg25","content":"Table.Mg25 \nMg25 \nMagnesium whose nucleus consist of 12 proton and 13 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Mg26","title":"Table.Mg26","content":"Table.Mg26 \nMg26 \nMagnesium whose nucleus consist of 12 proton and 14 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#P31","title":"Table.P31","content":"Table.P31 \nP31 \nPhopsphorus whose nucleus consist of 15 proton and 16 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#S32","title":"Table.S32","content":"Table.S32 \nS32 \nSulfur whose nucleus consist of 16 protons and 16 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#S33","title":"Table.S33","content":"Table.S33 \nS33 \nSulfur whose nucleus consist of 16 protons and 17 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#S34","title":"Table.S34","content":"Table.S34 \nS34 \nSulfur whose nucleus consist of 16 protons and 18 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#S36","title":"Table.S36","content":"Table.S36 \nS36 \nSulfur whose nucleus consist of 16 protons and 20 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#K39","title":"Table.K39","content":"Table.K39 \nK39 \nPotassium whose nucleus consist of 19 protons and 0 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#K40","title":"Table.K40","content":"Table.K40 \nK40 \nPotassium whose nucleus consist of 19 protons and 21 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#K41","title":"Table.K41","content":"Table.K41 \nK41 \nPotassium whose nucleus consist of 19 protons and 22 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Ca40","title":"Table.Ca40","content":"Table.Ca40 \nCa40 \nCalcium whose nucleus consist of 20 protons and 20 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Ca42","title":"Table.Ca42","content":"Table.Ca42 \nCa42 \nCalcium whose nucleus consist of 20 protons and 22 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Ca43","title":"Table.Ca43","content":"Table.Ca43 \nCa43 \nCalcium whose nucleus consist of 20 protons and 23 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Ca44","title":"Table.Ca44","content":"Table.Ca44 \nCa44 \nCalcium whose nucleus consist of 20 protons and 24 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Ca46","title":"Table.Ca46","content":"Table.Ca46 \nCa46 \nCalcium whose nucleus consist of 20 protons and 26 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Ca48","title":"Table.Ca48","content":"Table.Ca48 \nCa48 \nCalcium whose nucleus consist of 20 protons and 28 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Fe54","title":"Table.Fe54","content":"Table.Fe54 \nFe54 \nIron whose nucleus consist of 26 protons and 28 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Fe56","title":"Table.Fe56","content":"Table.Fe56 \nFe56 \nIron whose nucleus consist of 26 protons and 30 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Fe57","title":"Table.Fe57","content":"Table.Fe57 \nFe57 \nIron whose nucleus consist of 26 protons and 31 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Fe58","title":"Table.Fe58","content":"Table.Fe58 \nFe58 \nIron whose nucleus consist of 26 protons and 32 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Cu63","title":"Table.Cu63","content":"Table.Cu63 \nCu63 \nCopper whose nucleus consist of 29 protons and 34 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Cu65","title":"Table.Cu65","content":"Table.Cu65 \nCu65 \nCopper whose nucleus consist of 29 protons and 36 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Zn64","title":"Table.Zn64","content":"Table.Zn64 \nZn64 \nZinc whose nucleus consist of 30 protons and 34 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Zn66","title":"Table.Zn66","content":"Table.Zn66 \nZn66 \nZinc whose nucleus consist of 30 protons and 36 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Zn67","title":"Table.Zn67","content":"Table.Zn67 \nZn67 \nZinc whose nucleus consist of 30 protons and 37 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Zn68","title":"Table.Zn68","content":"Table.Zn68 \nZn68 \nZinc whose nucleus consist of 30 protons and 38 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Zn70","title":"Table.Zn70","content":"Table.Zn70 \nZn70 \nZinc whose nucleus consist of 30 protons and 40 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Se74","title":"Table.Se74","content":"Table.Se74 \nSe74 \nSelenium whose nucleus consist of 34 protons and 40 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Se76","title":"Table.Se76","content":"Table.Se76 \nSe76 \nSelenium whose nucleus consist of 34 protons and 42 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Se77","title":"Table.Se77","content":"Table.Se77 \nSe77 \nSelenium whose nucleus consist of 34 protons and 43 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Se78","title":"Table.Se78","content":"Table.Se78 \nSe78 \nSelenium whose nucleus consist of 34 protons and 44 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Se80","title":"Table.Se80","content":"Table.Se80 \nSe80 \nSelenium whose nucleus consist of 34 protons and 46 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-table.html#Se82","title":"Table.Se82","content":"Table.Se82 \nSe82 \nSelenium whose nucleus consist of 34 protons and 48 neutrons","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-isotope.html","title":"Isotope","content":"Isotope \nRepresentation of Isotopes \nIsotope.AtomicSymbol \nAtomicSymbol \nIsotope.AtomicNumberZ \nAtomicNumberZ \nIsotope.MassNumber \nMassNumber \nIsotope.Mass \nMass \nIsotope.NatAbundance \nNatAbundance \nIsotope.RelAtomicMass \nRelAtomicMass","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-isotope.html#AtomicSymbol","title":"Isotope.AtomicSymbol","content":"Isotope.AtomicSymbol \nAtomicSymbol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-isotope.html#AtomicNumberZ","title":"Isotope.AtomicNumberZ","content":"Isotope.AtomicNumberZ \nAtomicNumberZ \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-isotope.html#MassNumber","title":"Isotope.MassNumber","content":"Isotope.MassNumber \nMassNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-isotope.html#Mass","title":"Isotope.Mass","content":"Isotope.Mass \nMass \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-isotope.html#NatAbundance","title":"Isotope.NatAbundance","content":"Isotope.NatAbundance \nNatAbundance \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopes-isotope.html#RelAtomicMass","title":"Isotope.RelAtomicMass","content":"Isotope.RelAtomicMass \nRelAtomicMass \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution.html","title":"IsotopicDistribution","content":"IsotopicDistribution \nContains functionality for working with isotopic abundancies of molecules \nIsotopicDistribution.BRAIN \nBRAIN \nIsotopicDistribution.MIDA \nMIDA","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution-brain.html","title":"BRAIN","content":"BRAIN \n \nBRAIN.ofFormula \nofFormula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution-brain.html#ofFormula","title":"BRAIN.ofFormula","content":"BRAIN.ofFormula \nofFormula \n Generates the distribution of the isotopic abundancy\n The predicted distribution is only valid for Elements with isotopes at natural abundance","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution-mida.html","title":"MIDA","content":"MIDA \n \nMIDA.Polynomial \nPolynomial \nMIDA.normalizeByProbSum \nnormalizeByProbSum \nMIDA.normalizeByMaxProb \nnormalizeByMaxProb \nMIDA.ofFormula \nofFormula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution-mida.html#normalizeByProbSum","title":"MIDA.normalizeByProbSum","content":"MIDA.normalizeByProbSum \nnormalizeByProbSum \n normalizes istopic distribution probabilities to sum up to 1.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution-mida.html#normalizeByMaxProb","title":"MIDA.normalizeByMaxProb","content":"MIDA.normalizeByMaxProb \nnormalizeByMaxProb \n normalizes istopic distribution probabilities to sum up to 1.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution-mida.html#ofFormula","title":"MIDA.ofFormula","content":"MIDA.ofFormula \nofFormula \n Generates the distribution of the isotopic abundancy using MIDAs polynomial based algorithm (MIDAs_a)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution-mida-polynomial.html","title":"Polynomial","content":"Polynomial \n \nPolynomial.Power \nPower \nPolynomial.Probability \nProbability","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution-mida-polynomial.html#Power","title":"Polynomial.Power","content":"Polynomial.Power \nPower \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-isotopicdistribution-mida-polynomial.html#Probability","title":"Polynomial.Probability","content":"Polynomial.Probability \nProbability \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-mass.html","title":"Mass","content":"Mass \nMolecular mass related functions \nMass.Table \nTable \nMass.toMZ \ntoMZ \nMass.ofMZ \nofMZ \nMass.accuracy \naccuracy \nMass.deltaMassByPpm \ndeltaMassByPpm \nMass.rangePpm \nrangePpm","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-mass.html#toMZ","title":"Mass.toMZ","content":"Mass.toMZ \ntoMZ \n\n   Converts mass to m/z\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-mass.html#ofMZ","title":"Mass.ofMZ","content":"Mass.ofMZ \nofMZ \n\n   Converts m/z to neutral mass\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-mass.html#accuracy","title":"Mass.accuracy","content":"Mass.accuracy \naccuracy \n Calculates accuracy in ppm of mass versus (theoretical) reference mass ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-mass.html#deltaMassByPpm","title":"Mass.deltaMassByPpm","content":"Mass.deltaMassByPpm \ndeltaMassByPpm \n Returns delta mass by ppm","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-mass.html#rangePpm","title":"Mass.rangePpm","content":"Mass.rangePpm \nrangePpm \n Returns -/\u002B mass range ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-mass-table.html","title":"Table","content":"Table \nNucleon masses \nTable.PMassInU \nPMassInU \nTable.NMassInU \nNMassInU","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-mass-table.html#PMassInU","title":"Table.PMassInU","content":"Table.PMassInU \nPMassInU \n Proton Mass. Units u ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-mass-table.html#NMassInU","title":"Table.NMassInU","content":"Table.NMassInU \nNMassInU \n Neutron Mass. Units u ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html","title":"ModificationInfo","content":"ModificationInfo \n Functionality for creating formula modifications \nModificationInfo.Table \nTable \nModificationInfo.ModLocation \nModLocation \nModificationInfo.Modification \nModification \nModificationInfo.createModification \ncreateModification \nModificationInfo.createModificationWithAdd \ncreateModificationWithAdd \nModificationInfo.createModificationWithSubstract \ncreateModificationWithSubstract \nModificationInfo.toString \ntoString \nModificationInfo.name \nname \nModificationInfo.symbol \nsymbol \nModificationInfo.formula \nformula \nModificationInfo.isTerminator \nisTerminator \nModificationInfo.isGap \nisGap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html#createModification","title":"ModificationInfo.createModification","content":"ModificationInfo.createModification \ncreateModification \n Create modification, where molecule will be modified by application of given modifier","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html#createModificationWithAdd","title":"ModificationInfo.createModificationWithAdd","content":"ModificationInfo.createModificationWithAdd \ncreateModificationWithAdd \n Create modification, where elements of given formula will be added to molecule","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html#createModificationWithSubstract","title":"ModificationInfo.createModificationWithSubstract","content":"ModificationInfo.createModificationWithSubstract \ncreateModificationWithSubstract \n Create modification, where elements of given formula will be substracted molecule","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html#toString","title":"ModificationInfo.toString","content":"ModificationInfo.toString \ntoString \n Returns modification name as string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html#name","title":"ModificationInfo.name","content":"ModificationInfo.name \nname \n Returns then display name of a modification","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html#symbol","title":"ModificationInfo.symbol","content":"ModificationInfo.symbol \nsymbol \n Returns then symbol of a modification","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html#formula","title":"ModificationInfo.formula","content":"ModificationInfo.formula \nformula \n Returns then byteCode of a modification","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html#isTerminator","title":"ModificationInfo.isTerminator","content":"ModificationInfo.isTerminator \nisTerminator \n Returns true if the modification represents a sequence terminator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo.html#isGap","title":"ModificationInfo.isGap","content":"ModificationInfo.isGap \nisGap \n Returns true if the modification represents a sequence gap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html","title":"Table","content":"Table \nContains frequent modifications \nTable.N15 \nN15 \nTable.N15\u0027 \nN15\u0027 \nTable.N15NH3 \nN15NH3 \nTable.H2O \nH2O \nTable.CO \nCO \nTable.NH3 \nNH3 \nTable.CO_loss \nCO_loss \nTable.NH3_loss \nNH3_loss \nTable.H2O_loss \nH2O_loss","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html#N15","title":"Table.N15","content":"Table.N15 \nN15 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html#N15\u0027","title":"Table.N15\u0027","content":"Table.N15\u0027 \nN15\u0027 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html#N15NH3","title":"Table.N15NH3","content":"Table.N15NH3 \nN15NH3 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html#H2O","title":"Table.H2O","content":"Table.H2O \nH2O \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html#CO","title":"Table.CO","content":"Table.CO \nCO \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html#NH3","title":"Table.NH3","content":"Table.NH3 \nNH3 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html#CO_loss","title":"Table.CO_loss","content":"Table.CO_loss \nCO_loss \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html#NH3_loss","title":"Table.NH3_loss","content":"Table.NH3_loss \nNH3_loss \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-table.html#H2O_loss","title":"Table.H2O_loss","content":"Table.H2O_loss \nH2O_loss \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modlocation.html","title":"ModLocation","content":"ModLocation \n Specifier for location of modification \nModLocation.Residual \nResidual \nModLocation.Cterm \nCterm \nModLocation.Nterm \nNterm \nModLocation.ProteinCterm \nProteinCterm \nModLocation.ProteinNterm \nProteinNterm \nModLocation.Isotopic \nIsotopic","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modlocation.html#Residual","title":"ModLocation.Residual","content":"ModLocation.Residual \nResidual \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modlocation.html#Cterm","title":"ModLocation.Cterm","content":"ModLocation.Cterm \nCterm \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modlocation.html#Nterm","title":"ModLocation.Nterm","content":"ModLocation.Nterm \nNterm \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modlocation.html#ProteinCterm","title":"ModLocation.ProteinCterm","content":"ModLocation.ProteinCterm \nProteinCterm \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modlocation.html#ProteinNterm","title":"ModLocation.ProteinNterm","content":"ModLocation.ProteinNterm \nProteinNterm \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modlocation.html#Isotopic","title":"ModLocation.Isotopic","content":"ModLocation.Isotopic \nIsotopic \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modification.html","title":"Modification","content":"Modification \n Modification consisting of name, location specifier and a formula modifier \nModification.Name \nName \nModification.IsBiological \nIsBiological \nModification.Location \nLocation \nModification.Modify \nModify","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modification.html#Name","title":"Modification.Name","content":"Modification.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modification.html#IsBiological","title":"Modification.IsBiological","content":"Modification.IsBiological \nIsBiological \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modification.html#Location","title":"Modification.Location","content":"Modification.Location \nLocation \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-modificationinfo-modification.html#Modify","title":"Modification.Modify","content":"Modification.Modify \nModify \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html","title":"Nucleotides","content":"Nucleotides \nContains the Nucleotide type and its according functions. \nNucleotides.Nucleotide \nNucleotide \nNucleotides.ParsedNucleotideChar \nParsedNucleotideChar \nNucleotides.charToParsedNucleotideChar \ncharToParsedNucleotideChar \nNucleotides.complement \ncomplement \nNucleotides.replaceTbyU \nreplaceTbyU \nNucleotides.replaceUbyT \nreplaceUbyT \nNucleotides.CodonMap \nCodonMap \nNucleotides.AmbiguousCodonMap \nAmbiguousCodonMap \nNucleotides.lookupBytes \nlookupBytes \nNucleotides.name \nname \nNucleotides.formula \nformula \nNucleotides.symbol \nsymbol \nNucleotides.isTerminator \nisTerminator \nNucleotides.isGap \nisGap \nNucleotides.monoisoMass \nmonoisoMass \nNucleotides.averageMass \naverageMass \nNucleotides.initMonoisoMassWithMemP \ninitMonoisoMassWithMemP \nNucleotides.initAverageMassWithMemP \ninitAverageMassWithMemP","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#charToParsedNucleotideChar","title":"Nucleotides.charToParsedNucleotideChar","content":"Nucleotides.charToParsedNucleotideChar \ncharToParsedNucleotideChar \nSimple Lexer for parsing Nucleotides from chars. The full parser is located in the BioItemsConverter-module","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#complement","title":"Nucleotides.complement","content":"Nucleotides.complement \ncomplement \n Returns the Nucleotide from the complementary strand ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#replaceTbyU","title":"Nucleotides.replaceTbyU","content":"Nucleotides.replaceTbyU \nreplaceTbyU \n Replace thymidine (T) by uracil (U). For example, the sequence \u0022ATUGC\u0022 is converted to \u0022AUUGC\u0022.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#replaceUbyT","title":"Nucleotides.replaceUbyT","content":"Nucleotides.replaceUbyT \nreplaceUbyT \n Replace uracil (U) by thymidine (T). For example, the sequence \u0022ATUGC\u0022 is converted to \u0022ATTGC\u0022.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#CodonMap","title":"Nucleotides.CodonMap","content":"Nucleotides.CodonMap \nCodonMap \n Codon to AminoAcid ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#AmbiguousCodonMap","title":"Nucleotides.AmbiguousCodonMap","content":"Nucleotides.AmbiguousCodonMap \nAmbiguousCodonMap \n Codon to AminoAcid ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#lookupBytes","title":"Nucleotides.lookupBytes","content":"Nucleotides.lookupBytes \nlookupBytes \n\n Lookup an amino acid based on a triplet of nucleotides. U U U for instance\n will result in Phenylalanine.  If the values cannot be\n found in the lookup table, \u003Ccode\u003Efalse\u003C/code\u003E will be returned.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#name","title":"Nucleotides.name","content":"Nucleotides.name \nname \n Returns the name of nucleotide","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#formula","title":"Nucleotides.formula","content":"Nucleotides.formula \nformula \nReturns nucleotide formulas minus H20            ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#symbol","title":"Nucleotides.symbol","content":"Nucleotides.symbol \nsymbol \n Returns the symbol of AminoAcid       ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#isTerminator","title":"Nucleotides.isTerminator","content":"Nucleotides.isTerminator \nisTerminator \n Returns true if nucleotide represents a sequence terminator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#isGap","title":"Nucleotides.isGap","content":"Nucleotides.isGap \nisGap \n Returns true if nucleotide represents a sequence gap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#monoisoMass","title":"Nucleotides.monoisoMass","content":"Nucleotides.monoisoMass \nmonoisoMass \n Returns the monoisotopic mass of nucleotide (without H20)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#averageMass","title":"Nucleotides.averageMass","content":"Nucleotides.averageMass \naverageMass \n Returns the average mass of nucleotide (without H20)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#initMonoisoMassWithMemP","title":"Nucleotides.initMonoisoMassWithMemP","content":"Nucleotides.initMonoisoMassWithMemP \ninitMonoisoMassWithMemP \n Returns a function to calculate the monoisotopic mass of a nucleotide with memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides.html#initAverageMassWithMemP","title":"Nucleotides.initAverageMassWithMemP","content":"Nucleotides.initAverageMassWithMemP \ninitAverageMassWithMemP \n Returns a function to calculate the average mass of a nucleotide with memoization","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html","title":"Nucleotide","content":"Nucleotide \n Nucleotide Codes \nNucleotide.op_Explicit \nop_Explicit \nNucleotide.op_Explicit \nop_Explicit \nNucleotide.A \nA \nNucleotide.T \nT \nNucleotide.G \nG \nNucleotide.C \nC \nNucleotide.U \nU \nNucleotide.I \nI \nNucleotide.Gap \nGap \nNucleotide.Ter \nTer \nNucleotide.R \nR \nNucleotide.Y \nY \nNucleotide.K \nK \nNucleotide.M \nM \nNucleotide.S \nS \nNucleotide.W \nW \nNucleotide.B \nB \nNucleotide.D \nD \nNucleotide.H \nH \nNucleotide.V \nV \nNucleotide.N \nN","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#op_Explicit","title":"Nucleotide.op_Explicit","content":"Nucleotide.op_Explicit \nop_Explicit \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#op_Explicit","title":"Nucleotide.op_Explicit","content":"Nucleotide.op_Explicit \nop_Explicit \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#A","title":"Nucleotide.A","content":"Nucleotide.A \nA \n A : Adenine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#T","title":"Nucleotide.T","content":"Nucleotide.T \nT \n T : Thymidine (only DNA)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#G","title":"Nucleotide.G","content":"Nucleotide.G \nG \n G : Guanine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#C","title":"Nucleotide.C","content":"Nucleotide.C \nC \n C : Cytosine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#U","title":"Nucleotide.U","content":"Nucleotide.U \nU \n U : Uracil    (only RNA)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#I","title":"Nucleotide.I","content":"Nucleotide.I \nI \n I : Inosine   (only RNA)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#Gap","title":"Nucleotide.Gap","content":"Nucleotide.Gap \nGap \n - : Gap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#Ter","title":"Nucleotide.Ter","content":"Nucleotide.Ter \nTer \n * : Terminator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#R","title":"Nucleotide.R","content":"Nucleotide.R \nR \n R : G or A = puRine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#Y","title":"Nucleotide.Y","content":"Nucleotide.Y \nY \n Y : U/T or C = pYrimidine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#K","title":"Nucleotide.K","content":"Nucleotide.K \nK \n K : G or U = Keto","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#M","title":"Nucleotide.M","content":"Nucleotide.M \nM \n M : A or C = aMino","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#S","title":"Nucleotide.S","content":"Nucleotide.S \nS \n S : G or C = Strong base pair","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#W","title":"Nucleotide.W","content":"Nucleotide.W \nW \n W : A or U = Weak base pair ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#B","title":"Nucleotide.B","content":"Nucleotide.B \nB \n B : G or U or C = not A","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#D","title":"Nucleotide.D","content":"Nucleotide.D \nD \n D : G or A or U = not C","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#H","title":"Nucleotide.H","content":"Nucleotide.H \nH \n H : A or C or U = not G","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#V","title":"Nucleotide.V","content":"Nucleotide.V \nV \n V : G or C or A = not T/U","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-nucleotide.html#N","title":"Nucleotide.N","content":"Nucleotide.N \nN \n N : A or G or U or C.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-parsednucleotidechar.html","title":"ParsedNucleotideChar","content":"ParsedNucleotideChar \nLexer tags for parsing Nucleotides \nParsedNucleotideChar.StandardCodes \nStandardCodes \nParsedNucleotideChar.Standard_DNAonly \nStandard_DNAonly \nParsedNucleotideChar.Standard_RNAonly \nStandard_RNAonly \nParsedNucleotideChar.GapTer \nGapTer \nParsedNucleotideChar.AmbiguityCodes \nAmbiguityCodes \nParsedNucleotideChar.NoNucChar \nNoNucChar","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-parsednucleotidechar.html#StandardCodes","title":"ParsedNucleotideChar.StandardCodes","content":"ParsedNucleotideChar.StandardCodes \nStandardCodes \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-parsednucleotidechar.html#Standard_DNAonly","title":"ParsedNucleotideChar.Standard_DNAonly","content":"ParsedNucleotideChar.Standard_DNAonly \nStandard_DNAonly \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-parsednucleotidechar.html#Standard_RNAonly","title":"ParsedNucleotideChar.Standard_RNAonly","content":"ParsedNucleotideChar.Standard_RNAonly \nStandard_RNAonly \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-parsednucleotidechar.html#GapTer","title":"ParsedNucleotideChar.GapTer","content":"ParsedNucleotideChar.GapTer \nGapTer \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-parsednucleotidechar.html#AmbiguityCodes","title":"ParsedNucleotideChar.AmbiguityCodes","content":"ParsedNucleotideChar.AmbiguityCodes \nAmbiguityCodes \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-nucleotides-parsednucleotidechar.html#NoNucChar","title":"ParsedNucleotideChar.NoNucChar","content":"ParsedNucleotideChar.NoNucChar \nNoNucChar \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification.html","title":"PeptideClassification","content":"PeptideClassification \nContains functions to classify peptides based on their specificity when mapped to proteins \nPeptideClassification.PeptideEvidenceClass \nPeptideEvidenceClass \nPeptideClassification.ProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E \nProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E \nPeptideClassification.ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E \nProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E \nPeptideClassification.StrandDirection \nStrandDirection \nPeptideClassification.createProteinModelInfo \ncreateProteinModelInfo \nPeptideClassification.createProteinModel \ncreateProteinModel \nPeptideClassification.createPeptideProteinRelation \ncreatePeptideProteinRelation \nPeptideClassification.createLocusSpliceVariantCount \ncreateLocusSpliceVariantCount \nPeptideClassification.classify \nclassify","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification.html#createProteinModelInfo","title":"PeptideClassification.createProteinModelInfo","content":"PeptideClassification.createProteinModelInfo \ncreateProteinModelInfo \n Helper function to create ProteinModelInfo","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification.html#createProteinModel","title":"PeptideClassification.createProteinModel","content":"PeptideClassification.createProteinModel \ncreateProteinModel \n Helper function","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification.html#createPeptideProteinRelation","title":"PeptideClassification.createPeptideProteinRelation","content":"PeptideClassification.createPeptideProteinRelation \ncreatePeptideProteinRelation \n Creates a lookup data base to assign peptides to the proteins they are contained in","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification.html#createLocusSpliceVariantCount","title":"PeptideClassification.createLocusSpliceVariantCount","content":"PeptideClassification.createLocusSpliceVariantCount \ncreateLocusSpliceVariantCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification.html#classify","title":"PeptideClassification.classify","content":"PeptideClassification.classify \nclassify \nAssigns a PeptideEvidenceClass to the peptide by using the information given through lookup and proteinInfos","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-peptideevidenceclass.html","title":"PeptideEvidenceClass","content":"PeptideEvidenceClass \n A marker for unambiguity of a peptide in protein inference  \nPeptideEvidenceClass.Unknown \nUnknown \nPeptideEvidenceClass.C1a \nC1a \nPeptideEvidenceClass.C1b \nC1b \nPeptideEvidenceClass.C2a \nC2a \nPeptideEvidenceClass.C2b \nC2b \nPeptideEvidenceClass.C3a \nC3a \nPeptideEvidenceClass.C3b \nC3b","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-peptideevidenceclass.html#Unknown","title":"PeptideEvidenceClass.Unknown","content":"PeptideEvidenceClass.Unknown \nUnknown \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-peptideevidenceclass.html#C1a","title":"PeptideEvidenceClass.C1a","content":"PeptideEvidenceClass.C1a \nC1a \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-peptideevidenceclass.html#C1b","title":"PeptideEvidenceClass.C1b","content":"PeptideEvidenceClass.C1b \nC1b \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-peptideevidenceclass.html#C2a","title":"PeptideEvidenceClass.C2a","content":"PeptideEvidenceClass.C2a \nC2a \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-peptideevidenceclass.html#C2b","title":"PeptideEvidenceClass.C2b","content":"PeptideEvidenceClass.C2b \nC2b \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-peptideevidenceclass.html#C3a","title":"PeptideEvidenceClass.C3a","content":"PeptideEvidenceClass.C3a \nC3a \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-peptideevidenceclass.html#C3b","title":"PeptideEvidenceClass.C3b","content":"PeptideEvidenceClass.C3b \nC3b \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodel-4.html","title":"ProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E","content":"ProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E \n Contains protein sequence and information about protein used to deduce its relation to other proteins \nProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E.ProteinModelInfo \nProteinModelInfo \nProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E.Sequence \nSequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodel-4.html#ProteinModelInfo","title":"ProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E.ProteinModelInfo","content":"ProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E.ProteinModelInfo \nProteinModelInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodel-4.html#Sequence","title":"ProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E.Sequence","content":"ProteinModel\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus, \u0027sequence\u003E.Sequence \nSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodelinfo-3.html","title":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E","content":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E \n Contains information about protein used to deduce its relation to other proteins \nProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.Id \nId \nProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.ChromosomeId \nChromosomeId \nProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.Strand \nStrand \nProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.GeneLocus \nGeneLocus \nProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.SpliceVariantId \nSpliceVariantId \nProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.SeqEquivalent \nSeqEquivalent \nProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.Orthologs \nOrthologs","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodelinfo-3.html#Id","title":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.Id","content":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.Id \nId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodelinfo-3.html#ChromosomeId","title":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.ChromosomeId","content":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.ChromosomeId \nChromosomeId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodelinfo-3.html#Strand","title":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.Strand","content":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.Strand \nStrand \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodelinfo-3.html#GeneLocus","title":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.GeneLocus","content":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.GeneLocus \nGeneLocus \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodelinfo-3.html#SpliceVariantId","title":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.SpliceVariantId","content":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.SpliceVariantId \nSpliceVariantId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodelinfo-3.html#SeqEquivalent","title":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.SeqEquivalent","content":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.SeqEquivalent \nSeqEquivalent \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-proteinmodelinfo-3.html#Orthologs","title":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.Orthologs","content":"ProteinModelInfo\u003C\u0027id, \u0027chromosomeId, \u0027geneLocus\u003E.Orthologs \nOrthologs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-stranddirection.html","title":"StrandDirection","content":"StrandDirection \nDirection of strand \nStrandDirection.Forward \nForward \nStrandDirection.Reverse \nReverse","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-stranddirection.html#Forward","title":"StrandDirection.Forward","content":"StrandDirection.Forward \nForward \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-peptideclassification-stranddirection.html#Reverse","title":"StrandDirection.Reverse","content":"StrandDirection.Reverse \nReverse \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-phylogenetictree.html","title":"PhylogeneticTree","content":"PhylogeneticTree \n \nPhylogeneticTree.map \nmap \nPhylogeneticTree.iter \niter \nPhylogeneticTree.fold \nfold \nPhylogeneticTree.countLeafs \ncountLeafs \nPhylogeneticTree.countBranches \ncountBranches","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-phylogenetictree.html#map","title":"PhylogeneticTree.map","content":"PhylogeneticTree.map \nmap \nIterates trough a tree and transforms all branch and leaf values by applying a mapping function on them","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-phylogenetictree.html#iter","title":"PhylogeneticTree.iter","content":"PhylogeneticTree.iter \niter \nIterates trough a tree and performs an action on every branch and leaf","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-phylogenetictree.html#fold","title":"PhylogeneticTree.fold","content":"PhylogeneticTree.fold \nfold \nIterates through a tree and accumulates a value by applying the folder to it and every branch and leaf. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-phylogenetictree.html#countLeafs","title":"PhylogeneticTree.countLeafs","content":"PhylogeneticTree.countLeafs \ncountLeafs \n Returns the count of leaves","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-phylogenetictree.html#countBranches","title":"PhylogeneticTree.countBranches","content":"PhylogeneticTree.countBranches \ncountBranches \n Returns the count of branches","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html","title":"PhysicalConstants","content":"PhysicalConstants \nCollection of physical constants \nPhysicalConstants.BOLTZMAN \nBOLTZMAN \nPhysicalConstants.ECHARGE \nECHARGE \nPhysicalConstants.EMASS \nEMASS \nPhysicalConstants.PMASS \nPMASS \nPhysicalConstants.GRAV \nGRAV \nPhysicalConstants.PLANCK \nPLANCK \nPhysicalConstants.LIGHTSPEED \nLIGHTSPEED \nPhysicalConstants.STEFANBOLTZ \nSTEFANBOLTZ \nPhysicalConstants.AVOGADRO \nAVOGADRO \nPhysicalConstants.GASCONSTANT \nGASCONSTANT \nPhysicalConstants.GRAVACC \nGRAVACC \nPhysicalConstants.SOLARMASS \nSOLARMASS \nPhysicalConstants.SOLARRADIUS \nSOLARRADIUS \nPhysicalConstants.SOLARLUM \nSOLARLUM \nPhysicalConstants.SOLARFLUX \nSOLARFLUX \nPhysicalConstants.AU \nAU","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#BOLTZMAN","title":"PhysicalConstants.BOLTZMAN","content":"PhysicalConstants.BOLTZMAN \nBOLTZMAN \n Boltzman Constant. Units erg/deg(K) ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#ECHARGE","title":"PhysicalConstants.ECHARGE","content":"PhysicalConstants.ECHARGE \nECHARGE \n Elementary Charge. Units statcoulomb ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#EMASS","title":"PhysicalConstants.EMASS","content":"PhysicalConstants.EMASS \nEMASS \n Electron Mass. Units g ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#PMASS","title":"PhysicalConstants.PMASS","content":"PhysicalConstants.PMASS \nPMASS \n Proton Mass. Units g ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#GRAV","title":"PhysicalConstants.GRAV","content":"PhysicalConstants.GRAV \nGRAV \n Gravitational Constant. Units dyne-cm^2/g^2","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#PLANCK","title":"PhysicalConstants.PLANCK","content":"PhysicalConstants.PLANCK \nPLANCK \n Planck constant. Units erg-sec ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#LIGHTSPEED","title":"PhysicalConstants.LIGHTSPEED","content":"PhysicalConstants.LIGHTSPEED \nLIGHTSPEED \n Speed of Light in a Vacuum. Units cm/sec ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#STEFANBOLTZ","title":"PhysicalConstants.STEFANBOLTZ","content":"PhysicalConstants.STEFANBOLTZ \nSTEFANBOLTZ \n Stefan-Boltzman Constant. Units erg/cm^2-sec-deg^4 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#AVOGADRO","title":"PhysicalConstants.AVOGADRO","content":"PhysicalConstants.AVOGADRO \nAVOGADRO \n Avogadro Number. Units  1/mol ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#GASCONSTANT","title":"PhysicalConstants.GASCONSTANT","content":"PhysicalConstants.GASCONSTANT \nGASCONSTANT \n Gas Constant. Units erg/deg-mol ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#GRAVACC","title":"PhysicalConstants.GRAVACC","content":"PhysicalConstants.GRAVACC \nGRAVACC \n Gravitational Acceleration at the Earths surface. Units cm/sec^2 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#SOLARMASS","title":"PhysicalConstants.SOLARMASS","content":"PhysicalConstants.SOLARMASS \nSOLARMASS \n Solar Mass. Units g ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#SOLARRADIUS","title":"PhysicalConstants.SOLARRADIUS","content":"PhysicalConstants.SOLARRADIUS \nSOLARRADIUS \n Solar Radius. Units cm","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#SOLARLUM","title":"PhysicalConstants.SOLARLUM","content":"PhysicalConstants.SOLARLUM \nSOLARLUM \n Solar Luminosity. Units erg/sec","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#SOLARFLUX","title":"PhysicalConstants.SOLARFLUX","content":"PhysicalConstants.SOLARFLUX \nSOLARFLUX \n Solar Flux. Units erg/cm^2-sec","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-physicalconstants.html#AU","title":"PhysicalConstants.AU","content":"PhysicalConstants.AU \nAU \n Astronomical Unit (radius of the Earth\u0027s orbit). Units cm","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage.html","title":"WorkflowLanguage","content":"WorkflowLanguage \n \nWorkflowLanguage.Definition \nDefinition","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition.html","title":"Definition","content":"Definition \n \nDefinition.IOType \nIOType \nDefinition.Operation\u003C\u0027a\u003E \nOperation\u003C\u0027a\u003E \nDefinition.Workflow\u003C\u0027a\u003E \nWorkflow\u003C\u0027a\u003E \nDefinition.createProcessDescription \ncreateProcessDescription \nDefinition.createWorkflow \ncreateWorkflow","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition.html#createProcessDescription","title":"Definition.createProcessDescription","content":"Definition.createProcessDescription \ncreateProcessDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition.html#createWorkflow","title":"Definition.createWorkflow","content":"Definition.createWorkflow \ncreateWorkflow \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-iotype.html","title":"IOType","content":"IOType \n \nIOType.File \nFile \nIOType.Files \nFiles","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-iotype.html#File","title":"IOType.File","content":"IOType.File \nFile \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-iotype.html#Files","title":"IOType.Files","content":"IOType.Files \nFiles \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-operation-1.html","title":"Operation\u003C\u0027a\u003E","content":"Operation\u003C\u0027a\u003E \n \nOperation\u003C\u0027a\u003E.Id \nId \nOperation\u003C\u0027a\u003E.Name \nName \nOperation\u003C\u0027a\u003E.Operator \nOperator \nOperation\u003C\u0027a\u003E.Input \nInput \nOperation\u003C\u0027a\u003E.Output \nOutput \nOperation\u003C\u0027a\u003E.Parameters \nParameters","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-operation-1.html#Id","title":"Operation\u003C\u0027a\u003E.Id","content":"Operation\u003C\u0027a\u003E.Id \nId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-operation-1.html#Name","title":"Operation\u003C\u0027a\u003E.Name","content":"Operation\u003C\u0027a\u003E.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-operation-1.html#Operator","title":"Operation\u003C\u0027a\u003E.Operator","content":"Operation\u003C\u0027a\u003E.Operator \nOperator \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-operation-1.html#Input","title":"Operation\u003C\u0027a\u003E.Input","content":"Operation\u003C\u0027a\u003E.Input \nInput \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-operation-1.html#Output","title":"Operation\u003C\u0027a\u003E.Output","content":"Operation\u003C\u0027a\u003E.Output \nOutput \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-operation-1.html#Parameters","title":"Operation\u003C\u0027a\u003E.Parameters","content":"Operation\u003C\u0027a\u003E.Parameters \nParameters \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-workflow-1.html","title":"Workflow\u003C\u0027a\u003E","content":"Workflow\u003C\u0027a\u003E \n \nWorkflow\u003C\u0027a\u003E.Processes \nProcesses","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-workflowlanguage-definition-workflow-1.html#Processes","title":"Workflow\u003C\u0027a\u003E.Processes","content":"Workflow\u003C\u0027a\u003E.Processes \nProcesses \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-annotatedsequence-1.html","title":"AnnotatedSequence\u003C\u0027T\u003E","content":"AnnotatedSequence\u003C\u0027T\u003E \n \nAnnotatedSequence\u003C\u0027T\u003E.Tag \nTag \nAnnotatedSequence\u003C\u0027T\u003E.Sequence \nSequence \nAnnotatedSequence\u003C\u0027T\u003E.Features \nFeatures","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-annotatedsequence-1.html#Tag","title":"AnnotatedSequence\u003C\u0027T\u003E.Tag","content":"AnnotatedSequence\u003C\u0027T\u003E.Tag \nTag \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-annotatedsequence-1.html#Sequence","title":"AnnotatedSequence\u003C\u0027T\u003E.Sequence","content":"AnnotatedSequence\u003C\u0027T\u003E.Sequence \nSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-annotatedsequence-1.html#Features","title":"AnnotatedSequence\u003C\u0027T\u003E.Features","content":"AnnotatedSequence\u003C\u0027T\u003E.Features \nFeatures \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ibioitem.html","title":"IBioItem","content":"IBioItem \nMarker interface for BioItem base. \nIBioItem.Name \nName \nIBioItem.Formula \nFormula \nIBioItem.Symbol \nSymbol \nIBioItem.isGap \nisGap \nIBioItem.isTerminator \nisTerminator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ibioitem.html#Name","title":"IBioItem.Name","content":"IBioItem.Name \nName \nDisplay name of the bio item, e.g. \u0022Alanine\u0022","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ibioitem.html#Formula","title":"IBioItem.Formula","content":"IBioItem.Formula \nFormula \nChemical formula of the bio item represented as Formula","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ibioitem.html#Symbol","title":"IBioItem.Symbol","content":"IBioItem.Symbol \nSymbol \nSymbol of the bio item, e.g. \u0027A\u0027 for alanine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ibioitem.html#isGap","title":"IBioItem.isGap","content":"IBioItem.isGap \nisGap \nIndicator the bio item represents a sequence gap","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ibioitem.html#isTerminator","title":"IBioItem.isTerminator","content":"IBioItem.isTerminator \nisTerminator \nIndicator wether the bio item represents a sequence terminator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ncbiparsingtype.html","title":"NcbiParsingType","content":"NcbiParsingType \nLexer Tags for parsing BioItems \nNcbiParsingType.StandardCodes \nStandardCodes \nNcbiParsingType.AmbiguityCodes \nAmbiguityCodes \nNcbiParsingType.GapTer \nGapTer \nNcbiParsingType.NoAAChar \nNoAAChar","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ncbiparsingtype.html#StandardCodes","title":"NcbiParsingType.StandardCodes","content":"NcbiParsingType.StandardCodes \nStandardCodes \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ncbiparsingtype.html#AmbiguityCodes","title":"NcbiParsingType.AmbiguityCodes","content":"NcbiParsingType.AmbiguityCodes \nAmbiguityCodes \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ncbiparsingtype.html#GapTer","title":"NcbiParsingType.GapTer","content":"NcbiParsingType.GapTer \nGapTer \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-ncbiparsingtype.html#NoAAChar","title":"NcbiParsingType.NoAAChar","content":"NcbiParsingType.NoAAChar \nNoAAChar \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-phylogenetictree-1.html","title":"PhylogeneticTree\u003C\u0027T\u003E","content":"PhylogeneticTree\u003C\u0027T\u003E \n Recursive representation of a phylogenetic tree \nPhylogeneticTree\u003C\u0027T\u003E.Branch \nBranch \nPhylogeneticTree\u003C\u0027T\u003E.Leaf \nLeaf","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-phylogenetictree-1.html#Branch","title":"PhylogeneticTree\u003C\u0027T\u003E.Branch","content":"PhylogeneticTree\u003C\u0027T\u003E.Branch \nBranch \nCan be internal node or leaf node, depending on wether the list is empty or not. Match accordingly","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-phylogenetictree-1.html#Leaf","title":"PhylogeneticTree\u003C\u0027T\u003E.Leaf","content":"PhylogeneticTree\u003C\u0027T\u003E.Leaf \nLeaf \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html","title":"SequenceFeature","content":"SequenceFeature \n \nSequenceFeature.create \ncreate \nSequenceFeature.tryGetIntersection \ntryGetIntersection \nSequenceFeature.Name \nName \nSequenceFeature.Start \nStart \nSequenceFeature.End \nEnd \nSequenceFeature.Length \nLength \nSequenceFeature.Abbreviation \nAbbreviation \nSequenceFeature.Metadata \nMetadata \nSequenceFeature.FeatureType \nFeatureType","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html#create","title":"SequenceFeature.create","content":"SequenceFeature.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html#tryGetIntersection","title":"SequenceFeature.tryGetIntersection","content":"SequenceFeature.tryGetIntersection \ntryGetIntersection \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html#Name","title":"SequenceFeature.Name","content":"SequenceFeature.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html#Start","title":"SequenceFeature.Start","content":"SequenceFeature.Start \nStart \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html#End","title":"SequenceFeature.End","content":"SequenceFeature.End \nEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html#Length","title":"SequenceFeature.Length","content":"SequenceFeature.Length \nLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html#Abbreviation","title":"SequenceFeature.Abbreviation","content":"SequenceFeature.Abbreviation \nAbbreviation \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html#Metadata","title":"SequenceFeature.Metadata","content":"SequenceFeature.Metadata \nMetadata \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-sequencefeature.html#FeatureType","title":"SequenceFeature.FeatureType","content":"SequenceFeature.FeatureType \nFeatureType \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-taggedsequence-2.html","title":"TaggedSequence\u003C\u0027T, \u0027S\u003E","content":"TaggedSequence\u003C\u0027T, \u0027S\u003E \n Record of a sequence and its tag \nTaggedSequence\u003C\u0027T, \u0027S\u003E.create \ncreate \nTaggedSequence\u003C\u0027T, \u0027S\u003E.mapSequence \nmapSequence \nTaggedSequence\u003C\u0027T, \u0027S\u003E.mapTag \nmapTag \nTaggedSequence\u003C\u0027T, \u0027S\u003E.Tag \nTag \nTaggedSequence\u003C\u0027T, \u0027S\u003E.Sequence \nSequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-taggedsequence-2.html#create","title":"TaggedSequence\u003C\u0027T, \u0027S\u003E.create","content":"TaggedSequence\u003C\u0027T, \u0027S\u003E.create \ncreate \n Creates a tagged sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-taggedsequence-2.html#mapSequence","title":"TaggedSequence\u003C\u0027T, \u0027S\u003E.mapSequence","content":"TaggedSequence\u003C\u0027T, \u0027S\u003E.mapSequence \nmapSequence \n Maps sequence of tagged sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-taggedsequence-2.html#mapTag","title":"TaggedSequence\u003C\u0027T, \u0027S\u003E.mapTag","content":"TaggedSequence\u003C\u0027T, \u0027S\u003E.mapTag \nmapTag \n Maps tag of tagged sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-taggedsequence-2.html#Tag","title":"TaggedSequence\u003C\u0027T, \u0027S\u003E.Tag","content":"TaggedSequence\u003C\u0027T, \u0027S\u003E.Tag \nTag \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-taggedsequence-2.html#Sequence","title":"TaggedSequence\u003C\u0027T, \u0027S\u003E.Sequence","content":"TaggedSequence\u003C\u0027T, \u0027S\u003E.Sequence \nSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment.html","title":"PairwiseAlignment","content":"PairwiseAlignment \nContains functions for evaluating the best possible alignments for 2 Sequences \nPairwiseAlignment.Global \nGlobal \nPairwiseAlignment.Local \nLocal \nPairwiseAlignment.Costs\u003C\u0027a\u003E \nCosts\u003C\u0027a\u003E \nPairwiseAlignment.GlobalAlignmentInfo \nGlobalAlignmentInfo \nPairwiseAlignment.LocalAlignmentInfo \nLocalAlignmentInfo \nPairwiseAlignment.Score \nScore","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-global.html","title":"Global","content":"Global \n Global pairwise alignment algorithm. (AffineGaps) \nGlobal.NeedlemanWunsch \nNeedlemanWunsch","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-global-needlemanwunsch.html","title":"NeedlemanWunsch","content":"NeedlemanWunsch \n \nNeedlemanWunsch.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nNeedlemanWunsch.align \nalign \nNeedlemanWunsch.align \nalign \nNeedlemanWunsch.align \nalign \nNeedlemanWunsch.align \nalign \nNeedlemanWunsch.alignOption \nalignOption","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-global-needlemanwunsch.html#\u0060\u0060.ctor\u0060\u0060","title":"NeedlemanWunsch.\u0060\u0060.ctor\u0060\u0060","content":"NeedlemanWunsch.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-global-needlemanwunsch.html#align","title":"NeedlemanWunsch.align","content":"NeedlemanWunsch.align \nalign \nReturns the optimal global alignment of two Nucleotide BioArrays","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-global-needlemanwunsch.html#align","title":"NeedlemanWunsch.align","content":"NeedlemanWunsch.align \nalign \nReturns the optimal global alignment of two AminoAcidSymbol BioArrays","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-global-needlemanwunsch.html#align","title":"NeedlemanWunsch.align","content":"NeedlemanWunsch.align \nalign \nReturns the optimal global alignment of two AminoAcid BioArrays","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-global-needlemanwunsch.html#align","title":"NeedlemanWunsch.align","content":"NeedlemanWunsch.align \nalign \nReturns the optimal global alignment of two arrays of generic values","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-global-needlemanwunsch.html#alignOption","title":"NeedlemanWunsch.alignOption","content":"NeedlemanWunsch.alignOption \nalignOption \nReturns the optimal global alignment of two arrays of generic values","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-local.html","title":"Local","content":"Local \n \nLocal.SmithWaterman \nSmithWaterman","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-local-smithwaterman.html","title":"SmithWaterman","content":"SmithWaterman \n Local pairwise alignment algorithm (AffineGaps) \nSmithWaterman.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSmithWaterman.align \nalign \nSmithWaterman.align \nalign \nSmithWaterman.align \nalign \nSmithWaterman.align \nalign \nSmithWaterman.alignOption \nalignOption","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-local-smithwaterman.html#\u0060\u0060.ctor\u0060\u0060","title":"SmithWaterman.\u0060\u0060.ctor\u0060\u0060","content":"SmithWaterman.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-local-smithwaterman.html#align","title":"SmithWaterman.align","content":"SmithWaterman.align \nalign \nReturns the optimal local alignment of two Nucleotide BioArrays","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-local-smithwaterman.html#align","title":"SmithWaterman.align","content":"SmithWaterman.align \nalign \nReturns the optimal local alignment of two AminoAcidSymbol BioArrays","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-local-smithwaterman.html#align","title":"SmithWaterman.align","content":"SmithWaterman.align \nalign \nReturns the optimal local alignment of two AminoAcid BioArrays","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-local-smithwaterman.html#align","title":"SmithWaterman.align","content":"SmithWaterman.align \nalign \nReturns the optimal local alignment of two arrays of generic values","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-local-smithwaterman.html#alignOption","title":"SmithWaterman.alignOption","content":"SmithWaterman.alignOption \nalignOption \nReturns the optimal local alignment of two arrays of generic values","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-costs-1.html","title":"Costs\u003C\u0027a\u003E","content":"Costs\u003C\u0027a\u003E \nCarries the costs for gaps and the scoring matrix (Similarity) \nCosts\u003C\u0027a\u003E.create \ncreate \nCosts\u003C\u0027a\u003E.Open \nOpen \nCosts\u003C\u0027a\u003E.Continuation \nContinuation \nCosts\u003C\u0027a\u003E.Similarity \nSimilarity","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-costs-1.html#create","title":"Costs\u003C\u0027a\u003E.create","content":"Costs\u003C\u0027a\u003E.create \ncreate \nCreates a costs element used for alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-costs-1.html#Open","title":"Costs\u003C\u0027a\u003E.Open","content":"Costs\u003C\u0027a\u003E.Open \nOpen \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-costs-1.html#Continuation","title":"Costs\u003C\u0027a\u003E.Continuation","content":"Costs\u003C\u0027a\u003E.Continuation \nContinuation \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-costs-1.html#Similarity","title":"Costs\u003C\u0027a\u003E.Similarity","content":"Costs\u003C\u0027a\u003E.Similarity \nSimilarity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-globalalignmentinfo.html","title":"GlobalAlignmentInfo","content":"GlobalAlignmentInfo \n \nGlobalAlignmentInfo.create \ncreate \nGlobalAlignmentInfo.Score \nScore \nGlobalAlignmentInfo.GapPenalty \nGapPenalty \nGlobalAlignmentInfo.ExtendGapPenalty \nExtendGapPenalty \nGlobalAlignmentInfo.Length \nLength \nGlobalAlignmentInfo.Identity \nIdentity \nGlobalAlignmentInfo.IdentityFraction \nIdentityFraction","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-globalalignmentinfo.html#create","title":"GlobalAlignmentInfo.create","content":"GlobalAlignmentInfo.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-globalalignmentinfo.html#Score","title":"GlobalAlignmentInfo.Score","content":"GlobalAlignmentInfo.Score \nScore \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-globalalignmentinfo.html#GapPenalty","title":"GlobalAlignmentInfo.GapPenalty","content":"GlobalAlignmentInfo.GapPenalty \nGapPenalty \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-globalalignmentinfo.html#ExtendGapPenalty","title":"GlobalAlignmentInfo.ExtendGapPenalty","content":"GlobalAlignmentInfo.ExtendGapPenalty \nExtendGapPenalty \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-globalalignmentinfo.html#Length","title":"GlobalAlignmentInfo.Length","content":"GlobalAlignmentInfo.Length \nLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-globalalignmentinfo.html#Identity","title":"GlobalAlignmentInfo.Identity","content":"GlobalAlignmentInfo.Identity \nIdentity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-globalalignmentinfo.html#IdentityFraction","title":"GlobalAlignmentInfo.IdentityFraction","content":"GlobalAlignmentInfo.IdentityFraction \nIdentityFraction \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html","title":"LocalAlignmentInfo","content":"LocalAlignmentInfo \n \nLocalAlignmentInfo.create \ncreate \nLocalAlignmentInfo.Score \nScore \nLocalAlignmentInfo.GapPenalty \nGapPenalty \nLocalAlignmentInfo.ExtendGapPenalty \nExtendGapPenalty \nLocalAlignmentInfo.Length \nLength \nLocalAlignmentInfo.Identity \nIdentity \nLocalAlignmentInfo.IdentityFraction \nIdentityFraction \nLocalAlignmentInfo.Seq1AlignmentStartIndex \nSeq1AlignmentStartIndex \nLocalAlignmentInfo.Seq2AlignmentStartIndex \nSeq2AlignmentStartIndex","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html#create","title":"LocalAlignmentInfo.create","content":"LocalAlignmentInfo.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html#Score","title":"LocalAlignmentInfo.Score","content":"LocalAlignmentInfo.Score \nScore \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html#GapPenalty","title":"LocalAlignmentInfo.GapPenalty","content":"LocalAlignmentInfo.GapPenalty \nGapPenalty \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html#ExtendGapPenalty","title":"LocalAlignmentInfo.ExtendGapPenalty","content":"LocalAlignmentInfo.ExtendGapPenalty \nExtendGapPenalty \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html#Length","title":"LocalAlignmentInfo.Length","content":"LocalAlignmentInfo.Length \nLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html#Identity","title":"LocalAlignmentInfo.Identity","content":"LocalAlignmentInfo.Identity \nIdentity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html#IdentityFraction","title":"LocalAlignmentInfo.IdentityFraction","content":"LocalAlignmentInfo.IdentityFraction \nIdentityFraction \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html#Seq1AlignmentStartIndex","title":"LocalAlignmentInfo.Seq1AlignmentStartIndex","content":"LocalAlignmentInfo.Seq1AlignmentStartIndex \nSeq1AlignmentStartIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-localalignmentinfo.html#Seq2AlignmentStartIndex","title":"LocalAlignmentInfo.Seq2AlignmentStartIndex","content":"LocalAlignmentInfo.Seq2AlignmentStartIndex \nSeq2AlignmentStartIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-pairwisealignment-score.html","title":"Score","content":"Score \nScore of the alignment and the aligned sequences as a tuple","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix.html","title":"ScoringMatrix","content":"ScoringMatrix \nContains functions for using the included similarity matrices. These assign a score to every pair of aminoacids/nucleotides and therefore rate the probability of their substitution. The Scoring Matrices are generally used for alignments. \nScoringMatrix.ScoringMatrixAminoAcid \nScoringMatrixAminoAcid \nScoringMatrix.ScoringMatrixNucleotide \nScoringMatrixNucleotide \nScoringMatrix.getScoringMatrixAminoAcid \ngetScoringMatrixAminoAcid \nScoringMatrix.getScoringMatrixNucleotide \ngetScoringMatrixNucleotide \nScoringMatrix.getPrimitiveScoringMatrixNucleotide \ngetPrimitiveScoringMatrixNucleotide","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix.html#getScoringMatrixAminoAcid","title":"ScoringMatrix.getScoringMatrixAminoAcid","content":"ScoringMatrix.getScoringMatrixAminoAcid \ngetScoringMatrixAminoAcid \ncreates a scoring function for amino acids out of a scoring matrix","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix.html#getScoringMatrixNucleotide","title":"ScoringMatrix.getScoringMatrixNucleotide","content":"ScoringMatrix.getScoringMatrixNucleotide \ngetScoringMatrixNucleotide \ncreates a scoring function for nucleotides out of a scoring matrix","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix.html#getPrimitiveScoringMatrixNucleotide","title":"ScoringMatrix.getPrimitiveScoringMatrixNucleotide","content":"ScoringMatrix.getPrimitiveScoringMatrixNucleotide \ngetPrimitiveScoringMatrixNucleotide \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixaminoacid.html","title":"ScoringMatrixAminoAcid","content":"ScoringMatrixAminoAcid \nUnion case of implemented amino acid scoring matrices with the given reference to its place in the library. Use the \u0022getScoringMatrixAminoAcid\u0022 function to obtain a simple mapping function for every amino acid pair \nScoringMatrixAminoAcid.toFileName \ntoFileName \nScoringMatrixAminoAcid.BLOSUM45 \nBLOSUM45 \nScoringMatrixAminoAcid.BLOSUM50 \nBLOSUM50 \nScoringMatrixAminoAcid.BLOSUM62 \nBLOSUM62 \nScoringMatrixAminoAcid.BLOSUM80 \nBLOSUM80 \nScoringMatrixAminoAcid.PAM30 \nPAM30 \nScoringMatrixAminoAcid.PAM70 \nPAM70 \nScoringMatrixAminoAcid.PAM250 \nPAM250","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixaminoacid.html#toFileName","title":"ScoringMatrixAminoAcid.toFileName","content":"ScoringMatrixAminoAcid.toFileName \ntoFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixaminoacid.html#BLOSUM45","title":"ScoringMatrixAminoAcid.BLOSUM45","content":"ScoringMatrixAminoAcid.BLOSUM45 \nBLOSUM45 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixaminoacid.html#BLOSUM50","title":"ScoringMatrixAminoAcid.BLOSUM50","content":"ScoringMatrixAminoAcid.BLOSUM50 \nBLOSUM50 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixaminoacid.html#BLOSUM62","title":"ScoringMatrixAminoAcid.BLOSUM62","content":"ScoringMatrixAminoAcid.BLOSUM62 \nBLOSUM62 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixaminoacid.html#BLOSUM80","title":"ScoringMatrixAminoAcid.BLOSUM80","content":"ScoringMatrixAminoAcid.BLOSUM80 \nBLOSUM80 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixaminoacid.html#PAM30","title":"ScoringMatrixAminoAcid.PAM30","content":"ScoringMatrixAminoAcid.PAM30 \nPAM30 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixaminoacid.html#PAM70","title":"ScoringMatrixAminoAcid.PAM70","content":"ScoringMatrixAminoAcid.PAM70 \nPAM70 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixaminoacid.html#PAM250","title":"ScoringMatrixAminoAcid.PAM250","content":"ScoringMatrixAminoAcid.PAM250 \nPAM250 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixnucleotide.html","title":"ScoringMatrixNucleotide","content":"ScoringMatrixNucleotide \nUnion case of implemented nucleotide scoring matrices with the given reference to its place in the library. Use the \u0022getScoringMatrixNucleotide\u0022 function to obtain a simple mapping function for every nucleotide pair \nScoringMatrixNucleotide.toFileName \ntoFileName \nScoringMatrixNucleotide.EDNA \nEDNA \nScoringMatrixNucleotide.Default \nDefault","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixnucleotide.html#toFileName","title":"ScoringMatrixNucleotide.toFileName","content":"ScoringMatrixNucleotide.toFileName \ntoFileName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixnucleotide.html#EDNA","title":"ScoringMatrixNucleotide.EDNA","content":"ScoringMatrixNucleotide.EDNA \nEDNA \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-scoringmatrix-scoringmatrixnucleotide.html#Default","title":"ScoringMatrixNucleotide.Default","content":"ScoringMatrixNucleotide.Default \nDefault \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching.html","title":"StringMatching","content":"StringMatching \nA collection of different string matching algorithms \nStringMatching.BoyerMoore \nBoyerMoore \nStringMatching.KnuthMorrisPratt \nKnuthMorrisPratt \nStringMatching.Naive \nNaive \nStringMatching.RabinKarp \nRabinKarp","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-boyermoore.html","title":"BoyerMoore","content":"BoyerMoore \nA collection of Boyer-Moore string matching algorithms \nBoyerMoore.suffixes \nsuffixes \nBoyerMoore.getGoodSuffixShift \ngetGoodSuffixShift \nBoyerMoore.getBadCharacterShift \ngetBadCharacterShift \nBoyerMoore.searchBoyerMoore \nsearchBoyerMoore \nBoyerMoore.findFrom \nfindFrom \nBoyerMoore.findFirst \nfindFirst \nBoyerMoore.findAll \nfindAll","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-boyermoore.html#suffixes","title":"BoyerMoore.suffixes","content":"BoyerMoore.suffixes \nsuffixes \n Creates N(j) that is needed for the good suffix rule.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-boyermoore.html#getGoodSuffixShift","title":"BoyerMoore.getGoodSuffixShift","content":"BoyerMoore.getGoodSuffixShift \ngetGoodSuffixShift \n Creates an array containing the shiftig values created by using the good suffix heuristics.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-boyermoore.html#getBadCharacterShift","title":"BoyerMoore.getBadCharacterShift","content":"BoyerMoore.getBadCharacterShift \ngetBadCharacterShift \n Creates an array for any values containing the shiftig values created by using the bad character rule.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-boyermoore.html#searchBoyerMoore","title":"BoyerMoore.searchBoyerMoore","content":"BoyerMoore.searchBoyerMoore \nsearchBoyerMoore \n Returns a list with the beginning positions of the searched pattern. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-boyermoore.html#findFrom","title":"BoyerMoore.findFrom","content":"BoyerMoore.findFrom \nfindFrom \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-boyermoore.html#findFirst","title":"BoyerMoore.findFirst","content":"BoyerMoore.findFirst \nfindFirst \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-boyermoore.html#findAll","title":"BoyerMoore.findAll","content":"BoyerMoore.findAll \nfindAll \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-knuthmorrispratt.html","title":"KnuthMorrisPratt","content":"KnuthMorrisPratt \nA collection of Knuth-Morris-Pratt string matching algorithms \nKnuthMorrisPratt.createPrefixTable \ncreatePrefixTable \nKnuthMorrisPratt.findAll \nfindAll \nKnuthMorrisPratt.initFindAll \ninitFindAll \nKnuthMorrisPratt.findFrom \nfindFrom \nKnuthMorrisPratt.initFindFrom \ninitFindFrom \nKnuthMorrisPratt.find \nfind \nKnuthMorrisPratt.initFind \ninitFind","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-knuthmorrispratt.html#createPrefixTable","title":"KnuthMorrisPratt.createPrefixTable","content":"KnuthMorrisPratt.createPrefixTable \ncreatePrefixTable \ncreates a prefix table for a query pattern","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-knuthmorrispratt.html#findAll","title":"KnuthMorrisPratt.findAll","content":"KnuthMorrisPratt.findAll \nfindAll \nfinds all matches of a query pattern in a source using a given prefix table","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-knuthmorrispratt.html#initFindAll","title":"KnuthMorrisPratt.initFindAll","content":"KnuthMorrisPratt.initFindAll \ninitFindAll \nreturns a findAll function with a set prefix table created from the input","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-knuthmorrispratt.html#findFrom","title":"KnuthMorrisPratt.findFrom","content":"KnuthMorrisPratt.findFrom \nfindFrom \nfinds the first match of a query pattern in a source starting from a specific position in the source using a given prefix table","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-knuthmorrispratt.html#initFindFrom","title":"KnuthMorrisPratt.initFindFrom","content":"KnuthMorrisPratt.initFindFrom \ninitFindFrom \nreturns a findFrom function with a set prefix table created from the input","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-knuthmorrispratt.html#find","title":"KnuthMorrisPratt.find","content":"KnuthMorrisPratt.find \nfind \nfinds the first match of a query pattern in a source using a given prefix table","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-knuthmorrispratt.html#initFind","title":"KnuthMorrisPratt.initFind","content":"KnuthMorrisPratt.initFind \ninitFind \nreturns a find function with a set prefix table created from the input","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-naive.html","title":"Naive","content":"Naive \nA collection of naive string matching algorithms \nNaive.findAll \nfindAll \nNaive.findFrom \nfindFrom \nNaive.find \nfind","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-naive.html#findAll","title":"Naive.findAll","content":"Naive.findAll \nfindAll \nfinds all matches of a query pattern in a source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-naive.html#findFrom","title":"Naive.findFrom","content":"Naive.findFrom \nfindFrom \nfinds the first match of a query pattern in a source starting from a specific position in the source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-naive.html#find","title":"Naive.find","content":"Naive.find \nfind \nfinds the first match of a query pattern in a source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp.html","title":"RabinKarp","content":"RabinKarp \nA collection of Rabin-Karp string matching algorithms and hash functions \nRabinKarp.CP \nCP \nRabinKarp.RKStandard \nRKStandard \nRabinKarp.isMatchAt \nisMatchAt \nRabinKarp.findAllGeneric \nfindAllGeneric \nRabinKarp.findFromGeneric \nfindFromGeneric","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp.html#isMatchAt","title":"RabinKarp.isMatchAt","content":"RabinKarp.isMatchAt \nisMatchAt \nchecks if content of pattern and source substring match","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp.html#findAllGeneric","title":"RabinKarp.findAllGeneric","content":"RabinKarp.findAllGeneric \nfindAllGeneric \ntakes an updateHash and blockHash function to find all matches of a query pattern in a source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp.html#findFromGeneric","title":"RabinKarp.findFromGeneric","content":"RabinKarp.findFromGeneric \nfindFromGeneric \ntakes an updateHash and blockHash function to find the first match of a query pattern in a source starting from a specific position in the source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-cp.html","title":"CP","content":"CP \nA collection of Rabin-Karp string matching algorithms using the cyclic polynomial (CP) hash \nCP.rotateLeft \nrotateLeft \nCP.addToHashValue \naddToHashValue \nCP.blockHash \nblockHash \nCP.updateHash \nupdateHash \nCP.findAll \nfindAll \nCP.findFrom \nfindFrom \nCP.find \nfind","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-cp.html#rotateLeft","title":"CP.rotateLeft","content":"CP.rotateLeft \nrotateLeft \nbitwise cyclic rotation of a 64 bit pattern","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-cp.html#addToHashValue","title":"CP.addToHashValue","content":"CP.addToHashValue \naddToHashValue \nadds a hashvalue to an existing hashvalue","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-cp.html#blockHash","title":"CP.blockHash","content":"CP.blockHash \nblockHash \nhashes a pattern","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-cp.html#updateHash","title":"CP.updateHash","content":"CP.updateHash \nupdateHash \nupdates an existing hashvalue ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-cp.html#findAll","title":"CP.findAll","content":"CP.findAll \nfindAll \nfind all matches of a query pattern in a source   ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-cp.html#findFrom","title":"CP.findFrom","content":"CP.findFrom \nfindFrom \nfind the first match of a query pattern in a source starting from a specific position in the source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-cp.html#find","title":"CP.find","content":"CP.find \nfind \nfind the first match of a query pattern in a source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-rkstandard.html","title":"RKStandard","content":"RKStandard \nA collection of Rabin-Karp string matching algorithms using the built-in hash function of f# \nRKStandard.initBaseEndFromLength \ninitBaseEndFromLength \nRKStandard.addToHash \naddToHash \nRKStandard.blockHash \nblockHash \nRKStandard.updateHash \nupdateHash \nRKStandard.findAll \nfindAll \nRKStandard.findFrom \nfindFrom \nRKStandard.find \nfind","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-rkstandard.html#initBaseEndFromLength","title":"RKStandard.initBaseEndFromLength","content":"RKStandard.initBaseEndFromLength \ninitBaseEndFromLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-rkstandard.html#addToHash","title":"RKStandard.addToHash","content":"RKStandard.addToHash \naddToHash \nadds a hashvalue to an existing hashvalue","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-rkstandard.html#blockHash","title":"RKStandard.blockHash","content":"RKStandard.blockHash \nblockHash \nhashes a pattern","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-rkstandard.html#updateHash","title":"RKStandard.updateHash","content":"RKStandard.updateHash \nupdateHash \nupdates an existing hashvalue ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-rkstandard.html#findAll","title":"RKStandard.findAll","content":"RKStandard.findAll \nfindAll \nfinds all matches of a query pattern in a source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-rkstandard.html#findFrom","title":"RKStandard.findFrom","content":"RKStandard.findFrom \nfindFrom \nfinds the first match of a query pattern in a source starting from a specific position in the source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-algorithm-stringmatching-rabinkarp-rkstandard.html#find","title":"RKStandard.find","content":"RKStandard.find \nfind \nfinds the first match of a query pattern in a source","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw.html","title":"AgilentRaw","content":"AgilentRaw \n \nAgilentRaw.AgilentBooleanConverter \nAgilentBooleanConverter \nAgilentRaw.AgilentControlType \nAgilentControlType \nAgilentRaw.AgilentControlTypeConverter \nAgilentControlTypeConverter \nAgilentRaw.AgilentDataRaw \nAgilentDataRaw \nAgilentRaw.AgilentRawDescription \nAgilentRawDescription \nAgilentRaw.GalProbeDescription \nGalProbeDescription \nAgilentRaw.ProbeMapping \nProbeMapping \nAgilentRaw.createGalProbeDescription \ncreateGalProbeDescription \nAgilentRaw.readGalProbeDescription \nreadGalProbeDescription \nAgilentRaw.galProbeDescriptiontoMapping \ngalProbeDescriptiontoMapping \nAgilentRaw.probeMappingReader \nprobeMappingReader","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw.html#createGalProbeDescription","title":"AgilentRaw.createGalProbeDescription","content":"AgilentRaw.createGalProbeDescription \ncreateGalProbeDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw.html#readGalProbeDescription","title":"AgilentRaw.readGalProbeDescription","content":"AgilentRaw.readGalProbeDescription \nreadGalProbeDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw.html#galProbeDescriptiontoMapping","title":"AgilentRaw.galProbeDescriptiontoMapping","content":"AgilentRaw.galProbeDescriptiontoMapping \ngalProbeDescriptiontoMapping \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw.html#probeMappingReader","title":"AgilentRaw.probeMappingReader","content":"AgilentRaw.probeMappingReader \nprobeMappingReader \n Reads probe mapping. Map: probe name -\u003E gene name ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentbooleanconverter.html","title":"AgilentBooleanConverter","content":"AgilentBooleanConverter \n \nAgilentBooleanConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentbooleanconverter.html#\u0060\u0060.ctor\u0060\u0060","title":"AgilentBooleanConverter.\u0060\u0060.ctor\u0060\u0060","content":"AgilentBooleanConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentcontroltype.html","title":"AgilentControlType","content":"AgilentControlType \n \nAgilentControlType.None \nNone \nAgilentControlType.PositiveControl \nPositiveControl \nAgilentControlType.NegativeControl \nNegativeControl \nAgilentControlType.DeletionControl \nDeletionControl \nAgilentControlType.NotProbe \nNotProbe","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentcontroltype.html#None","title":"AgilentControlType.None","content":"AgilentControlType.None \nNone \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentcontroltype.html#PositiveControl","title":"AgilentControlType.PositiveControl","content":"AgilentControlType.PositiveControl \nPositiveControl \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentcontroltype.html#NegativeControl","title":"AgilentControlType.NegativeControl","content":"AgilentControlType.NegativeControl \nNegativeControl \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentcontroltype.html#DeletionControl","title":"AgilentControlType.DeletionControl","content":"AgilentControlType.DeletionControl \nDeletionControl \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentcontroltype.html#NotProbe","title":"AgilentControlType.NotProbe","content":"AgilentControlType.NotProbe \nNotProbe \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentcontroltypeconverter.html","title":"AgilentControlTypeConverter","content":"AgilentControlTypeConverter \n \nAgilentControlTypeConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentcontroltypeconverter.html#\u0060\u0060.ctor\u0060\u0060","title":"AgilentControlTypeConverter.\u0060\u0060.ctor\u0060\u0060","content":"AgilentControlTypeConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html","title":"AgilentDataRaw","content":"AgilentDataRaw \n Record type representing microarray Agilent raw data item  \nAgilentDataRaw.FeatureNum \nFeatureNum \nAgilentDataRaw.Row \nRow \nAgilentDataRaw.Col \nCol \nAgilentDataRaw.ProbeUID \nProbeUID \nAgilentDataRaw.ControlType \nControlType \nAgilentDataRaw.ProbeName \nProbeName \nAgilentDataRaw.PositionX \nPositionX \nAgilentDataRaw.PositionY \nPositionY \nAgilentDataRaw.IsFound_green \nIsFound_green \nAgilentDataRaw.IsFound_red \nIsFound_red \nAgilentDataRaw.ProcessedSignal_green \nProcessedSignal_green \nAgilentDataRaw.ProcessedSignal_red \nProcessedSignal_red \nAgilentDataRaw.ProcessedSigError_green \nProcessedSigError_green \nAgilentDataRaw.ProcessedSigError_red \nProcessedSigError_red \nAgilentDataRaw.MeanSignal_green \nMeanSignal_green \nAgilentDataRaw.MeanSignal_red \nMeanSignal_red \nAgilentDataRaw.MedianSignal_green \nMedianSignal_green \nAgilentDataRaw.MedianSignal_red \nMedianSignal_red \nAgilentDataRaw.BGMeanSignal_green \nBGMeanSignal_green \nAgilentDataRaw.BGMeanSignal_red \nBGMeanSignal_red \nAgilentDataRaw.BGMedianSignal_green \nBGMedianSignal_green \nAgilentDataRaw.BGMedianSignal_red \nBGMedianSignal_red \nAgilentDataRaw.IsSaturated_green \nIsSaturated_green \nAgilentDataRaw.IsSaturated_red \nIsSaturated_red \nAgilentDataRaw.BGSubSignal_green \nBGSubSignal_green \nAgilentDataRaw.BGSubSignal_red \nBGSubSignal_red \nAgilentDataRaw.BGSubSigError_green \nBGSubSigError_green \nAgilentDataRaw.BGSubSigError_red \nBGSubSigError_red \nAgilentDataRaw.IsWellAboveBG_green \nIsWellAboveBG_green \nAgilentDataRaw.IsWellAboveBG_red \nIsWellAboveBG_red","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#FeatureNum","title":"AgilentDataRaw.FeatureNum","content":"AgilentDataRaw.FeatureNum \nFeatureNum \n Feature number","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#Row","title":"AgilentDataRaw.Row","content":"AgilentDataRaw.Row \nRow \n  Feature location : row","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#Col","title":"AgilentDataRaw.Col","content":"AgilentDataRaw.Col \nCol \n Feature location : column","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#ProbeUID","title":"AgilentDataRaw.ProbeUID","content":"AgilentDataRaw.ProbeUID \nProbeUID \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#ControlType","title":"AgilentDataRaw.ControlType","content":"AgilentDataRaw.ControlType \nControlType \n Feature control type","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#ProbeName","title":"AgilentDataRaw.ProbeName","content":"AgilentDataRaw.ProbeName \nProbeName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#PositionX","title":"AgilentDataRaw.PositionX","content":"AgilentDataRaw.PositionX \nPositionX \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#PositionY","title":"AgilentDataRaw.PositionY","content":"AgilentDataRaw.PositionY \nPositionY \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#IsFound_green","title":"AgilentDataRaw.IsFound_green","content":"AgilentDataRaw.IsFound_green \nIsFound_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#IsFound_red","title":"AgilentDataRaw.IsFound_red","content":"AgilentDataRaw.IsFound_red \nIsFound_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#ProcessedSignal_green","title":"AgilentDataRaw.ProcessedSignal_green","content":"AgilentDataRaw.ProcessedSignal_green \nProcessedSignal_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#ProcessedSignal_red","title":"AgilentDataRaw.ProcessedSignal_red","content":"AgilentDataRaw.ProcessedSignal_red \nProcessedSignal_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#ProcessedSigError_green","title":"AgilentDataRaw.ProcessedSigError_green","content":"AgilentDataRaw.ProcessedSigError_green \nProcessedSigError_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#ProcessedSigError_red","title":"AgilentDataRaw.ProcessedSigError_red","content":"AgilentDataRaw.ProcessedSigError_red \nProcessedSigError_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#MeanSignal_green","title":"AgilentDataRaw.MeanSignal_green","content":"AgilentDataRaw.MeanSignal_green \nMeanSignal_green \n Mean raw signal calculated from the intensities of all inlier pixels that represents the feature (after outlier pixel rejection). Also called the foreground signal.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#MeanSignal_red","title":"AgilentDataRaw.MeanSignal_red","content":"AgilentDataRaw.MeanSignal_red \nMeanSignal_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#MedianSignal_green","title":"AgilentDataRaw.MedianSignal_green","content":"AgilentDataRaw.MedianSignal_green \nMedianSignal_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#MedianSignal_red","title":"AgilentDataRaw.MedianSignal_red","content":"AgilentDataRaw.MedianSignal_red \nMedianSignal_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#BGMeanSignal_green","title":"AgilentDataRaw.BGMeanSignal_green","content":"AgilentDataRaw.BGMeanSignal_green \nBGMeanSignal_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#BGMeanSignal_red","title":"AgilentDataRaw.BGMeanSignal_red","content":"AgilentDataRaw.BGMeanSignal_red \nBGMeanSignal_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#BGMedianSignal_green","title":"AgilentDataRaw.BGMedianSignal_green","content":"AgilentDataRaw.BGMedianSignal_green \nBGMedianSignal_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#BGMedianSignal_red","title":"AgilentDataRaw.BGMedianSignal_red","content":"AgilentDataRaw.BGMedianSignal_red \nBGMedianSignal_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#IsSaturated_green","title":"AgilentDataRaw.IsSaturated_green","content":"AgilentDataRaw.IsSaturated_green \nIsSaturated_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#IsSaturated_red","title":"AgilentDataRaw.IsSaturated_red","content":"AgilentDataRaw.IsSaturated_red \nIsSaturated_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#BGSubSignal_green","title":"AgilentDataRaw.BGSubSignal_green","content":"AgilentDataRaw.BGSubSignal_green \nBGSubSignal_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#BGSubSignal_red","title":"AgilentDataRaw.BGSubSignal_red","content":"AgilentDataRaw.BGSubSignal_red \nBGSubSignal_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#BGSubSigError_green","title":"AgilentDataRaw.BGSubSigError_green","content":"AgilentDataRaw.BGSubSigError_green \nBGSubSigError_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#BGSubSigError_red","title":"AgilentDataRaw.BGSubSigError_red","content":"AgilentDataRaw.BGSubSigError_red \nBGSubSigError_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#IsWellAboveBG_green","title":"AgilentDataRaw.IsWellAboveBG_green","content":"AgilentDataRaw.IsWellAboveBG_green \nIsWellAboveBG_green \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentdataraw.html#IsWellAboveBG_red","title":"AgilentDataRaw.IsWellAboveBG_red","content":"AgilentDataRaw.IsWellAboveBG_red \nIsWellAboveBG_red \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentrawdescription.html","title":"AgilentRawDescription","content":"AgilentRawDescription \n \nAgilentRawDescription.ProbeName \nProbeName \nAgilentRawDescription.GeneName \nGeneName \nAgilentRawDescription.SystematicName \nSystematicName \nAgilentRawDescription.Description \nDescription \nAgilentRawDescription.Start \nStart \nAgilentRawDescription.Sequence \nSequence \nAgilentRawDescription.ProbeUID \nProbeUID","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentrawdescription.html#ProbeName","title":"AgilentRawDescription.ProbeName","content":"AgilentRawDescription.ProbeName \nProbeName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentrawdescription.html#GeneName","title":"AgilentRawDescription.GeneName","content":"AgilentRawDescription.GeneName \nGeneName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentrawdescription.html#SystematicName","title":"AgilentRawDescription.SystematicName","content":"AgilentRawDescription.SystematicName \nSystematicName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentrawdescription.html#Description","title":"AgilentRawDescription.Description","content":"AgilentRawDescription.Description \nDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentrawdescription.html#Start","title":"AgilentRawDescription.Start","content":"AgilentRawDescription.Start \nStart \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentrawdescription.html#Sequence","title":"AgilentRawDescription.Sequence","content":"AgilentRawDescription.Sequence \nSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-agilentrawdescription.html#ProbeUID","title":"AgilentRawDescription.ProbeUID","content":"AgilentRawDescription.ProbeUID \nProbeUID \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-galprobedescription.html","title":"GalProbeDescription","content":"GalProbeDescription \n \nGalProbeDescription.Block \nBlock \nGalProbeDescription.Row \nRow \nGalProbeDescription.Column \nColumn \nGalProbeDescription.ID \nID \nGalProbeDescription.GeneName \nGeneName","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-galprobedescription.html#Block","title":"GalProbeDescription.Block","content":"GalProbeDescription.Block \nBlock \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-galprobedescription.html#Row","title":"GalProbeDescription.Row","content":"GalProbeDescription.Row \nRow \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-galprobedescription.html#Column","title":"GalProbeDescription.Column","content":"GalProbeDescription.Column \nColumn \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-galprobedescription.html#ID","title":"GalProbeDescription.ID","content":"GalProbeDescription.ID \nID \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-galprobedescription.html#GeneName","title":"GalProbeDescription.GeneName","content":"GalProbeDescription.GeneName \nGeneName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-probemapping.html","title":"ProbeMapping","content":"ProbeMapping \n Record type representing microarray probe mapping \nProbeMapping.ProbeName \nProbeName \nProbeMapping.GeneName \nGeneName","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-probemapping.html#ProbeName","title":"ProbeMapping.ProbeName","content":"ProbeMapping.ProbeName \nProbeName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-agilentraw-probemapping.html#GeneName","title":"ProbeMapping.GeneName","content":"ProbeMapping.GeneName \nGeneName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli.html","title":"BlastCLI","content":"BlastCLI \nDSLs for creating BLAST CLI commands\n\nGenerated and tested for the tag blast:2.2.31--pl526h3066fca_3 \nBlastCLI.BlastN \nBlastN \nBlastCLI.BlastP \nBlastP \nBlastCLI.BlastParams \nBlastParams \nBlastCLI.CBlastResult \nCBlastResult \nBlastCLI.DbType \nDbType \nBlastCLI.MakeBlastDBInputType \nMakeBlastDBInputType \nBlastCLI.MakeBlastDbParams \nMakeBlastDbParams \nBlastCLI.OutputCustom \nOutputCustom \nBlastCLI.OutputType \nOutputType","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn.html","title":"BlastN","content":"BlastN \nDSL for blastn programs\nThe blastn application searches a nucleotide query against nucleotide subject sequences or a nucleotide database. \nFour different tasks are supported: \n\n1.) \u201Cmegablast\u201D, for very similar sequences (e.g, sequencing errors)\n\n2.) \u201Cdc-megablast\u201D, typically used for inter-species comparisons\n\n3.) \u201Cblastn\u201D, the traditional program used for inter-species comparisons\n\n4.) \u201Cblastn-short\u201D, optimized for sequences less than 30 nucleotides. \nBlastN.BlastNParameters \nBlastNParameters \nBlastN.BlastNParams \nBlastNParams \nBlastN.BlastNShortParameters \nBlastNShortParameters \nBlastN.BlastNShortParams \nBlastNShortParams \nBlastN.DCMegablastParameters \nDCMegablastParameters \nBlastN.DCMegablastParams \nDCMegablastParams \nBlastN.MegablastParameters \nMegablastParameters \nBlastN.MegablastParams \nMegablastParams","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparameters.html","title":"BlastNParameters","content":"BlastNParameters \n\u003Cpre\u003Euse this type to specify specific and generic command line parameters for the blastn task like this:\n\nlet myParams = [\n\n     BlastNParameters.CommonOptions [...]\n\n     BlastNParameters.SpecificOptions [...]\n]\u003C/pre\u003E \nBlastNParameters.toCLIArgs \ntoCLIArgs \nBlastNParameters.CommonOptions \nCommonOptions \nBlastNParameters.SpecificOptions \nSpecificOptions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparameters.html#toCLIArgs","title":"BlastNParameters.toCLIArgs","content":"BlastNParameters.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparameters.html#CommonOptions","title":"BlastNParameters.CommonOptions","content":"BlastNParameters.CommonOptions \nCommonOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparameters.html#SpecificOptions","title":"BlastNParameters.SpecificOptions","content":"BlastNParameters.SpecificOptions \nSpecificOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html","title":"BlastNParams","content":"BlastNParams \nDSL fo blastn command line options\nblastn is the traditional program used for inter-species comparisons \nBlastNParams.toCLIArgs \ntoCLIArgs \nBlastNParams.WordSize \nWordSize \nBlastNParams.GapOpen \nGapOpen \nBlastNParams.GapExtend \nGapExtend \nBlastNParams.Reward \nReward \nBlastNParams.Penalty \nPenalty \nBlastNParams.Strand \nStrand \nBlastNParams.Dust \nDust \nBlastNParams.FilteringDB \nFilteringDB \nBlastNParams.WindowMaskerTaxId \nWindowMaskerTaxId \nBlastNParams.WindowMaskerDB \nWindowMaskerDB \nBlastNParams.SoftMasking \nSoftMasking \nBlastNParams.LowerCaseMasking \nLowerCaseMasking \nBlastNParams.DBSoftMask \nDBSoftMask \nBlastNParams.DBHardMask \nDBHardMask \nBlastNParams.PercIdentity \nPercIdentity \nBlastNParams.XDropUngap \nXDropUngap \nBlastNParams.XDropGap \nXDropGap \nBlastNParams.XDropGapFinal \nXDropGapFinal \nBlastNParams.MinRawGappedScore \nMinRawGappedScore \nBlastNParams.Ungapped \nUngapped","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#toCLIArgs","title":"BlastNParams.toCLIArgs","content":"BlastNParams.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#WordSize","title":"BlastNParams.WordSize","content":"BlastNParams.WordSize \nWordSize \nLength of initial exact match.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#GapOpen","title":"BlastNParams.GapOpen","content":"BlastNParams.GapOpen \nGapOpen \nCost to open a gap. See appendix \u201CBLASTN reward/penalty values\u201D.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#GapExtend","title":"BlastNParams.GapExtend","content":"BlastNParams.GapExtend \nGapExtend \nCost to extend a gap. See appendix \u201CBLASTN reward/penalty values\u201D.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#Reward","title":"BlastNParams.Reward","content":"BlastNParams.Reward \nReward \nReward for a nucleotide match.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#Penalty","title":"BlastNParams.Penalty","content":"BlastNParams.Penalty \nPenalty \nPenalty for a nucleotide mismatch.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#Strand","title":"BlastNParams.Strand","content":"BlastNParams.Strand \nStrand \nQuery strand(s) to search against database/subject. Choice of both, minus, or plus.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#Dust","title":"BlastNParams.Dust","content":"BlastNParams.Dust \nDust \nFilter query sequence with dust.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#FilteringDB","title":"BlastNParams.FilteringDB","content":"BlastNParams.FilteringDB \nFilteringDB \nMask query using the sequences in this database.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#WindowMaskerTaxId","title":"BlastNParams.WindowMaskerTaxId","content":"BlastNParams.WindowMaskerTaxId \nWindowMaskerTaxId \nEnable WindowMasker filtering using a Taxonomic ID.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#WindowMaskerDB","title":"BlastNParams.WindowMaskerDB","content":"BlastNParams.WindowMaskerDB \nWindowMaskerDB \nEnable WindowMasker filtering using this file.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#SoftMasking","title":"BlastNParams.SoftMasking","content":"BlastNParams.SoftMasking \nSoftMasking \nApply filtering locations as soft masks (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#LowerCaseMasking","title":"BlastNParams.LowerCaseMasking","content":"BlastNParams.LowerCaseMasking \nLowerCaseMasking \nUse lower case filtering in query and subject sequence(s).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#DBSoftMask","title":"BlastNParams.DBSoftMask","content":"BlastNParams.DBSoftMask \nDBSoftMask \nFiltering algorithm ID to apply to the BLAST database as soft mask (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#DBHardMask","title":"BlastNParams.DBHardMask","content":"BlastNParams.DBHardMask \nDBHardMask \nFiltering algorithm ID to apply to the BLAST database as hard mask (i.e., sequence is masked for all phases of search).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#PercIdentity","title":"BlastNParams.PercIdentity","content":"BlastNParams.PercIdentity \nPercIdentity \nPercent identity cutoff.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#XDropUngap","title":"BlastNParams.XDropUngap","content":"BlastNParams.XDropUngap \nXDropUngap \nHeuristic value (in bits) for ungapped extensions.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#XDropGap","title":"BlastNParams.XDropGap","content":"BlastNParams.XDropGap \nXDropGap \nHeuristic value (in bits) for preliminary gapped extensions.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#XDropGapFinal","title":"BlastNParams.XDropGapFinal","content":"BlastNParams.XDropGapFinal \nXDropGapFinal \n Heuristic value (in bits) for final gapped alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#MinRawGappedScore","title":"BlastNParams.MinRawGappedScore","content":"BlastNParams.MinRawGappedScore \nMinRawGappedScore \nMinimum raw gapped score to keep an alignment in the preliminary gapped and trace-back stages. Normally set based upon expect value.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnparams.html#Ungapped","title":"BlastNParams.Ungapped","content":"BlastNParams.Ungapped \nUngapped \nPerform ungapped alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparameters.html","title":"BlastNShortParameters","content":"BlastNShortParameters \n\u003Cpre\u003Euse this type to specify specific and generic command line parameters for the blastn-short task like this:\n\nlet myParams = [\n\n     BlastNShortParameters.CommonOptions [...]\n\n     BlastNShortParameters.SpecificOptions [...]\n]\u003C/pre\u003E \nBlastNShortParameters.toCLIArgs \ntoCLIArgs \nBlastNShortParameters.CommonOptions \nCommonOptions \nBlastNShortParameters.SpecificOptions \nSpecificOptions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparameters.html#toCLIArgs","title":"BlastNShortParameters.toCLIArgs","content":"BlastNShortParameters.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparameters.html#CommonOptions","title":"BlastNShortParameters.CommonOptions","content":"BlastNShortParameters.CommonOptions \nCommonOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparameters.html#SpecificOptions","title":"BlastNShortParameters.SpecificOptions","content":"BlastNShortParameters.SpecificOptions \nSpecificOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html","title":"BlastNShortParams","content":"BlastNShortParams \nDSL fo the blastn \u0027blastn-short\u0027 task command line options\nblastn-short is optimized for sequences less than 30 nucleotides. \nBlastNShortParams.toCLIArgs \ntoCLIArgs \nBlastNShortParams.WordSize \nWordSize \nBlastNShortParams.GapOpen \nGapOpen \nBlastNShortParams.GapExtend \nGapExtend \nBlastNShortParams.Reward \nReward \nBlastNShortParams.Penalty \nPenalty \nBlastNShortParams.Strand \nStrand \nBlastNShortParams.Dust \nDust \nBlastNShortParams.FilteringDB \nFilteringDB \nBlastNShortParams.WindowMaskerTaxId \nWindowMaskerTaxId \nBlastNShortParams.WindowMaskerDB \nWindowMaskerDB \nBlastNShortParams.SoftMasking \nSoftMasking \nBlastNShortParams.LowerCaseMasking \nLowerCaseMasking \nBlastNShortParams.DBSoftMask \nDBSoftMask \nBlastNShortParams.DBHardMask \nDBHardMask \nBlastNShortParams.PercIdentity \nPercIdentity \nBlastNShortParams.XDropUngap \nXDropUngap \nBlastNShortParams.XDropGap \nXDropGap \nBlastNShortParams.XDropGapFinal \nXDropGapFinal \nBlastNShortParams.MinRawGappedScore \nMinRawGappedScore \nBlastNShortParams.Ungapped \nUngapped","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#toCLIArgs","title":"BlastNShortParams.toCLIArgs","content":"BlastNShortParams.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#WordSize","title":"BlastNShortParams.WordSize","content":"BlastNShortParams.WordSize \nWordSize \nLength of initial exact match.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#GapOpen","title":"BlastNShortParams.GapOpen","content":"BlastNShortParams.GapOpen \nGapOpen \nCost to open a gap. See appendix \u201CBLASTN reward/penalty values\u201D.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#GapExtend","title":"BlastNShortParams.GapExtend","content":"BlastNShortParams.GapExtend \nGapExtend \nCost to extend a gap. See appendix \u201CBLASTN reward/penalty values\u201D.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#Reward","title":"BlastNShortParams.Reward","content":"BlastNShortParams.Reward \nReward \nReward for a nucleotide match.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#Penalty","title":"BlastNShortParams.Penalty","content":"BlastNShortParams.Penalty \nPenalty \nPenalty for a nucleotide mismatch.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#Strand","title":"BlastNShortParams.Strand","content":"BlastNShortParams.Strand \nStrand \nQuery strand(s) to search against database/subject. Choice of both, minus, or plus.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#Dust","title":"BlastNShortParams.Dust","content":"BlastNShortParams.Dust \nDust \nFilter query sequence with dust.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#FilteringDB","title":"BlastNShortParams.FilteringDB","content":"BlastNShortParams.FilteringDB \nFilteringDB \nMask query using the sequences in this database.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#WindowMaskerTaxId","title":"BlastNShortParams.WindowMaskerTaxId","content":"BlastNShortParams.WindowMaskerTaxId \nWindowMaskerTaxId \nEnable WindowMasker filtering using a Taxonomic ID.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#WindowMaskerDB","title":"BlastNShortParams.WindowMaskerDB","content":"BlastNShortParams.WindowMaskerDB \nWindowMaskerDB \nEnable WindowMasker filtering using this file.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#SoftMasking","title":"BlastNShortParams.SoftMasking","content":"BlastNShortParams.SoftMasking \nSoftMasking \nApply filtering locations as soft masks (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#LowerCaseMasking","title":"BlastNShortParams.LowerCaseMasking","content":"BlastNShortParams.LowerCaseMasking \nLowerCaseMasking \nUse lower case filtering in query and subject sequence(s).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#DBSoftMask","title":"BlastNShortParams.DBSoftMask","content":"BlastNShortParams.DBSoftMask \nDBSoftMask \nFiltering algorithm ID to apply to the BLAST database as soft mask (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#DBHardMask","title":"BlastNShortParams.DBHardMask","content":"BlastNShortParams.DBHardMask \nDBHardMask \nFiltering algorithm ID to apply to the BLAST database as hard mask (i.e., sequence is masked for all phases of search).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#PercIdentity","title":"BlastNShortParams.PercIdentity","content":"BlastNShortParams.PercIdentity \nPercIdentity \nPercent identity cutoff.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#XDropUngap","title":"BlastNShortParams.XDropUngap","content":"BlastNShortParams.XDropUngap \nXDropUngap \nHeuristic value (in bits) for ungapped extensions.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#XDropGap","title":"BlastNShortParams.XDropGap","content":"BlastNShortParams.XDropGap \nXDropGap \nHeuristic value (in bits) for preliminary gapped extensions.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#XDropGapFinal","title":"BlastNShortParams.XDropGapFinal","content":"BlastNShortParams.XDropGapFinal \nXDropGapFinal \n Heuristic value (in bits) for final gapped alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#MinRawGappedScore","title":"BlastNShortParams.MinRawGappedScore","content":"BlastNShortParams.MinRawGappedScore \nMinRawGappedScore \nMinimum raw gapped score to keep an alignment in the preliminary gapped and trace-back stages. Normally set based upon expect value.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-blastnshortparams.html#Ungapped","title":"BlastNShortParams.Ungapped","content":"BlastNShortParams.Ungapped \nUngapped \nPerform ungapped alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparameters.html","title":"DCMegablastParameters","content":"DCMegablastParameters \n\u003Cpre\u003Euse this type to specify specific and generic command line parameters for the blastn dc-megablast task like this:\n\nlet myParams = [\n\n     DCMegablastParameters.CommonOptions [...]\n\n     DCMegablastParameters.SpecificOptions [...]\n]\u003C/pre\u003E \nDCMegablastParameters.toCLIArgs \ntoCLIArgs \nDCMegablastParameters.CommonOptions \nCommonOptions \nDCMegablastParameters.SpecificOptions \nSpecificOptions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparameters.html#toCLIArgs","title":"DCMegablastParameters.toCLIArgs","content":"DCMegablastParameters.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparameters.html#CommonOptions","title":"DCMegablastParameters.CommonOptions","content":"DCMegablastParameters.CommonOptions \nCommonOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparameters.html#SpecificOptions","title":"DCMegablastParameters.SpecificOptions","content":"DCMegablastParameters.SpecificOptions \nSpecificOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html","title":"DCMegablastParams","content":"DCMegablastParams \nDSL fo the blastn \u0027dc-megablast\u0027 task command line options\ndc-megablast is typically used for inter-species comparison \nDCMegablastParams.toCLIArgs \ntoCLIArgs \nDCMegablastParams.WordSize \nWordSize \nDCMegablastParams.TemplateType \nTemplateType \nDCMegablastParams.TemplateLength \nTemplateLength \nDCMegablastParams.WindowSize \nWindowSize \nDCMegablastParams.GapOpen \nGapOpen \nDCMegablastParams.GapExtend \nGapExtend \nDCMegablastParams.Reward \nReward \nDCMegablastParams.Penalty \nPenalty \nDCMegablastParams.Strand \nStrand \nDCMegablastParams.Dust \nDust \nDCMegablastParams.FilteringDB \nFilteringDB \nDCMegablastParams.WindowMaskerTaxId \nWindowMaskerTaxId \nDCMegablastParams.WindowMaskerDB \nWindowMaskerDB \nDCMegablastParams.SoftMasking \nSoftMasking \nDCMegablastParams.LowerCaseMasking \nLowerCaseMasking \nDCMegablastParams.DBSoftMask \nDBSoftMask \nDCMegablastParams.DBHardMask \nDBHardMask \nDCMegablastParams.PercIdentity \nPercIdentity \nDCMegablastParams.XDropUngap \nXDropUngap \nDCMegablastParams.XDropGap \nXDropGap \nDCMegablastParams.XDropGapFinal \nXDropGapFinal \nDCMegablastParams.MinRawGappedScore \nMinRawGappedScore \nDCMegablastParams.Ungapped \nUngapped","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#toCLIArgs","title":"DCMegablastParams.toCLIArgs","content":"DCMegablastParams.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#WordSize","title":"DCMegablastParams.WordSize","content":"DCMegablastParams.WordSize \nWordSize \nNumber of matching nucleotides in initial match. dc-megablast allows non-consecutive letters to match.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#TemplateType","title":"DCMegablastParams.TemplateType","content":"DCMegablastParams.TemplateType \nTemplateType \nDiscontiguous MegaBLAST template type. Allowed values are coding, optimal and coding_and_optimal.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#TemplateLength","title":"DCMegablastParams.TemplateLength","content":"DCMegablastParams.TemplateLength \nTemplateLength \nDiscontiguous MegaBLAST template length.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#WindowSize","title":"DCMegablastParams.WindowSize","content":"DCMegablastParams.WindowSize \nWindowSize \nMultiple hits window size, use 0 to specify 1-hit algorithm","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#GapOpen","title":"DCMegablastParams.GapOpen","content":"DCMegablastParams.GapOpen \nGapOpen \nCost to open a gap. See appendix \u201CBLASTN reward/penalty values\u201D.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#GapExtend","title":"DCMegablastParams.GapExtend","content":"DCMegablastParams.GapExtend \nGapExtend \nCost to extend a gap. See appendix \u201CBLASTN reward/penalty values\u201D.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#Reward","title":"DCMegablastParams.Reward","content":"DCMegablastParams.Reward \nReward \nReward for a nucleotide match.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#Penalty","title":"DCMegablastParams.Penalty","content":"DCMegablastParams.Penalty \nPenalty \nPenalty for a nucleotide mismatch.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#Strand","title":"DCMegablastParams.Strand","content":"DCMegablastParams.Strand \nStrand \nQuery strand(s) to search against database/subject. Choice of both, minus, or plus.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#Dust","title":"DCMegablastParams.Dust","content":"DCMegablastParams.Dust \nDust \nFilter query sequence with dust.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#FilteringDB","title":"DCMegablastParams.FilteringDB","content":"DCMegablastParams.FilteringDB \nFilteringDB \nMask query using the sequences in this database.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#WindowMaskerTaxId","title":"DCMegablastParams.WindowMaskerTaxId","content":"DCMegablastParams.WindowMaskerTaxId \nWindowMaskerTaxId \nEnable WindowMasker filtering using a Taxonomic ID.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#WindowMaskerDB","title":"DCMegablastParams.WindowMaskerDB","content":"DCMegablastParams.WindowMaskerDB \nWindowMaskerDB \nEnable WindowMasker filtering using this file.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#SoftMasking","title":"DCMegablastParams.SoftMasking","content":"DCMegablastParams.SoftMasking \nSoftMasking \nApply filtering locations as soft masks (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#LowerCaseMasking","title":"DCMegablastParams.LowerCaseMasking","content":"DCMegablastParams.LowerCaseMasking \nLowerCaseMasking \nUse lower case filtering in query and subject sequence(s).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#DBSoftMask","title":"DCMegablastParams.DBSoftMask","content":"DCMegablastParams.DBSoftMask \nDBSoftMask \nFiltering algorithm ID to apply to the BLAST database as soft mask (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#DBHardMask","title":"DCMegablastParams.DBHardMask","content":"DCMegablastParams.DBHardMask \nDBHardMask \nFiltering algorithm ID to apply to the BLAST database as hard mask (i.e., sequence is masked for all phases of search).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#PercIdentity","title":"DCMegablastParams.PercIdentity","content":"DCMegablastParams.PercIdentity \nPercIdentity \nPercent identity cutoff.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#XDropUngap","title":"DCMegablastParams.XDropUngap","content":"DCMegablastParams.XDropUngap \nXDropUngap \nHeuristic value (in bits) for ungapped extensions.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#XDropGap","title":"DCMegablastParams.XDropGap","content":"DCMegablastParams.XDropGap \nXDropGap \nHeuristic value (in bits) for preliminary gapped extensions.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#XDropGapFinal","title":"DCMegablastParams.XDropGapFinal","content":"DCMegablastParams.XDropGapFinal \nXDropGapFinal \n Heuristic value (in bits) for final gapped alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#MinRawGappedScore","title":"DCMegablastParams.MinRawGappedScore","content":"DCMegablastParams.MinRawGappedScore \nMinRawGappedScore \nMinimum raw gapped score to keep an alignment in the preliminary gapped and trace-back stages. Normally set based upon expect value.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-dcmegablastparams.html#Ungapped","title":"DCMegablastParams.Ungapped","content":"DCMegablastParams.Ungapped \nUngapped \nPerform ungapped alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparameters.html","title":"MegablastParameters","content":"MegablastParameters \n\u003Cpre\u003Euse this type to specify specific and generic command line parameters for the blastn megablast task like this:\n\nlet myParams = [\n\n     MegablastParameters.CommonOptions [...]\n\n     MegablastParameters.SpecificOptions [...]\n]\u003C/pre\u003E \nMegablastParameters.toCLIArgs \ntoCLIArgs \nMegablastParameters.CommonOptions \nCommonOptions \nMegablastParameters.SpecificOptions \nSpecificOptions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparameters.html#toCLIArgs","title":"MegablastParameters.toCLIArgs","content":"MegablastParameters.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparameters.html#CommonOptions","title":"MegablastParameters.CommonOptions","content":"MegablastParameters.CommonOptions \nCommonOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparameters.html#SpecificOptions","title":"MegablastParameters.SpecificOptions","content":"MegablastParameters.SpecificOptions \nSpecificOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html","title":"MegablastParams","content":"MegablastParams \nDSL fo the blastn \u0027megablast\u0027 task command line options\nmegablast is usually used for very similar sequences (e.g, sequencing errors) \nMegablastParams.toCLIArgs \ntoCLIArgs \nMegablastParams.WordSize \nWordSize \nMegablastParams.GapOpen \nGapOpen \nMegablastParams.GapExtend \nGapExtend \nMegablastParams.Reward \nReward \nMegablastParams.Penalty \nPenalty \nMegablastParams.UseIndex \nUseIndex \nMegablastParams.IndexName \nIndexName \nMegablastParams.NoGreedy \nNoGreedy \nMegablastParams.Strand \nStrand \nMegablastParams.Dust \nDust \nMegablastParams.FilteringDB \nFilteringDB \nMegablastParams.WindowMaskerTaxId \nWindowMaskerTaxId \nMegablastParams.WindowMaskerDB \nWindowMaskerDB \nMegablastParams.SoftMasking \nSoftMasking \nMegablastParams.LowerCaseMasking \nLowerCaseMasking \nMegablastParams.DBSoftMask \nDBSoftMask \nMegablastParams.DBHardMask \nDBHardMask \nMegablastParams.PercIdentity \nPercIdentity \nMegablastParams.XDropUngap \nXDropUngap \nMegablastParams.XDropGap \nXDropGap \nMegablastParams.XDropGapFinal \nXDropGapFinal \nMegablastParams.MinRawGappedScore \nMinRawGappedScore \nMegablastParams.Ungapped \nUngapped","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#toCLIArgs","title":"MegablastParams.toCLIArgs","content":"MegablastParams.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#WordSize","title":"MegablastParams.WordSize","content":"MegablastParams.WordSize \nWordSize \nLength of initial exact match.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#GapOpen","title":"MegablastParams.GapOpen","content":"MegablastParams.GapOpen \nGapOpen \nCost to open a gap. See appendix \u201CBLASTN reward/penalty values\u201D.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#GapExtend","title":"MegablastParams.GapExtend","content":"MegablastParams.GapExtend \nGapExtend \ngapextend        ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#Reward","title":"MegablastParams.Reward","content":"MegablastParams.Reward \nReward \nReward for a nucleotide match.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#Penalty","title":"MegablastParams.Penalty","content":"MegablastParams.Penalty \nPenalty \nPenalty for a nucleotide mismatch.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#UseIndex","title":"MegablastParams.UseIndex","content":"MegablastParams.UseIndex \nUseIndex \nUse MegaBLAST database index. Indices may be created with the makembindex application.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#IndexName","title":"MegablastParams.IndexName","content":"MegablastParams.IndexName \nIndexName \nMegaBLAST database index name.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#NoGreedy","title":"MegablastParams.NoGreedy","content":"MegablastParams.NoGreedy \nNoGreedy \nUse non-greedy dynamic programming extension.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#Strand","title":"MegablastParams.Strand","content":"MegablastParams.Strand \nStrand \nQuery strand(s) to search against database/subject. Choice of both, minus, or plus.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#Dust","title":"MegablastParams.Dust","content":"MegablastParams.Dust \nDust \nFilter query sequence with dust.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#FilteringDB","title":"MegablastParams.FilteringDB","content":"MegablastParams.FilteringDB \nFilteringDB \nMask query using the sequences in this database.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#WindowMaskerTaxId","title":"MegablastParams.WindowMaskerTaxId","content":"MegablastParams.WindowMaskerTaxId \nWindowMaskerTaxId \nEnable WindowMasker filtering using a Taxonomic ID.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#WindowMaskerDB","title":"MegablastParams.WindowMaskerDB","content":"MegablastParams.WindowMaskerDB \nWindowMaskerDB \nEnable WindowMasker filtering using this file.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#SoftMasking","title":"MegablastParams.SoftMasking","content":"MegablastParams.SoftMasking \nSoftMasking \nApply filtering locations as soft masks (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#LowerCaseMasking","title":"MegablastParams.LowerCaseMasking","content":"MegablastParams.LowerCaseMasking \nLowerCaseMasking \nUse lower case filtering in query and subject sequence(s).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#DBSoftMask","title":"MegablastParams.DBSoftMask","content":"MegablastParams.DBSoftMask \nDBSoftMask \nFiltering algorithm ID to apply to the BLAST database as soft mask (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#DBHardMask","title":"MegablastParams.DBHardMask","content":"MegablastParams.DBHardMask \nDBHardMask \nFiltering algorithm ID to apply to the BLAST database as hard mask (i.e., sequence is masked for all phases of search).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#PercIdentity","title":"MegablastParams.PercIdentity","content":"MegablastParams.PercIdentity \nPercIdentity \nPercent identity cutoff.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#XDropUngap","title":"MegablastParams.XDropUngap","content":"MegablastParams.XDropUngap \nXDropUngap \nHeuristic value (in bits) for ungapped extensions.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#XDropGap","title":"MegablastParams.XDropGap","content":"MegablastParams.XDropGap \nXDropGap \nHeuristic value (in bits) for preliminary gapped extensions.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#XDropGapFinal","title":"MegablastParams.XDropGapFinal","content":"MegablastParams.XDropGapFinal \nXDropGapFinal \n Heuristic value (in bits) for final gapped alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#MinRawGappedScore","title":"MegablastParams.MinRawGappedScore","content":"MegablastParams.MinRawGappedScore \nMinRawGappedScore \nMinimum raw gapped score to keep an alignment in the preliminary gapped and trace-back stages. Normally set based upon expect value.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastn-megablastparams.html#Ungapped","title":"MegablastParams.Ungapped","content":"MegablastParams.Ungapped \nUngapped \nPerform ungapped alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp.html","title":"BlastP","content":"BlastP \nDSL for blastp programs\nThe blastp application searches a protein sequence against protein subject sequences or a protein database. \nThree different tasks are supported: \n\n1.) \u201Cblastp\u201D, for standard protein-protein comparisons \n\n2.) \u201Cblastp-short\u201D, optimized for query sequences shorter than 30 residues \n\n3.) \u201Cblastp-fast\u201D, a faster version that uses a larger word-size \nBlastP.BlastPFastParameters \nBlastPFastParameters \nBlastP.BlastPFastParams \nBlastPFastParams \nBlastP.BlastPParameters \nBlastPParameters \nBlastP.BlastPParams \nBlastPParams \nBlastP.BlastPShortParameters \nBlastPShortParameters \nBlastP.BlastPShortParams \nBlastPShortParams","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparameters.html","title":"BlastPFastParameters","content":"BlastPFastParameters \n\u003Cpre\u003Euse this type to specify specific and generic command line parameters for the blastp blastp-fast task like this:\n\nlet myParams = [\n\n     BlastPFastParameters.CommonOptions [...]\n\n     BlastPFastParameters.SpecificOptions [...]\n]\u003C/pre\u003E \nBlastPFastParameters.toCLIArgs \ntoCLIArgs \nBlastPFastParameters.CommonOptions \nCommonOptions \nBlastPFastParameters.SpecificOptions \nSpecificOptions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparameters.html#toCLIArgs","title":"BlastPFastParameters.toCLIArgs","content":"BlastPFastParameters.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparameters.html#CommonOptions","title":"BlastPFastParameters.CommonOptions","content":"BlastPFastParameters.CommonOptions \nCommonOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparameters.html#SpecificOptions","title":"BlastPFastParameters.SpecificOptions","content":"BlastPFastParameters.SpecificOptions \nSpecificOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html","title":"BlastPFastParams","content":"BlastPFastParams \nDSL fo the blastp \u0027blastp-fast\u0027 task command line options\nblastp-fast is a faster version that uses a larger word-size \nBlastPFastParams.toCLIArgs \ntoCLIArgs \nBlastPFastParams.WordSize \nWordSize \nBlastPFastParams.Threshold \nThreshold \nBlastPFastParams.CompBasedStats \nCompBasedStats \nBlastPFastParams.WindowSize \nWindowSize \nBlastPFastParams.Seg \nSeg \nBlastPFastParams.LowerCaseMasking \nLowerCaseMasking \nBlastPFastParams.DBSoftMask \nDBSoftMask \nBlastPFastParams.DBHardMask \nDBHardMask \nBlastPFastParams.XDropGapFinal \nXDropGapFinal \nBlastPFastParams.UseSWTback \nUseSWTback","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#toCLIArgs","title":"BlastPFastParams.toCLIArgs","content":"BlastPFastParams.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#WordSize","title":"BlastPFastParams.WordSize","content":"BlastPFastParams.WordSize \nWordSize \nWord size of initial match","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#Threshold","title":"BlastPFastParams.Threshold","content":"BlastPFastParams.Threshold \nThreshold \nMinimum score to add a word to the BLAST lookup table.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#CompBasedStats","title":"BlastPFastParams.CompBasedStats","content":"BlastPFastParams.CompBasedStats \nCompBasedStats \nUse composition-based statistics:D or d: default (equivalent to 2) 0 or F or f: no composition-based statistics","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#WindowSize","title":"BlastPFastParams.WindowSize","content":"BlastPFastParams.WindowSize \nWindowSize \nMultiple hits window size, use 0 to specify 1-hit algorithm.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#Seg","title":"BlastPFastParams.Seg","content":"BlastPFastParams.Seg \nSeg \nFilter query sequence with SEG (Format: \u0027yes\u0027, \u0027window locut hicut\u0027, or \u0027no\u0027 to disable).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#LowerCaseMasking","title":"BlastPFastParams.LowerCaseMasking","content":"BlastPFastParams.LowerCaseMasking \nLowerCaseMasking \nUse lower case filtering in query and subject sequence(s).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#DBSoftMask","title":"BlastPFastParams.DBSoftMask","content":"BlastPFastParams.DBSoftMask \nDBSoftMask \ndb_soft_mask     all    of int       none    Filtering algorithm ID to apply to the BLAST database as soft mask (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#DBHardMask","title":"BlastPFastParams.DBHardMask","content":"BlastPFastParams.DBHardMask \nDBHardMask \ndb_hard_mask     all    of int       none    Filtering algorithm ID to apply to the BLAST database as hard mask (i.e., sequence is masked for all phases of search).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#XDropGapFinal","title":"BlastPFastParams.XDropGapFinal","content":"BlastPFastParams.XDropGapFinal \nXDropGapFinal \nxdrop_gap_final  all    of float     25    Heuristic value (in bits) for final gapped alignment/","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpfastparams.html#UseSWTback","title":"BlastPFastParams.UseSWTback","content":"BlastPFastParams.UseSWTback \nUseSWTback \nuse_sw_tback     all                 N/A    Compute locally optimal Smith-Waterman alignments?","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparameters.html","title":"BlastPParameters","content":"BlastPParameters \n\u003Cpre\u003Euse this type to specify specific and generic command line parameters for the blastp task like this:\n\nlet myParams = [\n\n     BlastPParameters.CommonOptions [...]\n\n     BlastPParameters.SpecificOptions [...]\n]\u003C/pre\u003E \nBlastPParameters.toCLIArgs \ntoCLIArgs \nBlastPParameters.CommonOptions \nCommonOptions \nBlastPParameters.SpecificOptions \nSpecificOptions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparameters.html#toCLIArgs","title":"BlastPParameters.toCLIArgs","content":"BlastPParameters.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparameters.html#CommonOptions","title":"BlastPParameters.CommonOptions","content":"BlastPParameters.CommonOptions \nCommonOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparameters.html#SpecificOptions","title":"BlastPParameters.SpecificOptions","content":"BlastPParameters.SpecificOptions \nSpecificOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html","title":"BlastPParams","content":"BlastPParams \nDSL fo the blastp \u0027blastp\u0027 task command line options\nblastp is used for standard protein-protein comparisons \nBlastPParams.toCLIArgs \ntoCLIArgs \nBlastPParams.WordSize \nWordSize \nBlastPParams.GapOpen \nGapOpen \nBlastPParams.GapExtend \nGapExtend \nBlastPParams.Matrix \nMatrix \nBlastPParams.Threshold \nThreshold \nBlastPParams.CompBasedStats \nCompBasedStats \nBlastPParams.SoftMasking \nSoftMasking \nBlastPParams.WindowSize \nWindowSize \nBlastPParams.Seg \nSeg \nBlastPParams.LowerCaseMasking \nLowerCaseMasking \nBlastPParams.DBSoftMask \nDBSoftMask \nBlastPParams.DBHardMask \nDBHardMask \nBlastPParams.XDropGapFinal \nXDropGapFinal \nBlastPParams.UseSWTback \nUseSWTback","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#toCLIArgs","title":"BlastPParams.toCLIArgs","content":"BlastPParams.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#WordSize","title":"BlastPParams.WordSize","content":"BlastPParams.WordSize \nWordSize \nWord size of initial match. Valid word sizes are 2-7.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#GapOpen","title":"BlastPParams.GapOpen","content":"BlastPParams.GapOpen \nGapOpen \nCost to open a gap.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#GapExtend","title":"BlastPParams.GapExtend","content":"BlastPParams.GapExtend \nGapExtend \nCost to extend a gap.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#Matrix","title":"BlastPParams.Matrix","content":"BlastPParams.Matrix \nMatrix \nScoring matrix name.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#Threshold","title":"BlastPParams.Threshold","content":"BlastPParams.Threshold \nThreshold \nMinimum score to add a word to the BLAST lookup table.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#CompBasedStats","title":"BlastPParams.CompBasedStats","content":"BlastPParams.CompBasedStats \nCompBasedStats \nUse composition-based statistics: D or d: default (equivalent to 2) 0 or F or f: no composition-based statistics 21:902-911, 2005, conditioned on sequence properties3: Composition-based score adjustment as in Bioinformatics 21:902-911, 2005, unconditionally","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#SoftMasking","title":"BlastPParams.SoftMasking","content":"BlastPParams.SoftMasking \nSoftMasking \nApply filtering locations as soft masks (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#WindowSize","title":"BlastPParams.WindowSize","content":"BlastPParams.WindowSize \nWindowSize \nMultiple hits window size, use 0 to specify 1-hit algorithm.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#Seg","title":"BlastPParams.Seg","content":"BlastPParams.Seg \nSeg \nFilter query sequence with SEG (Format: \u0027yes\u0027, \u0027window locut hicut\u0027, or \u0027no\u0027 to disable).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#LowerCaseMasking","title":"BlastPParams.LowerCaseMasking","content":"BlastPParams.LowerCaseMasking \nLowerCaseMasking \nUse lower case filtering in query and subject sequence(s).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#DBSoftMask","title":"BlastPParams.DBSoftMask","content":"BlastPParams.DBSoftMask \nDBSoftMask \ndb_soft_mask     all    of int       none    Filtering algorithm ID to apply to the BLAST database as soft mask (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#DBHardMask","title":"BlastPParams.DBHardMask","content":"BlastPParams.DBHardMask \nDBHardMask \ndb_hard_mask     all    of int       none    Filtering algorithm ID to apply to the BLAST database as hard mask (i.e., sequence is masked for all phases of search).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#XDropGapFinal","title":"BlastPParams.XDropGapFinal","content":"BlastPParams.XDropGapFinal \nXDropGapFinal \nxdrop_gap_final  all    of float     25    Heuristic value (in bits) for final gapped alignment/","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpparams.html#UseSWTback","title":"BlastPParams.UseSWTback","content":"BlastPParams.UseSWTback \nUseSWTback \nuse_sw_tback     all                 N/A    Compute locally optimal Smith-Waterman alignments?","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparameters.html","title":"BlastPShortParameters","content":"BlastPShortParameters \n\u003Cpre\u003Euse this type to specify specific and generic command line parameters for the blastp blastp-short task like this:\n\nlet myParams = [\n\n     BlastPShortParameters.CommonOptions [...]\n\n     BlastPShortParameters.SpecificOptions [...]\n]\u003C/pre\u003E \nBlastPShortParameters.toCLIArgs \ntoCLIArgs \nBlastPShortParameters.CommonOptions \nCommonOptions \nBlastPShortParameters.SpecificOptions \nSpecificOptions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparameters.html#toCLIArgs","title":"BlastPShortParameters.toCLIArgs","content":"BlastPShortParameters.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparameters.html#CommonOptions","title":"BlastPShortParameters.CommonOptions","content":"BlastPShortParameters.CommonOptions \nCommonOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparameters.html#SpecificOptions","title":"BlastPShortParameters.SpecificOptions","content":"BlastPShortParameters.SpecificOptions \nSpecificOptions \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html","title":"BlastPShortParams","content":"BlastPShortParams \nDSL fo the blastp \u0027blastp-short\u0027 task command line options\nblastp-short is optimized for query sequences shorter than 30 residues \nBlastPShortParams.toCLIArgs \ntoCLIArgs \nBlastPShortParams.WordSize \nWordSize \nBlastPShortParams.GapOpen \nGapOpen \nBlastPShortParams.GapExtend \nGapExtend \nBlastPShortParams.Matrix \nMatrix \nBlastPShortParams.Threshold \nThreshold \nBlastPShortParams.CompBasedStats \nCompBasedStats \nBlastPShortParams.WindowSize \nWindowSize \nBlastPShortParams.Seg \nSeg \nBlastPShortParams.LowerCaseMasking \nLowerCaseMasking \nBlastPShortParams.DBSoftMask \nDBSoftMask \nBlastPShortParams.DBHardMask \nDBHardMask \nBlastPShortParams.XDropGapFinal \nXDropGapFinal \nBlastPShortParams.UseSWTback \nUseSWTback","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#toCLIArgs","title":"BlastPShortParams.toCLIArgs","content":"BlastPShortParams.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#WordSize","title":"BlastPShortParams.WordSize","content":"BlastPShortParams.WordSize \nWordSize \nWord size of initial match.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#GapOpen","title":"BlastPShortParams.GapOpen","content":"BlastPShortParams.GapOpen \nGapOpen \nCost to open a gap.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#GapExtend","title":"BlastPShortParams.GapExtend","content":"BlastPShortParams.GapExtend \nGapExtend \nCost to extend a gap.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#Matrix","title":"BlastPShortParams.Matrix","content":"BlastPShortParams.Matrix \nMatrix \nScoring matrix name.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#Threshold","title":"BlastPShortParams.Threshold","content":"BlastPShortParams.Threshold \nThreshold \nthresholdMinimum score to add a word to the BLAST lookup table.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#CompBasedStats","title":"BlastPShortParams.CompBasedStats","content":"BlastPShortParams.CompBasedStats \nCompBasedStats \nUse composition-based statistics : D or d: default (equivalent to 2) 0 or F or f: no composition-based statistics 1: Composition-based statistics as in NAR 29:2994-3005, 2001 2 or T or t : Composition-based score adjustment as in Bioinformatics 21:902-911, 2005, conditioned on sequence properties 3: Composition-based score adjustment as in Bioinformatics 21:902-911, 2005, unconditionally","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#WindowSize","title":"BlastPShortParams.WindowSize","content":"BlastPShortParams.WindowSize \nWindowSize \nMultiple hits window size, use 0 to specify 1-hit algorithm.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#Seg","title":"BlastPShortParams.Seg","content":"BlastPShortParams.Seg \nSeg \nFilter query sequence with SEG (Format: \u0027yes\u0027, \u0027window locut hicut\u0027, or \u0027no\u0027 to disable).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#LowerCaseMasking","title":"BlastPShortParams.LowerCaseMasking","content":"BlastPShortParams.LowerCaseMasking \nLowerCaseMasking \nUse lower case filtering in query and subject sequence(s).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#DBSoftMask","title":"BlastPShortParams.DBSoftMask","content":"BlastPShortParams.DBSoftMask \nDBSoftMask \nFiltering algorithm ID to apply to the BLAST database as soft mask (i.e., only for finding initial matches).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#DBHardMask","title":"BlastPShortParams.DBHardMask","content":"BlastPShortParams.DBHardMask \nDBHardMask \nFiltering algorithm ID to apply to the BLAST database as hard mask (i.e., sequence is masked for all phases of search).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#XDropGapFinal","title":"BlastPShortParams.XDropGapFinal","content":"BlastPShortParams.XDropGapFinal \nXDropGapFinal \nHeuristic value (in bits) for final gapped alignment/","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastp-blastpshortparams.html#UseSWTback","title":"BlastPShortParams.UseSWTback","content":"BlastPShortParams.UseSWTback \nUseSWTback \nCompute locally optimal Smith-Waterman alignments?","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html","title":"BlastParams","content":"BlastParams \nDSL for command line parameters that are common to all blast applications \nBlastParams.toCLIArgs \ntoCLIArgs \nBlastParams.SearchDB \nSearchDB \nBlastParams.Query \nQuery \nBlastParams.Output \nOutput \nBlastParams.OutputType \nOutputType \nBlastParams.OutputTypeCustom \nOutputTypeCustom \nBlastParams.NumThreads \nNumThreads \nBlastParams.MaxHits \nMaxHits \nBlastParams.QueryLocation \nQueryLocation \nBlastParams.EValue \nEValue \nBlastParams.Subject \nSubject \nBlastParams.SubjectLocation \nSubjectLocation \nBlastParams.ShowGIs \nShowGIs \nBlastParams.Num_Descriptions \nNum_Descriptions \nBlastParams.NumAlignments \nNumAlignments \nBlastParams.MaxHSPs \nMaxHSPs \nBlastParams.HTML \nHTML \nBlastParams.GIList \nGIList \nBlastParams.NegativeGIList \nNegativeGIList \nBlastParams.EntrezQuery \nEntrezQuery \nBlastParams.CullingLimit \nCullingLimit \nBlastParams.BestHitOverhang \nBestHitOverhang \nBlastParams.BestHitScoreEdge \nBestHitScoreEdge \nBlastParams.DBSize \nDBSize \nBlastParams.SearchSpaceLength \nSearchSpaceLength \nBlastParams.ImportSearchStrategy \nImportSearchStrategy \nBlastParams.ExportSearchStrategy \nExportSearchStrategy \nBlastParams.ParseDeflines \nParseDeflines \nBlastParams.Remote \nRemote","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#toCLIArgs","title":"BlastParams.toCLIArgs","content":"BlastParams.toCLIArgs \ntoCLIArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#SearchDB","title":"BlastParams.SearchDB","content":"BlastParams.SearchDB \nSearchDB \nBLAST database name.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#Query","title":"BlastParams.Query","content":"BlastParams.Query \nQuery \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#Output","title":"BlastParams.Output","content":"BlastParams.Output \nOutput \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#OutputType","title":"BlastParams.OutputType","content":"BlastParams.OutputType \nOutputType \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#OutputTypeCustom","title":"BlastParams.OutputTypeCustom","content":"BlastParams.OutputTypeCustom \nOutputTypeCustom \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#NumThreads","title":"BlastParams.NumThreads","content":"BlastParams.NumThreads \nNumThreads \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#MaxHits","title":"BlastParams.MaxHits","content":"BlastParams.MaxHits \nMaxHits \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#QueryLocation","title":"BlastParams.QueryLocation","content":"BlastParams.QueryLocation \nQueryLocation \nLocation on the query sequence (Format: start-stop)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#EValue","title":"BlastParams.EValue","content":"BlastParams.EValue \nEValue \nExpect value (E) for saving hits","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#Subject","title":"BlastParams.Subject","content":"BlastParams.Subject \nSubject \nFile with subject sequence(s) to search.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#SubjectLocation","title":"BlastParams.SubjectLocation","content":"BlastParams.SubjectLocation \nSubjectLocation \nLocation on the subject sequence (Format: start-stop).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#ShowGIs","title":"BlastParams.ShowGIs","content":"BlastParams.ShowGIs \nShowGIs \nShow NCBI GIs in report.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#Num_Descriptions","title":"BlastParams.Num_Descriptions","content":"BlastParams.Num_Descriptions \nNum_Descriptions \nShow one-line descriptions for this number of database sequences.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#NumAlignments","title":"BlastParams.NumAlignments","content":"BlastParams.NumAlignments \nNumAlignments \nShow alignments for this number of database sequences.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#MaxHSPs","title":"BlastParams.MaxHSPs","content":"BlastParams.MaxHSPs \nMaxHSPs \nMaximum number of HSPs (alignments) to keep for any single query-subject pair. The HSPs shown will be the best as judged by expect value. This number should be an int that is one or greater. If this option is not set, BLAST shows all HSPs meeting the expect value criteria. Setting it to one will show only the best HSP for every query-subject pair","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#HTML","title":"BlastParams.HTML","content":"BlastParams.HTML \nHTML \nProduce HTML output","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#GIList","title":"BlastParams.GIList","content":"BlastParams.GIList \nGIList \nRestrict search of database to GI\u2019s listed in this file. Local searches only.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#NegativeGIList","title":"BlastParams.NegativeGIList","content":"BlastParams.NegativeGIList \nNegativeGIList \nRestrict search of database to everything except the GI\u2019s listed in this file. Local searches only.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#EntrezQuery","title":"BlastParams.EntrezQuery","content":"BlastParams.EntrezQuery \nEntrezQuery \nRestrict search with the given Entrez query. Remote searches only.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#CullingLimit","title":"BlastParams.CullingLimit","content":"BlastParams.CullingLimit \nCullingLimit \nDelete a hit that is enveloped by at least this many higher-scoring hits.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#BestHitOverhang","title":"BlastParams.BestHitOverhang","content":"BlastParams.BestHitOverhang \nBestHitOverhang \nBest Hit algorithm overhang value (recommended value: 0.1)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#BestHitScoreEdge","title":"BlastParams.BestHitScoreEdge","content":"BlastParams.BestHitScoreEdge \nBestHitScoreEdge \nBest Hit algorithm score edge value (recommended value: 0.1)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#DBSize","title":"BlastParams.DBSize","content":"BlastParams.DBSize \nDBSize \nEffective size of the database","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#SearchSpaceLength","title":"BlastParams.SearchSpaceLength","content":"BlastParams.SearchSpaceLength \nSearchSpaceLength \nEffective length of the search space","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#ImportSearchStrategy","title":"BlastParams.ImportSearchStrategy","content":"BlastParams.ImportSearchStrategy \nImportSearchStrategy \nSearch strategy file to read.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#ExportSearchStrategy","title":"BlastParams.ExportSearchStrategy","content":"BlastParams.ExportSearchStrategy \nExportSearchStrategy \nRecord search strategy to this file.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#ParseDeflines","title":"BlastParams.ParseDeflines","content":"BlastParams.ParseDeflines \nParseDeflines \nParse query and subject bar delimited sequence identifiers (e.g., gi|129295).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-blastparams.html#Remote","title":"BlastParams.Remote","content":"BlastParams.Remote \nRemote \nExecute search on NCBI servers?","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html","title":"CBlastResult","content":"CBlastResult \n \nCBlastResult.Query_SeqId \nQuery_SeqId \nCBlastResult.Query_GI \nQuery_GI \nCBlastResult.Query_Accesion \nQuery_Accesion \nCBlastResult.Query_Accesion_Version \nQuery_Accesion_Version \nCBlastResult.Query_Length \nQuery_Length \nCBlastResult.Subject_SeqId \nSubject_SeqId \nCBlastResult.Subject_All_SeqIds \nSubject_All_SeqIds \nCBlastResult.Subject_GI \nSubject_GI \nCBlastResult.Subject_All_GIs \nSubject_All_GIs \nCBlastResult.Subject_Accession \nSubject_Accession \nCBlastResult.Subject_Accession_Version \nSubject_Accession_Version \nCBlastResult.Subject_All_Accession \nSubject_All_Accession \nCBlastResult.Subject_Length \nSubject_Length \nCBlastResult.Query_StartOfAlignment \nQuery_StartOfAlignment \nCBlastResult.Query_EndOfAlignment \nQuery_EndOfAlignment \nCBlastResult.Subject_StartOfAlignment \nSubject_StartOfAlignment \nCBlastResult.Subject_EndOfAlignment \nSubject_EndOfAlignment \nCBlastResult.Query_AlignedPartOf \nQuery_AlignedPartOf \nCBlastResult.Subject_AlignedPartOf \nSubject_AlignedPartOf \nCBlastResult.Evalue \nEvalue \nCBlastResult.Bitscore \nBitscore \nCBlastResult.RawScore \nRawScore \nCBlastResult.AlignmentLength \nAlignmentLength \nCBlastResult.Identity \nIdentity \nCBlastResult.IdentityCount \nIdentityCount \nCBlastResult.MismatchCount \nMismatchCount \nCBlastResult.PositiveScoringMatchCount \nPositiveScoringMatchCount \nCBlastResult.GapOpeningCount \nGapOpeningCount \nCBlastResult.GapCount \nGapCount \nCBlastResult.PositiveScoringMatch \nPositiveScoringMatch \nCBlastResult.Frames \nFrames \nCBlastResult.Query_Frames \nQuery_Frames \nCBlastResult.Subject_Frames \nSubject_Frames \nCBlastResult.BTOP \nBTOP \nCBlastResult.Subject_TaxonomyIDs \nSubject_TaxonomyIDs \nCBlastResult.Subject_Scientific_Names \nSubject_Scientific_Names \nCBlastResult.Subject_Common_Names \nSubject_Common_Names \nCBlastResult.Subject_Blast_Names \nSubject_Blast_Names \nCBlastResult.Subject_Super_Kingdoms \nSubject_Super_Kingdoms \nCBlastResult.Subject_Title \nSubject_Title \nCBlastResult.Subject_All_Titles \nSubject_All_Titles \nCBlastResult.Subject_Strand \nSubject_Strand \nCBlastResult.Query_CoveragePerSubject \nQuery_CoveragePerSubject \nCBlastResult.Query_CoveragePerHSP \nQuery_CoveragePerHSP","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_SeqId","title":"CBlastResult.Query_SeqId","content":"CBlastResult.Query_SeqId \nQuery_SeqId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_GI","title":"CBlastResult.Query_GI","content":"CBlastResult.Query_GI \nQuery_GI \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_Accesion","title":"CBlastResult.Query_Accesion","content":"CBlastResult.Query_Accesion \nQuery_Accesion \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_Accesion_Version","title":"CBlastResult.Query_Accesion_Version","content":"CBlastResult.Query_Accesion_Version \nQuery_Accesion_Version \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_Length","title":"CBlastResult.Query_Length","content":"CBlastResult.Query_Length \nQuery_Length \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_SeqId","title":"CBlastResult.Subject_SeqId","content":"CBlastResult.Subject_SeqId \nSubject_SeqId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_All_SeqIds","title":"CBlastResult.Subject_All_SeqIds","content":"CBlastResult.Subject_All_SeqIds \nSubject_All_SeqIds \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_GI","title":"CBlastResult.Subject_GI","content":"CBlastResult.Subject_GI \nSubject_GI \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_All_GIs","title":"CBlastResult.Subject_All_GIs","content":"CBlastResult.Subject_All_GIs \nSubject_All_GIs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Accession","title":"CBlastResult.Subject_Accession","content":"CBlastResult.Subject_Accession \nSubject_Accession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Accession_Version","title":"CBlastResult.Subject_Accession_Version","content":"CBlastResult.Subject_Accession_Version \nSubject_Accession_Version \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_All_Accession","title":"CBlastResult.Subject_All_Accession","content":"CBlastResult.Subject_All_Accession \nSubject_All_Accession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Length","title":"CBlastResult.Subject_Length","content":"CBlastResult.Subject_Length \nSubject_Length \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_StartOfAlignment","title":"CBlastResult.Query_StartOfAlignment","content":"CBlastResult.Query_StartOfAlignment \nQuery_StartOfAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_EndOfAlignment","title":"CBlastResult.Query_EndOfAlignment","content":"CBlastResult.Query_EndOfAlignment \nQuery_EndOfAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_StartOfAlignment","title":"CBlastResult.Subject_StartOfAlignment","content":"CBlastResult.Subject_StartOfAlignment \nSubject_StartOfAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_EndOfAlignment","title":"CBlastResult.Subject_EndOfAlignment","content":"CBlastResult.Subject_EndOfAlignment \nSubject_EndOfAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_AlignedPartOf","title":"CBlastResult.Query_AlignedPartOf","content":"CBlastResult.Query_AlignedPartOf \nQuery_AlignedPartOf \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_AlignedPartOf","title":"CBlastResult.Subject_AlignedPartOf","content":"CBlastResult.Subject_AlignedPartOf \nSubject_AlignedPartOf \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Evalue","title":"CBlastResult.Evalue","content":"CBlastResult.Evalue \nEvalue \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Bitscore","title":"CBlastResult.Bitscore","content":"CBlastResult.Bitscore \nBitscore \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#RawScore","title":"CBlastResult.RawScore","content":"CBlastResult.RawScore \nRawScore \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#AlignmentLength","title":"CBlastResult.AlignmentLength","content":"CBlastResult.AlignmentLength \nAlignmentLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Identity","title":"CBlastResult.Identity","content":"CBlastResult.Identity \nIdentity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#IdentityCount","title":"CBlastResult.IdentityCount","content":"CBlastResult.IdentityCount \nIdentityCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#MismatchCount","title":"CBlastResult.MismatchCount","content":"CBlastResult.MismatchCount \nMismatchCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#PositiveScoringMatchCount","title":"CBlastResult.PositiveScoringMatchCount","content":"CBlastResult.PositiveScoringMatchCount \nPositiveScoringMatchCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#GapOpeningCount","title":"CBlastResult.GapOpeningCount","content":"CBlastResult.GapOpeningCount \nGapOpeningCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#GapCount","title":"CBlastResult.GapCount","content":"CBlastResult.GapCount \nGapCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#PositiveScoringMatch","title":"CBlastResult.PositiveScoringMatch","content":"CBlastResult.PositiveScoringMatch \nPositiveScoringMatch \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Frames","title":"CBlastResult.Frames","content":"CBlastResult.Frames \nFrames \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_Frames","title":"CBlastResult.Query_Frames","content":"CBlastResult.Query_Frames \nQuery_Frames \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Frames","title":"CBlastResult.Subject_Frames","content":"CBlastResult.Subject_Frames \nSubject_Frames \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#BTOP","title":"CBlastResult.BTOP","content":"CBlastResult.BTOP \nBTOP \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_TaxonomyIDs","title":"CBlastResult.Subject_TaxonomyIDs","content":"CBlastResult.Subject_TaxonomyIDs \nSubject_TaxonomyIDs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Scientific_Names","title":"CBlastResult.Subject_Scientific_Names","content":"CBlastResult.Subject_Scientific_Names \nSubject_Scientific_Names \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Common_Names","title":"CBlastResult.Subject_Common_Names","content":"CBlastResult.Subject_Common_Names \nSubject_Common_Names \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Blast_Names","title":"CBlastResult.Subject_Blast_Names","content":"CBlastResult.Subject_Blast_Names \nSubject_Blast_Names \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Super_Kingdoms","title":"CBlastResult.Subject_Super_Kingdoms","content":"CBlastResult.Subject_Super_Kingdoms \nSubject_Super_Kingdoms \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Title","title":"CBlastResult.Subject_Title","content":"CBlastResult.Subject_Title \nSubject_Title \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_All_Titles","title":"CBlastResult.Subject_All_Titles","content":"CBlastResult.Subject_All_Titles \nSubject_All_Titles \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Subject_Strand","title":"CBlastResult.Subject_Strand","content":"CBlastResult.Subject_Strand \nSubject_Strand \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_CoveragePerSubject","title":"CBlastResult.Query_CoveragePerSubject","content":"CBlastResult.Query_CoveragePerSubject \nQuery_CoveragePerSubject \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-cblastresult.html#Query_CoveragePerHSP","title":"CBlastResult.Query_CoveragePerHSP","content":"CBlastResult.Query_CoveragePerHSP \nQuery_CoveragePerHSP \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-dbtype.html","title":"DbType","content":"DbType \nMolecule type of input, values can be nucl or prot \nDbType.toCLIString \ntoCLIString \nDbType.Protein \nProtein \nDbType.Nucleotide \nNucleotide","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-dbtype.html#toCLIString","title":"DbType.toCLIString","content":"DbType.toCLIString \ntoCLIString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-dbtype.html#Protein","title":"DbType.Protein","content":"DbType.Protein \nProtein \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-dbtype.html#Nucleotide","title":"DbType.Nucleotide","content":"DbType.Nucleotide \nNucleotide \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbinputtype.html","title":"MakeBlastDBInputType","content":"MakeBlastDBInputType \nInput file type for makeblastdb \nMakeBlastDBInputType.toCLIString \ntoCLIString \nMakeBlastDBInputType.Fasta \nFasta \nMakeBlastDBInputType.Blastdb \nBlastdb \nMakeBlastDBInputType.Asn1Txt \nAsn1Txt \nMakeBlastDBInputType.ASN1Bin \nASN1Bin","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbinputtype.html#toCLIString","title":"MakeBlastDBInputType.toCLIString","content":"MakeBlastDBInputType.toCLIString \ntoCLIString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbinputtype.html#Fasta","title":"MakeBlastDBInputType.Fasta","content":"MakeBlastDBInputType.Fasta \nFasta \nfasta: for FASTA file(s)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbinputtype.html#Blastdb","title":"MakeBlastDBInputType.Blastdb","content":"MakeBlastDBInputType.Blastdb \nBlastdb \nblastdb: for BLAST database(s)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbinputtype.html#Asn1Txt","title":"MakeBlastDBInputType.Asn1Txt","content":"MakeBlastDBInputType.Asn1Txt \nAsn1Txt \nasn1_txt: for Seq-entries in text ASN.1 format","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbinputtype.html#ASN1Bin","title":"MakeBlastDBInputType.ASN1Bin","content":"MakeBlastDBInputType.ASN1Bin \nASN1Bin \nasn1_bin: for Seq-entries in binary ASN.1 format","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html","title":"MakeBlastDbParams","content":"MakeBlastDbParams \nDSL for command line arguments for the NCBI makeblastdb tool \nMakeBlastDbParams.toCLIArgs \ntoCLIArgs \nMakeBlastDbParams.Input \nInput \nMakeBlastDbParams.InputType \nInputType \nMakeBlastDbParams.DbType \nDbType \nMakeBlastDbParams.Title \nTitle \nMakeBlastDbParams.ParseSeqIds \nParseSeqIds \nMakeBlastDbParams.HashIndex \nHashIndex \nMakeBlastDbParams.MaskData \nMaskData \nMakeBlastDbParams.Output \nOutput \nMakeBlastDbParams.MaxFileSize \nMaxFileSize \nMakeBlastDbParams.TaxId \nTaxId \nMakeBlastDbParams.TaxIdMapFile \nTaxIdMapFile \nMakeBlastDbParams.Logfile \nLogfile","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#toCLIArgs","title":"MakeBlastDbParams.toCLIArgs","content":"MakeBlastDbParams.toCLIArgs \ntoCLIArgs \nreturns the string form of command line argument DSL for makeblastdb","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#Input","title":"MakeBlastDbParams.Input","content":"MakeBlastDbParams.Input \nInput \nInput file/database name","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#InputType","title":"MakeBlastDbParams.InputType","content":"MakeBlastDbParams.InputType \nInputType \nInput file type for makeblastdb","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#DbType","title":"MakeBlastDbParams.DbType","content":"MakeBlastDbParams.DbType \nDbType \nMolecule type of input, values can be nucl or prot","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#Title","title":"MakeBlastDbParams.Title","content":"MakeBlastDbParams.Title \nTitle \nTitle for BLAST database. If not set, the input file name will be used","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#ParseSeqIds","title":"MakeBlastDbParams.ParseSeqIds","content":"MakeBlastDbParams.ParseSeqIds \nParseSeqIds \nParse bar delimited sequence identifiers (e.g., gi|129295) in FASTA input","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#HashIndex","title":"MakeBlastDbParams.HashIndex","content":"MakeBlastDbParams.HashIndex \nHashIndex \nCreate index of sequence hash values","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#MaskData","title":"MakeBlastDbParams.MaskData","content":"MakeBlastDbParams.MaskData \nMaskData \nComma-separated list of input files containing masking data as produced by NCBI masking applications (e.g. dustmasker, segmasker, windowmasker","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#Output","title":"MakeBlastDbParams.Output","content":"MakeBlastDbParams.Output \nOutput \nName of BLAST database to be created. Input file name is used if none provided. This field is required if input consists of multiple files","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#MaxFileSize","title":"MakeBlastDbParams.MaxFileSize","content":"MakeBlastDbParams.MaxFileSize \nMaxFileSize \nMaximum file size to use for BLAST database. 4GB is the maximum supported by the database structure","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#TaxId","title":"MakeBlastDbParams.TaxId","content":"MakeBlastDbParams.TaxId \nTaxId \nTaxonomy ID to assign to all sequences.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#TaxIdMapFile","title":"MakeBlastDbParams.TaxIdMapFile","content":"MakeBlastDbParams.TaxIdMapFile \nTaxIdMapFile \nFile with two columns mapping sequence ID to the taxonomy ID. The first column is the sequence ID represented as one of:\n\n1\nfasta with accessions (e.g., emb|X17276.1|)\n\n2\nfasta with GI (e.g., gi|4)\n\n3\nGI as a bare number (e.g., 4)\n\n4\nA local ID. The local ID must be prefixed with \u0022lcl\u0022 (e.g., lcl|4).\nThe second column should be the NCBI taxonomy ID (e.g., 9606 for human).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-makeblastdbparams.html#Logfile","title":"MakeBlastDbParams.Logfile","content":"MakeBlastDbParams.Logfile \nLogfile \nProgram log file (default is stderr).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html","title":"OutputCustom","content":"OutputCustom \nOutputType options Tabular, TabularWithComments, and CSV can be additionally configured to produce a custom format specified by space delimited format specifiers.\nWhen not provided, the default value is:\n\u0027qseqid sseqid pident length mismatch gapopen qstart qend sstart send\nevalue bitscore\u0027, which is equivalent to the keyword \u0027std\u0027 \nOutputCustom.toCLIString \ntoCLIString \nOutputCustom.Query_SeqId \nQuery_SeqId \nOutputCustom.Query_GI \nQuery_GI \nOutputCustom.Query_Accesion \nQuery_Accesion \nOutputCustom.Query_Accesion_Version \nQuery_Accesion_Version \nOutputCustom.Query_Length \nQuery_Length \nOutputCustom.Subject_SeqId \nSubject_SeqId \nOutputCustom.Subject_All_SeqIds \nSubject_All_SeqIds \nOutputCustom.Subject_GI \nSubject_GI \nOutputCustom.Subject_All_GIs \nSubject_All_GIs \nOutputCustom.Subject_Accession \nSubject_Accession \nOutputCustom.Subject_Accession_Version \nSubject_Accession_Version \nOutputCustom.Subject_All_Accession \nSubject_All_Accession \nOutputCustom.Subject_Length \nSubject_Length \nOutputCustom.Query_StartOfAlignment \nQuery_StartOfAlignment \nOutputCustom.Query_EndOfAlignment \nQuery_EndOfAlignment \nOutputCustom.Subject_StartOfAlignment \nSubject_StartOfAlignment \nOutputCustom.Subject_EndOfAlignment \nSubject_EndOfAlignment \nOutputCustom.Query_AlignedPartOf \nQuery_AlignedPartOf \nOutputCustom.Subject_AlignedPartOf \nSubject_AlignedPartOf \nOutputCustom.Evalue \nEvalue \nOutputCustom.Bitscore \nBitscore \nOutputCustom.RawScore \nRawScore \nOutputCustom.AlignmentLength \nAlignmentLength \nOutputCustom.Identity \nIdentity \nOutputCustom.IdentityCount \nIdentityCount \nOutputCustom.MismatchCount \nMismatchCount \nOutputCustom.PositiveScoringMatchCount \nPositiveScoringMatchCount \nOutputCustom.GapOpeningCount \nGapOpeningCount \nOutputCustom.GapCount \nGapCount \nOutputCustom.PositiveScoringMatch \nPositiveScoringMatch \nOutputCustom.Frames \nFrames \nOutputCustom.Query_Frames \nQuery_Frames \nOutputCustom.Subject_Frames \nSubject_Frames \nOutputCustom.BTOP \nBTOP \nOutputCustom.Subject_TaxonomyIDs \nSubject_TaxonomyIDs \nOutputCustom.Subject_Scientific_Names \nSubject_Scientific_Names \nOutputCustom.Subject_Common_Names \nSubject_Common_Names \nOutputCustom.Subject_Blast_Names \nSubject_Blast_Names \nOutputCustom.Subject_Super_Kingdoms \nSubject_Super_Kingdoms \nOutputCustom.Subject_Title \nSubject_Title \nOutputCustom.Subject_All_Titles \nSubject_All_Titles \nOutputCustom.Subject_Strand \nSubject_Strand \nOutputCustom.Query_CoveragePerSubject \nQuery_CoveragePerSubject \nOutputCustom.Query_CoveragePerHSP \nQuery_CoveragePerHSP","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#toCLIString","title":"OutputCustom.toCLIString","content":"OutputCustom.toCLIString \ntoCLIString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_SeqId","title":"OutputCustom.Query_SeqId","content":"OutputCustom.Query_SeqId \nQuery_SeqId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_GI","title":"OutputCustom.Query_GI","content":"OutputCustom.Query_GI \nQuery_GI \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_Accesion","title":"OutputCustom.Query_Accesion","content":"OutputCustom.Query_Accesion \nQuery_Accesion \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_Accesion_Version","title":"OutputCustom.Query_Accesion_Version","content":"OutputCustom.Query_Accesion_Version \nQuery_Accesion_Version \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_Length","title":"OutputCustom.Query_Length","content":"OutputCustom.Query_Length \nQuery_Length \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_SeqId","title":"OutputCustom.Subject_SeqId","content":"OutputCustom.Subject_SeqId \nSubject_SeqId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_All_SeqIds","title":"OutputCustom.Subject_All_SeqIds","content":"OutputCustom.Subject_All_SeqIds \nSubject_All_SeqIds \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_GI","title":"OutputCustom.Subject_GI","content":"OutputCustom.Subject_GI \nSubject_GI \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_All_GIs","title":"OutputCustom.Subject_All_GIs","content":"OutputCustom.Subject_All_GIs \nSubject_All_GIs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Accession","title":"OutputCustom.Subject_Accession","content":"OutputCustom.Subject_Accession \nSubject_Accession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Accession_Version","title":"OutputCustom.Subject_Accession_Version","content":"OutputCustom.Subject_Accession_Version \nSubject_Accession_Version \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_All_Accession","title":"OutputCustom.Subject_All_Accession","content":"OutputCustom.Subject_All_Accession \nSubject_All_Accession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Length","title":"OutputCustom.Subject_Length","content":"OutputCustom.Subject_Length \nSubject_Length \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_StartOfAlignment","title":"OutputCustom.Query_StartOfAlignment","content":"OutputCustom.Query_StartOfAlignment \nQuery_StartOfAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_EndOfAlignment","title":"OutputCustom.Query_EndOfAlignment","content":"OutputCustom.Query_EndOfAlignment \nQuery_EndOfAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_StartOfAlignment","title":"OutputCustom.Subject_StartOfAlignment","content":"OutputCustom.Subject_StartOfAlignment \nSubject_StartOfAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_EndOfAlignment","title":"OutputCustom.Subject_EndOfAlignment","content":"OutputCustom.Subject_EndOfAlignment \nSubject_EndOfAlignment \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_AlignedPartOf","title":"OutputCustom.Query_AlignedPartOf","content":"OutputCustom.Query_AlignedPartOf \nQuery_AlignedPartOf \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_AlignedPartOf","title":"OutputCustom.Subject_AlignedPartOf","content":"OutputCustom.Subject_AlignedPartOf \nSubject_AlignedPartOf \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Evalue","title":"OutputCustom.Evalue","content":"OutputCustom.Evalue \nEvalue \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Bitscore","title":"OutputCustom.Bitscore","content":"OutputCustom.Bitscore \nBitscore \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#RawScore","title":"OutputCustom.RawScore","content":"OutputCustom.RawScore \nRawScore \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#AlignmentLength","title":"OutputCustom.AlignmentLength","content":"OutputCustom.AlignmentLength \nAlignmentLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Identity","title":"OutputCustom.Identity","content":"OutputCustom.Identity \nIdentity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#IdentityCount","title":"OutputCustom.IdentityCount","content":"OutputCustom.IdentityCount \nIdentityCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#MismatchCount","title":"OutputCustom.MismatchCount","content":"OutputCustom.MismatchCount \nMismatchCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#PositiveScoringMatchCount","title":"OutputCustom.PositiveScoringMatchCount","content":"OutputCustom.PositiveScoringMatchCount \nPositiveScoringMatchCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#GapOpeningCount","title":"OutputCustom.GapOpeningCount","content":"OutputCustom.GapOpeningCount \nGapOpeningCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#GapCount","title":"OutputCustom.GapCount","content":"OutputCustom.GapCount \nGapCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#PositiveScoringMatch","title":"OutputCustom.PositiveScoringMatch","content":"OutputCustom.PositiveScoringMatch \nPositiveScoringMatch \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Frames","title":"OutputCustom.Frames","content":"OutputCustom.Frames \nFrames \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_Frames","title":"OutputCustom.Query_Frames","content":"OutputCustom.Query_Frames \nQuery_Frames \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Frames","title":"OutputCustom.Subject_Frames","content":"OutputCustom.Subject_Frames \nSubject_Frames \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#BTOP","title":"OutputCustom.BTOP","content":"OutputCustom.BTOP \nBTOP \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_TaxonomyIDs","title":"OutputCustom.Subject_TaxonomyIDs","content":"OutputCustom.Subject_TaxonomyIDs \nSubject_TaxonomyIDs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Scientific_Names","title":"OutputCustom.Subject_Scientific_Names","content":"OutputCustom.Subject_Scientific_Names \nSubject_Scientific_Names \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Common_Names","title":"OutputCustom.Subject_Common_Names","content":"OutputCustom.Subject_Common_Names \nSubject_Common_Names \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Blast_Names","title":"OutputCustom.Subject_Blast_Names","content":"OutputCustom.Subject_Blast_Names \nSubject_Blast_Names \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Super_Kingdoms","title":"OutputCustom.Subject_Super_Kingdoms","content":"OutputCustom.Subject_Super_Kingdoms \nSubject_Super_Kingdoms \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Title","title":"OutputCustom.Subject_Title","content":"OutputCustom.Subject_Title \nSubject_Title \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_All_Titles","title":"OutputCustom.Subject_All_Titles","content":"OutputCustom.Subject_All_Titles \nSubject_All_Titles \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Subject_Strand","title":"OutputCustom.Subject_Strand","content":"OutputCustom.Subject_Strand \nSubject_Strand \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_CoveragePerSubject","title":"OutputCustom.Query_CoveragePerSubject","content":"OutputCustom.Query_CoveragePerSubject \nQuery_CoveragePerSubject \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputcustom.html#Query_CoveragePerHSP","title":"OutputCustom.Query_CoveragePerHSP","content":"OutputCustom.Query_CoveragePerHSP \nQuery_CoveragePerHSP \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html","title":"OutputType","content":"OutputType \nalignment view options \nOutputType.toCLIString \ntoCLIString \nOutputType.Pairwise \nPairwise \nOutputType.Query_anchored \nQuery_anchored \nOutputType.Query_anchored_NoIdentities \nQuery_anchored_NoIdentities \nOutputType.Query_anchored_Flat \nQuery_anchored_Flat \nOutputType.Query_anchored_Flat_NoIdentities \nQuery_anchored_Flat_NoIdentities \nOutputType.XML \nXML \nOutputType.Tabular \nTabular \nOutputType.TabularWithComments \nTabularWithComments \nOutputType.TextASN1 \nTextASN1 \nOutputType.BinaryASN1 \nBinaryASN1 \nOutputType.CSV \nCSV \nOutputType.BLAST_ArchiveFormat \nBLAST_ArchiveFormat \nOutputType.JSON_Seqalign \nJSON_Seqalign \nOutputType.JSON_Blast \nJSON_Blast \nOutputType.XML2_Blast \nXML2_Blast","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#toCLIString","title":"OutputType.toCLIString","content":"OutputType.toCLIString \ntoCLIString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#Pairwise","title":"OutputType.Pairwise","content":"OutputType.Pairwise \nPairwise \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#Query_anchored","title":"OutputType.Query_anchored","content":"OutputType.Query_anchored \nQuery_anchored \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#Query_anchored_NoIdentities","title":"OutputType.Query_anchored_NoIdentities","content":"OutputType.Query_anchored_NoIdentities \nQuery_anchored_NoIdentities \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#Query_anchored_Flat","title":"OutputType.Query_anchored_Flat","content":"OutputType.Query_anchored_Flat \nQuery_anchored_Flat \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#Query_anchored_Flat_NoIdentities","title":"OutputType.Query_anchored_Flat_NoIdentities","content":"OutputType.Query_anchored_Flat_NoIdentities \nQuery_anchored_Flat_NoIdentities \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#XML","title":"OutputType.XML","content":"OutputType.XML \nXML \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#Tabular","title":"OutputType.Tabular","content":"OutputType.Tabular \nTabular \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#TabularWithComments","title":"OutputType.TabularWithComments","content":"OutputType.TabularWithComments \nTabularWithComments \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#TextASN1","title":"OutputType.TextASN1","content":"OutputType.TextASN1 \nTextASN1 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#BinaryASN1","title":"OutputType.BinaryASN1","content":"OutputType.BinaryASN1 \nBinaryASN1 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#CSV","title":"OutputType.CSV","content":"OutputType.CSV \nCSV \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#BLAST_ArchiveFormat","title":"OutputType.BLAST_ArchiveFormat","content":"OutputType.BLAST_ArchiveFormat \nBLAST_ArchiveFormat \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#JSON_Seqalign","title":"OutputType.JSON_Seqalign","content":"OutputType.JSON_Seqalign \nJSON_Seqalign \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#JSON_Blast","title":"OutputType.JSON_Blast","content":"OutputType.JSON_Blast \nJSON_Blast \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastcli-outputtype.html#XML2_Blast","title":"OutputType.XML2_Blast","content":"OutputType.XML2_Blast \nXML2_Blast \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html","title":"BlastHits","content":"BlastHits \n \nBlastHits.BlastHit \nBlastHit \nBlastHits.getQueryId \ngetQueryId \nBlastHits.getSubjectId \ngetSubjectId \nBlastHits.getRank \ngetRank \nBlastHits.getQueryLength \ngetQueryLength \nBlastHits.getSubjectLength \ngetSubjectLength \nBlastHits.getAlignmentLength \ngetAlignmentLength \nBlastHits.getMismatches \ngetMismatches \nBlastHits.getIdentical \ngetIdentical \nBlastHits.getPositives \ngetPositives \nBlastHits.getEValue \ngetEValue \nBlastHits.getBitScore \ngetBitScore \nBlastHits.lengthSimilarity \nlengthSimilarity \nBlastHits.subjectQuerySimilarity \nsubjectQuerySimilarity","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getQueryId","title":"BlastHits.getQueryId","content":"BlastHits.getQueryId \ngetQueryId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getSubjectId","title":"BlastHits.getSubjectId","content":"BlastHits.getSubjectId \ngetSubjectId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getRank","title":"BlastHits.getRank","content":"BlastHits.getRank \ngetRank \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getQueryLength","title":"BlastHits.getQueryLength","content":"BlastHits.getQueryLength \ngetQueryLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getSubjectLength","title":"BlastHits.getSubjectLength","content":"BlastHits.getSubjectLength \ngetSubjectLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getAlignmentLength","title":"BlastHits.getAlignmentLength","content":"BlastHits.getAlignmentLength \ngetAlignmentLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getMismatches","title":"BlastHits.getMismatches","content":"BlastHits.getMismatches \ngetMismatches \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getIdentical","title":"BlastHits.getIdentical","content":"BlastHits.getIdentical \ngetIdentical \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getPositives","title":"BlastHits.getPositives","content":"BlastHits.getPositives \ngetPositives \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getEValue","title":"BlastHits.getEValue","content":"BlastHits.getEValue \ngetEValue \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#getBitScore","title":"BlastHits.getBitScore","content":"BlastHits.getBitScore \ngetBitScore \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#lengthSimilarity","title":"BlastHits.lengthSimilarity","content":"BlastHits.lengthSimilarity \nlengthSimilarity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits.html#subjectQuerySimilarity","title":"BlastHits.subjectQuerySimilarity","content":"BlastHits.subjectQuerySimilarity \nsubjectQuerySimilarity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits-blasthit.html","title":"BlastHit","content":"BlastHit \n \nBlastHit.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBlastHit.SubjectId \nSubjectId \nBlastHit.Rank \nRank \nBlastHit.QueryId \nQueryId","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits-blasthit.html#\u0060\u0060.ctor\u0060\u0060","title":"BlastHit.\u0060\u0060.ctor\u0060\u0060","content":"BlastHit.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits-blasthit.html#SubjectId","title":"BlastHit.SubjectId","content":"BlastHit.SubjectId \nSubjectId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits-blasthit.html#Rank","title":"BlastHit.Rank","content":"BlastHit.Rank \nRank \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blasthits-blasthit.html#QueryId","title":"BlastHit.QueryId","content":"BlastHit.QueryId \nQueryId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastqueries.html","title":"BlastQueries","content":"BlastQueries \n \nBlastQueries.BlastQuery \nBlastQuery \nBlastQueries.getQueryId \ngetQueryId \nBlastQueries.getBlastHits \ngetBlastHits \nBlastQueries.tryGetBestHit \ntryGetBestHit \nBlastQueries.mapHits \nmapHits \nBlastQueries.filterHits \nfilterHits","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastqueries.html#getQueryId","title":"BlastQueries.getQueryId","content":"BlastQueries.getQueryId \ngetQueryId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastqueries.html#getBlastHits","title":"BlastQueries.getBlastHits","content":"BlastQueries.getBlastHits \ngetBlastHits \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastqueries.html#tryGetBestHit","title":"BlastQueries.tryGetBestHit","content":"BlastQueries.tryGetBestHit \ntryGetBestHit \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastqueries.html#mapHits","title":"BlastQueries.mapHits","content":"BlastQueries.mapHits \nmapHits \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastqueries.html#filterHits","title":"BlastQueries.filterHits","content":"BlastQueries.filterHits \nfilterHits \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastqueries-blastquery.html","title":"BlastQuery","content":"BlastQuery \n \nBlastQuery.NoHits \nNoHits \nBlastQuery.Hits \nHits","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastqueries-blastquery.html#NoHits","title":"BlastQuery.NoHits","content":"BlastQuery.NoHits \nNoHits \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-blastqueries-blastquery.html#Hits","title":"BlastQuery.Hits","content":"BlastQuery.Hits \nHits \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustal.html","title":"Clustal","content":"Clustal \nContains functions for reading clustal alignment files \nClustal.AlignmentInfo \nAlignmentInfo \nClustal.hasClustalFileHeader \nhasClustalFileHeader","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustal.html#hasClustalFileHeader","title":"Clustal.hasClustalFileHeader","content":"Clustal.hasClustalFileHeader \nhasClustalFileHeader \nChecks if the header of a parsed clustal alignment matches the clustal file conventions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustal-alignmentinfo.html","title":"AlignmentInfo","content":"AlignmentInfo \n \nAlignmentInfo.Header \nHeader \nAlignmentInfo.ConservationInfo \nConservationInfo","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustal-alignmentinfo.html#Header","title":"AlignmentInfo.Header","content":"AlignmentInfo.Header \nHeader \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustal-alignmentinfo.html#ConservationInfo","title":"AlignmentInfo.ConservationInfo","content":"AlignmentInfo.ConservationInfo \nConservationInfo \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli.html","title":"ClustalOCLI","content":"ClustalOCLI \nWrapper and its helpers for Clustal Omega multiple alignment tools \nClustalOCLI.Parameters \nParameters \nClustalOCLI.Input \nInput","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters.html","title":"Parameters","content":"Parameters \nContains modifier parameter type for Clustal Omega wrapper \nParameters.ClustalParams \nClustalParams \nParameters.ClusteringCustom \nClusteringCustom \nParameters.FileFormat \nFileFormat \nParameters.InputCustom \nInputCustom \nParameters.IterationCustom \nIterationCustom \nParameters.LimitsCustom \nLimitsCustom \nParameters.MiscallaneousCustom \nMiscallaneousCustom \nParameters.OutputCustom \nOutputCustom \nParameters.SeqType \nSeqType \nParameters.stringOfClustalParams \nstringOfClustalParams","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters.html#stringOfClustalParams","title":"Parameters.stringOfClustalParams","content":"Parameters.stringOfClustalParams \nstringOfClustalParams \nCreate argument string for clustal parameter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clustalparams.html","title":"ClustalParams","content":"ClustalParams \nCollection of parameters for specifying clustalo alignment \nClustalParams.Input \nInput \nClustalParams.Output \nOutput \nClustalParams.Clustering \nClustering \nClustalParams.Iteration \nIteration \nClustalParams.Limits \nLimits \nClustalParams.Miscallaneous \nMiscallaneous","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clustalparams.html#Input","title":"ClustalParams.Input","content":"ClustalParams.Input \nInput \n Specify input parameters","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clustalparams.html#Output","title":"ClustalParams.Output","content":"ClustalParams.Output \nOutput \n Specify output parameters","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clustalparams.html#Clustering","title":"ClustalParams.Clustering","content":"ClustalParams.Clustering \nClustering \n Specify clustering parameters","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clustalparams.html#Iteration","title":"ClustalParams.Iteration","content":"ClustalParams.Iteration \nIteration \n Specify iteration parameters","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clustalparams.html#Limits","title":"ClustalParams.Limits","content":"ClustalParams.Limits \nLimits \n Specify limits parameters","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clustalparams.html#Miscallaneous","title":"ClustalParams.Miscallaneous","content":"ClustalParams.Miscallaneous \nMiscallaneous \n Specify miscallaneous parameters","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html","title":"ClusteringCustom","content":"ClusteringCustom \nOptional modifiers to specify clustering \nClusteringCustom.DistanceMatrixInput \nDistanceMatrixInput \nClusteringCustom.DistanceMatrixOutput \nDistanceMatrixOutput \nClusteringCustom.GuideTreeInput \nGuideTreeInput \nClusteringCustom.GuideTreeOutput \nGuideTreeOutput \nClusteringCustom.Full \nFull \nClusteringCustom.FullIter \nFullIter \nClusteringCustom.ClusterSize \nClusterSize \nClusteringCustom.ClusteringOut \nClusteringOut \nClusteringCustom.UseKimura \nUseKimura \nClusteringCustom.PercentID \nPercentID","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#DistanceMatrixInput","title":"ClusteringCustom.DistanceMatrixInput","content":"ClusteringCustom.DistanceMatrixInput \nDistanceMatrixInput \nPairwise distance matrix input file (skips distance computation)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#DistanceMatrixOutput","title":"ClusteringCustom.DistanceMatrixOutput","content":"ClusteringCustom.DistanceMatrixOutput \nDistanceMatrixOutput \nPairwise distance matrix output file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#GuideTreeInput","title":"ClusteringCustom.GuideTreeInput","content":"ClusteringCustom.GuideTreeInput \nGuideTreeInput \nGuide tree input file (skips distance computation and guide tree clustering step)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#GuideTreeOutput","title":"ClusteringCustom.GuideTreeOutput","content":"ClusteringCustom.GuideTreeOutput \nGuideTreeOutput \nGuide tree output file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#Full","title":"ClusteringCustom.Full","content":"ClusteringCustom.Full \nFull \nUse full distance matrix for guide-tree calculation (slow; mBed is default)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#FullIter","title":"ClusteringCustom.FullIter","content":"ClusteringCustom.FullIter \nFullIter \nUse full distance matrix for guide-tree calculation during iteration (mBed is default)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#ClusterSize","title":"ClusteringCustom.ClusterSize","content":"ClusteringCustom.ClusterSize \nClusterSize \n Soft maximum of sequences in sub-clusters","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#ClusteringOut","title":"ClusteringCustom.ClusteringOut","content":"ClusteringCustom.ClusteringOut \nClusteringOut \n\tClustering output file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#UseKimura","title":"ClusteringCustom.UseKimura","content":"ClusteringCustom.UseKimura \nUseKimura \n Use Kimura distance correction for aligned sequences (default no)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-clusteringcustom.html#PercentID","title":"ClusteringCustom.PercentID","content":"ClusteringCustom.PercentID \nPercentID \n convert distances into percent identities (default no)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-fileformat.html","title":"FileFormat","content":"FileFormat \nInput file format \nFileFormat.FastA \nFastA \nFileFormat.Clustal \nClustal \nFileFormat.MSF \nMSF \nFileFormat.Phylip \nPhylip \nFileFormat.Selex \nSelex \nFileFormat.Stockholm \nStockholm \nFileFormat.Vienna \nVienna","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-fileformat.html#FastA","title":"FileFormat.FastA","content":"FileFormat.FastA \nFastA \nFastA file format","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-fileformat.html#Clustal","title":"FileFormat.Clustal","content":"FileFormat.Clustal \nClustal \nClustal file format","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-fileformat.html#MSF","title":"FileFormat.MSF","content":"FileFormat.MSF \nMSF \nMSF file format","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-fileformat.html#Phylip","title":"FileFormat.Phylip","content":"FileFormat.Phylip \nPhylip \nPhylip file format","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-fileformat.html#Selex","title":"FileFormat.Selex","content":"FileFormat.Selex \nSelex \nSelex file format","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-fileformat.html#Stockholm","title":"FileFormat.Stockholm","content":"FileFormat.Stockholm \nStockholm \nStockholm file format","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-fileformat.html#Vienna","title":"FileFormat.Vienna","content":"FileFormat.Vienna \nVienna \nVienna file format","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-inputcustom.html","title":"InputCustom","content":"InputCustom \nOptional modifiers for input \nInputCustom.Format \nFormat \nInputCustom.Dealign \nDealign \nInputCustom.IsProfile \nIsProfile \nInputCustom.SeqType \nSeqType","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-inputcustom.html#Format","title":"InputCustom.Format","content":"InputCustom.Format \nFormat \nForced sequence input file format (default: auto)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-inputcustom.html#Dealign","title":"InputCustom.Dealign","content":"InputCustom.Dealign \nDealign \nDealign input sequences","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-inputcustom.html#IsProfile","title":"InputCustom.IsProfile","content":"InputCustom.IsProfile \nIsProfile \nDisable check if profile, force profile (default no)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-inputcustom.html#SeqType","title":"InputCustom.SeqType","content":"InputCustom.SeqType \nSeqType \nForce a sequence type (default: auto)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-iterationcustom.html","title":"IterationCustom","content":"IterationCustom \nSpecify maximum number of iterations for given step \nIterationCustom.Iterations \nIterations \nIterationCustom.MaxGuideTreeIterations \nMaxGuideTreeIterations \nIterationCustom.MaxHMMIterations \nMaxHMMIterations","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-iterationcustom.html#Iterations","title":"IterationCustom.Iterations","content":"IterationCustom.Iterations \nIterations \n Number of (combined guide tree/HMM) iterations","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-iterationcustom.html#MaxGuideTreeIterations","title":"IterationCustom.MaxGuideTreeIterations","content":"IterationCustom.MaxGuideTreeIterations \nMaxGuideTreeIterations \n Maximum guide tree iterations","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-iterationcustom.html#MaxHMMIterations","title":"IterationCustom.MaxHMMIterations","content":"IterationCustom.MaxHMMIterations \nMaxHMMIterations \n  Maximum number of HMM iterations","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-limitscustom.html","title":"LimitsCustom","content":"LimitsCustom \n Will exit early, if exceeded \nLimitsCustom.MaxSeqNumber \nMaxSeqNumber \nLimitsCustom.MaxSeqLength \nMaxSeqLength","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-limitscustom.html#MaxSeqNumber","title":"LimitsCustom.MaxSeqNumber","content":"LimitsCustom.MaxSeqNumber \nMaxSeqNumber \n Maximum allowed number of sequences","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-limitscustom.html#MaxSeqLength","title":"LimitsCustom.MaxSeqLength","content":"LimitsCustom.MaxSeqLength \nMaxSeqLength \n Maximum allowed sequence length","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-miscallaneouscustom.html","title":"MiscallaneousCustom","content":"MiscallaneousCustom \nOptional, miscallaneous modifiers  \nMiscallaneousCustom.Auto \nAuto \nMiscallaneousCustom.Threads \nThreads \nMiscallaneousCustom.Log \nLog \nMiscallaneousCustom.VerboseLevel \nVerboseLevel \nMiscallaneousCustom.Version \nVersion \nMiscallaneousCustom.LongVersion \nLongVersion \nMiscallaneousCustom.Force \nForce","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-miscallaneouscustom.html#Auto","title":"MiscallaneousCustom.Auto","content":"MiscallaneousCustom.Auto \nAuto \n Set options automatically (might overwrite some of your options)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-miscallaneouscustom.html#Threads","title":"MiscallaneousCustom.Threads","content":"MiscallaneousCustom.Threads \nThreads \n Number of processors to use","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-miscallaneouscustom.html#Log","title":"MiscallaneousCustom.Log","content":"MiscallaneousCustom.Log \nLog \n Log all non-essential output to this file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-miscallaneouscustom.html#VerboseLevel","title":"MiscallaneousCustom.VerboseLevel","content":"MiscallaneousCustom.VerboseLevel \nVerboseLevel \n Verbose output (ranging from 0 [nonverbose,standard] to 3 [very verbose,everything above 3 is set to 3])","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-miscallaneouscustom.html#Version","title":"MiscallaneousCustom.Version","content":"MiscallaneousCustom.Version \nVersion \n Print version information and exit","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-miscallaneouscustom.html#LongVersion","title":"MiscallaneousCustom.LongVersion","content":"MiscallaneousCustom.LongVersion \nLongVersion \n Print long version information and exit","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-miscallaneouscustom.html#Force","title":"MiscallaneousCustom.Force","content":"MiscallaneousCustom.Force \nForce \n Force file overwriting","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-outputcustom.html","title":"OutputCustom","content":"OutputCustom \nOptional modifiers for input \nOutputCustom.Format \nFormat \nOutputCustom.ResidueNumber \nResidueNumber \nOutputCustom.Wrap \nWrap \nOutputCustom.OutputOrderAsTree \nOutputOrderAsTree","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-outputcustom.html#Format","title":"OutputCustom.Format","content":"OutputCustom.Format \nFormat \n\tMSA output file format (default: fasta)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-outputcustom.html#ResidueNumber","title":"OutputCustom.ResidueNumber","content":"OutputCustom.ResidueNumber \nResidueNumber \n\tin Clustal format print residue numbers (default no)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-outputcustom.html#Wrap","title":"OutputCustom.Wrap","content":"OutputCustom.Wrap \nWrap \n\tnumber of residues before line-wrap in output","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-outputcustom.html#OutputOrderAsTree","title":"OutputCustom.OutputOrderAsTree","content":"OutputCustom.OutputOrderAsTree \nOutputOrderAsTree \n Aligned sequences are ordered according to guide tree instead of input order","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-seqtype.html","title":"SeqType","content":"SeqType \nTypes of sequences \nSeqType.Protein \nProtein \nSeqType.DNA \nDNA \nSeqType.RNA \nRNA","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-seqtype.html#Protein","title":"SeqType.Protein","content":"SeqType.Protein \nProtein \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-seqtype.html#DNA","title":"SeqType.DNA","content":"SeqType.DNA \nDNA \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-parameters-seqtype.html#RNA","title":"SeqType.RNA","content":"SeqType.RNA \nRNA \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-input.html","title":"Input","content":"Input \nSpecify the type of input and assign file path \nInput.SequenceFile \nSequenceFile \nInput.TwoProfiles \nTwoProfiles \nInput.SequenceFileAndProfile \nSequenceFileAndProfile \nInput.SequenceFileAndHMM \nSequenceFileAndHMM","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-input.html#SequenceFile","title":"Input.SequenceFile","content":"Input.SequenceFile \nSequenceFile \nUse this option to make a multiple alignment from a set of sequences. A sequence file must contain more than one sequence (at least two sequences).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-input.html#TwoProfiles","title":"Input.TwoProfiles","content":"Input.TwoProfiles \nTwoProfiles \nUse this option to align two alignments (profiles) together.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-input.html#SequenceFileAndProfile","title":"Input.SequenceFileAndProfile","content":"Input.SequenceFileAndProfile \nSequenceFileAndProfile \n Use this option to add new sequences to an existing alignment.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-clustalocli-input.html#SequenceFileAndHMM","title":"Input.SequenceFileAndHMM","content":"Input.SequenceFileAndHMM \nSequenceFileAndHMM \n Use this option to make a new multiple alignment of sequences from the input file and use the HMM as a guide (EPA).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp.html","title":"DSSP","content":"DSSP \n \nDSSP.DSSPLine \nDSSPLine \nDSSP.fromLines \nfromLines \nDSSP.fromFile \nfromFile \nDSSP.toAASequence \ntoAASequence \nDSSP.toStructureSequence \ntoStructureSequence \nDSSP.toSequenceFeatures \ntoSequenceFeatures \nDSSP.prettyPrint \nprettyPrint","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp.html#fromLines","title":"DSSP.fromLines","content":"DSSP.fromLines \nfromLines \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp.html#fromFile","title":"DSSP.fromFile","content":"DSSP.fromFile \nfromFile \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp.html#toAASequence","title":"DSSP.toAASequence","content":"DSSP.toAASequence \ntoAASequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp.html#toStructureSequence","title":"DSSP.toStructureSequence","content":"DSSP.toStructureSequence \ntoStructureSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp.html#toSequenceFeatures","title":"DSSP.toSequenceFeatures","content":"DSSP.toSequenceFeatures \ntoSequenceFeatures \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp.html#prettyPrint","title":"DSSP.prettyPrint","content":"DSSP.prettyPrint \nprettyPrint \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html","title":"DSSPLine","content":"DSSPLine \n \nDSSPLine.create \ncreate \nDSSPLine.ofParseResults \nofParseResults \nDSSPLine.ofString \nofString \nDSSPLine.ResidueIndex \nResidueIndex \nDSSPLine.ResidueName \nResidueName \nDSSPLine.InsertionCode \nInsertionCode \nDSSPLine.ChainId \nChainId \nDSSPLine.AminoAcid \nAminoAcid \nDSSPLine.SecondaryStructure \nSecondaryStructure \nDSSPLine.AccessibleSurface \nAccessibleSurface \nDSSPLine.NH_O_1_Relidx \nNH_O_1_Relidx \nDSSPLine.NH_O_1_Energy \nNH_O_1_Energy \nDSSPLine.O_NH_1_Relidx \nO_NH_1_Relidx \nDSSPLine.O_NH_1_Energy \nO_NH_1_Energy \nDSSPLine.NH_O_2_Relidx \nNH_O_2_Relidx \nDSSPLine.NH_O_2_Energy \nNH_O_2_Energy \nDSSPLine.O_NH_2_Relidx \nO_NH_2_Relidx \nDSSPLine.O_NH_2_Energy \nO_NH_2_Energy \nDSSPLine.TCO \nTCO \nDSSPLine.KAPPA \nKAPPA \nDSSPLine.ALPHA \nALPHA \nDSSPLine.PHI \nPHI \nDSSPLine.PSI \nPSI \nDSSPLine.X_CA \nX_CA \nDSSPLine.Y_CA \nY_CA \nDSSPLine.Z_CA \nZ_CA \nDSSPLine.Chain \nChain","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#create","title":"DSSPLine.create","content":"DSSPLine.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#ofParseResults","title":"DSSPLine.ofParseResults","content":"DSSPLine.ofParseResults \nofParseResults \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#ofString","title":"DSSPLine.ofString","content":"DSSPLine.ofString \nofString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#ResidueIndex","title":"DSSPLine.ResidueIndex","content":"DSSPLine.ResidueIndex \nResidueIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#ResidueName","title":"DSSPLine.ResidueName","content":"DSSPLine.ResidueName \nResidueName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#InsertionCode","title":"DSSPLine.InsertionCode","content":"DSSPLine.InsertionCode \nInsertionCode \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#ChainId","title":"DSSPLine.ChainId","content":"DSSPLine.ChainId \nChainId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#AminoAcid","title":"DSSPLine.AminoAcid","content":"DSSPLine.AminoAcid \nAminoAcid \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#SecondaryStructure","title":"DSSPLine.SecondaryStructure","content":"DSSPLine.SecondaryStructure \nSecondaryStructure \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#AccessibleSurface","title":"DSSPLine.AccessibleSurface","content":"DSSPLine.AccessibleSurface \nAccessibleSurface \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#NH_O_1_Relidx","title":"DSSPLine.NH_O_1_Relidx","content":"DSSPLine.NH_O_1_Relidx \nNH_O_1_Relidx \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#NH_O_1_Energy","title":"DSSPLine.NH_O_1_Energy","content":"DSSPLine.NH_O_1_Energy \nNH_O_1_Energy \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#O_NH_1_Relidx","title":"DSSPLine.O_NH_1_Relidx","content":"DSSPLine.O_NH_1_Relidx \nO_NH_1_Relidx \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#O_NH_1_Energy","title":"DSSPLine.O_NH_1_Energy","content":"DSSPLine.O_NH_1_Energy \nO_NH_1_Energy \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#NH_O_2_Relidx","title":"DSSPLine.NH_O_2_Relidx","content":"DSSPLine.NH_O_2_Relidx \nNH_O_2_Relidx \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#NH_O_2_Energy","title":"DSSPLine.NH_O_2_Energy","content":"DSSPLine.NH_O_2_Energy \nNH_O_2_Energy \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#O_NH_2_Relidx","title":"DSSPLine.O_NH_2_Relidx","content":"DSSPLine.O_NH_2_Relidx \nO_NH_2_Relidx \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#O_NH_2_Energy","title":"DSSPLine.O_NH_2_Energy","content":"DSSPLine.O_NH_2_Energy \nO_NH_2_Energy \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#TCO","title":"DSSPLine.TCO","content":"DSSPLine.TCO \nTCO \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#KAPPA","title":"DSSPLine.KAPPA","content":"DSSPLine.KAPPA \nKAPPA \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#ALPHA","title":"DSSPLine.ALPHA","content":"DSSPLine.ALPHA \nALPHA \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#PHI","title":"DSSPLine.PHI","content":"DSSPLine.PHI \nPHI \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#PSI","title":"DSSPLine.PSI","content":"DSSPLine.PSI \nPSI \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#X_CA","title":"DSSPLine.X_CA","content":"DSSPLine.X_CA \nX_CA \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#Y_CA","title":"DSSPLine.Y_CA","content":"DSSPLine.Y_CA \nY_CA \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#Z_CA","title":"DSSPLine.Z_CA","content":"DSSPLine.Z_CA \nZ_CA \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-dssp-dsspline.html#Chain","title":"DSSPLine.Chain","content":"DSSPLine.Chain \nChain \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fasta.html","title":"Fasta","content":"Fasta \n \nFasta.FastaItem\u003C\u0027SequenceItem\u003E \nFastaItem\u003C\u0027SequenceItem\u003E","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fasta-fastaitem-1.html","title":"FastaItem\u003C\u0027SequenceItem\u003E","content":"FastaItem\u003C\u0027SequenceItem\u003E \n A FastaItem represents a sequence record in a fasta formatted file, consisting of header line and sequence \nFastaItem\u003C\u0027SequenceItem\u003E.create \ncreate \nFastaItem\u003C\u0027SequenceItem\u003E.ofTaggedSequence \nofTaggedSequence \nFastaItem\u003C\u0027SequenceItem\u003E.toLines \ntoLines \nFastaItem\u003C\u0027SequenceItem\u003E.toString \ntoString \nFastaItem\u003C\u0027SequenceItem\u003E.toTaggedSequence \ntoTaggedSequence \nFastaItem\u003C\u0027SequenceItem\u003E.Header \nHeader \nFastaItem\u003C\u0027SequenceItem\u003E.Sequence \nSequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fasta-fastaitem-1.html#create","title":"FastaItem\u003C\u0027SequenceItem\u003E.create","content":"FastaItem\u003C\u0027SequenceItem\u003E.create \ncreate \n\n Creates a fasta item representing a single sequence record in a fasta formatted file.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fasta-fastaitem-1.html#ofTaggedSequence","title":"FastaItem\u003C\u0027SequenceItem\u003E.ofTaggedSequence","content":"FastaItem\u003C\u0027SequenceItem\u003E.ofTaggedSequence \nofTaggedSequence \n\n Creates a fasta item from a tagged sequence.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fasta-fastaitem-1.html#toLines","title":"FastaItem\u003C\u0027SequenceItem\u003E.toLines","content":"FastaItem\u003C\u0027SequenceItem\u003E.toLines \ntoLines \n\n Converts the FastaItem to a sequence of lines.\n\n The header line is prefixed with \u0027\u003E\u0027 and the sequence is split into chunks of 80 characters.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fasta-fastaitem-1.html#toString","title":"FastaItem\u003C\u0027SequenceItem\u003E.toString","content":"FastaItem\u003C\u0027SequenceItem\u003E.toString \ntoString \n\n Converts the FastaItem to a string.\n\n The header line is prefixed with \u0027\u003E\u0027 and the sequence is split into chunks of 80 characters per line.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fasta-fastaitem-1.html#toTaggedSequence","title":"FastaItem\u003C\u0027SequenceItem\u003E.toTaggedSequence","content":"FastaItem\u003C\u0027SequenceItem\u003E.toTaggedSequence \ntoTaggedSequence \n\n Converts the FastaItem to a tagged sequence.\n\n The header line is converted to a tag type of choice using the provided converter function.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fasta-fastaitem-1.html#Header","title":"FastaItem\u003C\u0027SequenceItem\u003E.Header","content":"FastaItem\u003C\u0027SequenceItem\u003E.Header \nHeader \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fasta-fastaitem-1.html#Sequence","title":"FastaItem\u003C\u0027SequenceItem\u003E.Sequence","content":"FastaItem\u003C\u0027SequenceItem\u003E.Sequence \nSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fastq.html","title":"Fastq","content":"Fastq \n \nFastq.FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E \nFastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fastq-fastqitem-2.html","title":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E","content":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E \n FastqItem record contains header, sequence, qualityheader, qualitysequence of one entry \nFastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.create \ncreate \nFastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.toLines \ntoLines \nFastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.toString \ntoString \nFastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.Header \nHeader \nFastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.Sequence \nSequence \nFastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.QualityHeader \nQualityHeader \nFastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.QualitySequence \nQualitySequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fastq-fastqitem-2.html#create","title":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.create","content":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.create \ncreate \n Creates FastqItem with header line, sequence, qualityHeader and qualitySequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fastq-fastqitem-2.html#toLines","title":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.toLines","content":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.toLines \ntoLines \n\n Converts the FastaItem to a sequence of lines.\n\n The header line is prefixed with \u0027\u003E\u0027 and the sequence is split into chunks of 80 characters.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fastq-fastqitem-2.html#toString","title":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.toString","content":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.toString \ntoString \n\n Converts the FastaItem to a string.\n\n The header line is prefixed with \u0027\u003E\u0027 and the sequence is split into chunks of 80 characters per line.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fastq-fastqitem-2.html#Header","title":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.Header","content":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.Header \nHeader \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fastq-fastqitem-2.html#Sequence","title":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.Sequence","content":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.Sequence \nSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fastq-fastqitem-2.html#QualityHeader","title":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.QualityHeader","content":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.QualityHeader \nQualityHeader \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-fastq-fastqitem-2.html#QualitySequence","title":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.QualitySequence","content":"FastqItem\u003C\u0027SequenceItem, \u0027QualitySequenceItem\u003E.QualitySequence \nQualitySequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html","title":"Formatting","content":"Formatting \nPretty printers for various custom types in the library \nFormatting.prettyPrintBioItem \nprettyPrintBioItem \nFormatting.prettyPrintBioItemWithModifications \nprettyPrintBioItemWithModifications \nFormatting.prettyPrintBioCollection \nprettyPrintBioCollection \nFormatting.prettyPrintBioCollectionWithModifications \nprettyPrintBioCollectionWithModifications \nFormatting.prettyPrintClustal \nprettyPrintClustal \nFormatting.prettyPrintGFF3 \nprettyPrintGFF3 \nFormatting.prettyPrintSampleRecord \nprettyPrintSampleRecord \nFormatting.prettyPrintSeriesRecord \nprettyPrintSeriesRecord \nFormatting.prettyPrintPlatformRecord \nprettyPrintPlatformRecord \nFormatting.prettyPrintGSE \nprettyPrintGSE \nFormatting.prettyPrintGPL \nprettyPrintGPL","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintBioItem","title":"Formatting.prettyPrintBioItem","content":"Formatting.prettyPrintBioItem \nprettyPrintBioItem \nprint BioItems by using symbols for AminoAcids and Nucleotides, and the name of Modifications in [brackets]","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintBioItemWithModifications","title":"Formatting.prettyPrintBioItemWithModifications","content":"Formatting.prettyPrintBioItemWithModifications \nprettyPrintBioItemWithModifications \nprint BioItems by using symbols for AminoAcids and Nucleotides, and the name of Modifications in [brackets]","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintBioCollection","title":"Formatting.prettyPrintBioCollection","content":"Formatting.prettyPrintBioCollection \nprettyPrintBioCollection \nprint Biocollections in 6x10char blocks per line, preceeded by an index indicator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintBioCollectionWithModifications","title":"Formatting.prettyPrintBioCollectionWithModifications","content":"Formatting.prettyPrintBioCollectionWithModifications \nprettyPrintBioCollectionWithModifications \nprint Biocollections in 6x10char blocks per line, preceeded by an index indicator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintClustal","title":"Formatting.prettyPrintClustal","content":"Formatting.prettyPrintClustal \nprettyPrintClustal \nprint Clustal formatted file as seen in the specifications.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintGFF3","title":"Formatting.prettyPrintGFF3","content":"Formatting.prettyPrintGFF3 \nprettyPrintGFF3 \nprint GFF3 formatted file as seen in the specifications.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintSampleRecord","title":"Formatting.prettyPrintSampleRecord","content":"Formatting.prettyPrintSampleRecord \nprettyPrintSampleRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintSeriesRecord","title":"Formatting.prettyPrintSeriesRecord","content":"Formatting.prettyPrintSeriesRecord \nprettyPrintSeriesRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintPlatformRecord","title":"Formatting.prettyPrintPlatformRecord","content":"Formatting.prettyPrintPlatformRecord \nprettyPrintPlatformRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintGSE","title":"Formatting.prettyPrintGSE","content":"Formatting.prettyPrintGSE \nprettyPrintGSE \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-formatting.html#prettyPrintGPL","title":"Formatting.prettyPrintGPL","content":"Formatting.prettyPrintGPL \nprettyPrintGPL \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf.html","title":"GAF","content":"GAF \n \nGAF.GAF \nGAF \nGAF.GAFEntry \nGAFEntry \nGAF.createGAFEntry \ncreateGAFEntry \nGAF.fromFile \nfromFile \nGAF.toFile \ntoFile","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf.html#createGAFEntry","title":"GAF.createGAFEntry","content":"GAF.createGAFEntry \ncreateGAFEntry \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf.html#fromFile","title":"GAF.fromFile","content":"GAF.fromFile \nfromFile \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf.html#toFile","title":"GAF.toFile","content":"GAF.toFile \ntoFile \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gaf.html","title":"GAF","content":"GAF \n \nGAF.Header \nHeader \nGAF.Entries \nEntries","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gaf.html#Header","title":"GAF.Header","content":"GAF.Header \nHeader \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gaf.html#Entries","title":"GAF.Entries","content":"GAF.Entries \nEntries \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html","title":"GAFEntry","content":"GAFEntry \n \nGAFEntry.Database \nDatabase \nGAFEntry.DbObjectID \nDbObjectID \nGAFEntry.DbObjectSymbol \nDbObjectSymbol \nGAFEntry.Qualifier \nQualifier \nGAFEntry.GoTerm \nGoTerm \nGAFEntry.DbReference \nDbReference \nGAFEntry.Evidence \nEvidence \nGAFEntry.WithFrom \nWithFrom \nGAFEntry.Aspect \nAspect \nGAFEntry.DbObjectName \nDbObjectName \nGAFEntry.DbObjectSynonym \nDbObjectSynonym \nGAFEntry.DbObjectType \nDbObjectType \nGAFEntry.Taxon \nTaxon \nGAFEntry.Date \nDate \nGAFEntry.AssignedBy \nAssignedBy \nGAFEntry.AnnotationExtension \nAnnotationExtension \nGAFEntry.GeneProductFormId \nGeneProductFormId","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#Database","title":"GAFEntry.Database","content":"GAFEntry.Database \nDatabase \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#DbObjectID","title":"GAFEntry.DbObjectID","content":"GAFEntry.DbObjectID \nDbObjectID \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#DbObjectSymbol","title":"GAFEntry.DbObjectSymbol","content":"GAFEntry.DbObjectSymbol \nDbObjectSymbol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#Qualifier","title":"GAFEntry.Qualifier","content":"GAFEntry.Qualifier \nQualifier \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#GoTerm","title":"GAFEntry.GoTerm","content":"GAFEntry.GoTerm \nGoTerm \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#DbReference","title":"GAFEntry.DbReference","content":"GAFEntry.DbReference \nDbReference \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#Evidence","title":"GAFEntry.Evidence","content":"GAFEntry.Evidence \nEvidence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#WithFrom","title":"GAFEntry.WithFrom","content":"GAFEntry.WithFrom \nWithFrom \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#Aspect","title":"GAFEntry.Aspect","content":"GAFEntry.Aspect \nAspect \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#DbObjectName","title":"GAFEntry.DbObjectName","content":"GAFEntry.DbObjectName \nDbObjectName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#DbObjectSynonym","title":"GAFEntry.DbObjectSynonym","content":"GAFEntry.DbObjectSynonym \nDbObjectSynonym \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#DbObjectType","title":"GAFEntry.DbObjectType","content":"GAFEntry.DbObjectType \nDbObjectType \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#Taxon","title":"GAFEntry.Taxon","content":"GAFEntry.Taxon \nTaxon \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#Date","title":"GAFEntry.Date","content":"GAFEntry.Date \nDate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#AssignedBy","title":"GAFEntry.AssignedBy","content":"GAFEntry.AssignedBy \nAssignedBy \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#AnnotationExtension","title":"GAFEntry.AnnotationExtension","content":"GAFEntry.AnnotationExtension \nAnnotationExtension \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gaf-gafentry.html#GeneProductFormId","title":"GAFEntry.GeneProductFormId","content":"GAFEntry.GeneProductFormId \nGeneProductFormId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3.html","title":"GFF3","content":"GFF3 \nContains functions for reading and writing GFF3 files \nGFF3.GFFEntry \nGFFEntry \nGFF3.GFFLine\u003C\u0027SequenceItem\u003E \nGFFLine\u003C\u0027SequenceItem\u003E","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html","title":"GFFEntry","content":"GFFEntry \nrepresents fields of one GFF3 entry line \nGFFEntry.Seqid \nSeqid \nGFFEntry.Source \nSource \nGFFEntry.Feature \nFeature \nGFFEntry.StartPos \nStartPos \nGFFEntry.EndPos \nEndPos \nGFFEntry.Score \nScore \nGFFEntry.Strand \nStrand \nGFFEntry.Phase \nPhase \nGFFEntry.Attributes \nAttributes \nGFFEntry.Supplement \nSupplement","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#Seqid","title":"GFFEntry.Seqid","content":"GFFEntry.Seqid \nSeqid \nname of sequence where the feature is located","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#Source","title":"GFFEntry.Source","content":"GFFEntry.Source \nSource \nprogram, organization or database where the sequence is derived from","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#Feature","title":"GFFEntry.Feature","content":"GFFEntry.Feature \nFeature \nfeature, type or method; has to be a term from SO or SO accession number","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#StartPos","title":"GFFEntry.StartPos","content":"GFFEntry.StartPos \nStartPos \npositive 1-based integer start coordinate, relative to the landmark given in column 1","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#EndPos","title":"GFFEntry.EndPos","content":"GFFEntry.EndPos \nEndPos \npositive 1-based integer end coordinate, relative to the landmark given in column 1","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#Score","title":"GFFEntry.Score","content":"GFFEntry.Score \nScore \nthe score of the feature; semantics are ill-defined","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#Strand","title":"GFFEntry.Strand","content":"GFFEntry.Strand \nStrand \nthe strand of the feature","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#Phase","title":"GFFEntry.Phase","content":"GFFEntry.Phase \nPhase \nfor CDS features: indicates where the feature begins with reference to the reading frame","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#Attributes","title":"GFFEntry.Attributes","content":"GFFEntry.Attributes \nAttributes \na semicolon-separated list of tag-value pairs, providing additional information about each feature","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffentry.html#Supplement","title":"GFFEntry.Supplement","content":"GFFEntry.Supplement \nSupplement \nadditional supplement information about the feature (optional)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffline-1.html","title":"GFFLine\u003C\u0027SequenceItem\u003E","content":"GFFLine\u003C\u0027SequenceItem\u003E \nrepresents all kinds of lines which can be present in a GFF3 file \nGFFLine\u003C\u0027SequenceItem\u003E.GFFEntryLine \nGFFEntryLine \nGFFLine\u003C\u0027SequenceItem\u003E.Comment \nComment \nGFFLine\u003C\u0027SequenceItem\u003E.Directive \nDirective \nGFFLine\u003C\u0027SequenceItem\u003E.Fasta \nFasta","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffline-1.html#GFFEntryLine","title":"GFFLine\u003C\u0027SequenceItem\u003E.GFFEntryLine","content":"GFFLine\u003C\u0027SequenceItem\u003E.GFFEntryLine \nGFFEntryLine \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffline-1.html#Comment","title":"GFFLine\u003C\u0027SequenceItem\u003E.Comment","content":"GFFLine\u003C\u0027SequenceItem\u003E.Comment \nComment \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffline-1.html#Directive","title":"GFFLine\u003C\u0027SequenceItem\u003E.Directive","content":"GFFLine\u003C\u0027SequenceItem\u003E.Directive \nDirective \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-gff3-gffline-1.html#Fasta","title":"GFFLine\u003C\u0027SequenceItem\u003E.Fasta","content":"GFFLine\u003C\u0027SequenceItem\u003E.Fasta \nFasta \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank.html","title":"GenBank","content":"GenBank \nfunctions for reading and writing GenBank files \nGenBank.OriginConverters \nOriginConverters \nGenBank.Read \nRead \nGenBank.Write \nWrite \nGenBank.Feature \nFeature \nGenBank.FeatureQualifier \nFeatureQualifier \nGenBank.GenBankItem\u003C\u0027a\u003E \nGenBankItem\u003C\u0027a\u003E \nGenBank.createFeatureQualifier \ncreateFeatureQualifier \nGenBank.createFeature \ncreateFeature \nGenBank.getReferences \ngetReferences \nGenBank.getFeatures \ngetFeatures \nGenBank.getFeaturesWithType \ngetFeaturesWithType \nGenBank.getOrigin \ngetOrigin \nGenBank.getValues \ngetValues \nGenBank.tryGetItem \ntryGetItem","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank.html#createFeatureQualifier","title":"GenBank.createFeatureQualifier","content":"GenBank.createFeatureQualifier \ncreateFeatureQualifier \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank.html#createFeature","title":"GenBank.createFeature","content":"GenBank.createFeature \ncreateFeature \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank.html#getReferences","title":"GenBank.getReferences","content":"GenBank.getReferences \ngetReferences \nReturns all references of a GenBank file representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank.html#getFeatures","title":"GenBank.getFeatures","content":"GenBank.getFeatures \ngetFeatures \nReturns all features of a GenBank file representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank.html#getFeaturesWithType","title":"GenBank.getFeaturesWithType","content":"GenBank.getFeaturesWithType \ngetFeaturesWithType \nReturns all features of a specific type of a GenBank file representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank.html#getOrigin","title":"GenBank.getOrigin","content":"GenBank.getOrigin \ngetOrigin \nReturns the Origin of a GenBank file representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank.html#getValues","title":"GenBank.getValues","content":"GenBank.getValues \ngetValues \nReturns all Values of the meta section of a Genbank file representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank.html#tryGetItem","title":"GenBank.tryGetItem","content":"GenBank.tryGetItem \ntryGetItem \nReturns a GenBank item at the specified key, if it exists in the dictionary","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-originconverters.html","title":"OriginConverters","content":"OriginConverters \ncontains prebuilt converters for origin sequences in a gb file for both reading and writing \nOriginConverters.Input \nInput \nOriginConverters.Output \nOutput","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-originconverters-input.html","title":"Input","content":"Input \ncontains a collection of prebuilt converters for parsing specific origin sequences  \nInput.defaultConverter \ndefaultConverter \nInput.nucleotideConverter \nnucleotideConverter \nInput.peptideConverter \npeptideConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-originconverters-input.html#defaultConverter","title":"Input.defaultConverter","content":"Input.defaultConverter \ndefaultConverter \ndefault converter that yields all characters of the origin sequence, skipping spaces.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-originconverters-input.html#nucleotideConverter","title":"Input.nucleotideConverter","content":"Input.nucleotideConverter \nnucleotideConverter \nconverts the origin sequence into a BioSeq of nucleotides","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-originconverters-input.html#peptideConverter","title":"Input.peptideConverter","content":"Input.peptideConverter \npeptideConverter \nconverts the origin sequence into a BioSeq of amino acids","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-originconverters-output.html","title":"Output","content":"Output \ncontains a collection of prebuilt converters for writing specific origin sequences  \nOutput.defaultConverter \ndefaultConverter \nOutput.bioItemConverter \nbioItemConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-originconverters-output.html#defaultConverter","title":"Output.defaultConverter","content":"Output.defaultConverter \ndefaultConverter \ndefault converter. returns a sequence of characters","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-originconverters-output.html#bioItemConverter","title":"Output.bioItemConverter","content":"Output.bioItemConverter \nbioItemConverter \nconverts the BioSeq to the 1 letter code representing the contained items","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-read.html","title":"Read","content":"Read \nfunctions for parsing a GenBank file. \nRead.fromFile \nfromFile \nRead.fromFileWithOriginConverter \nfromFileWithOriginConverter \nRead.fromSeq \nfromSeq \nRead.fromSeqWithOriginConverter \nfromSeqWithOriginConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-read.html#fromFile","title":"Read.fromFile","content":"Read.fromFile \nfromFile \nReturns a dictionary containing GenBank items, that represents the GenBank file at the input path","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-read.html#fromFileWithOriginConverter","title":"Read.fromFileWithOriginConverter","content":"Read.fromFileWithOriginConverter \nfromFileWithOriginConverter \nReturns a dictionary containing GenBank items, that represents the GenBank file at the input path\ntaking a converter function for the origin sequence of the file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-read.html#fromSeq","title":"Read.fromSeq","content":"Read.fromSeq \nfromSeq \nReturns a dictionary containing GenBank items parsed from an input string sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-read.html#fromSeqWithOriginConverter","title":"Read.fromSeqWithOriginConverter","content":"Read.fromSeqWithOriginConverter \nfromSeqWithOriginConverter \nReturns a dictionary containing GenBank items parsed from an input string sequence\ntaking a converter function for the origin sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-write.html","title":"Write","content":"Write \nFunctions for writing a GenBank file   \nWrite.toFile \ntoFile \nWrite.toFileWithOriginConverter \ntoFileWithOriginConverter","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-write.html#toFile","title":"Write.toFile","content":"Write.toFile \ntoFile \ncreates a GenBank file at the specified path","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-write.html#toFileWithOriginConverter","title":"Write.toFileWithOriginConverter","content":"Write.toFileWithOriginConverter \ntoFileWithOriginConverter \ncreates a GenBank file at the specified path, taking a converter function for the origin sequence of the file ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-feature.html","title":"Feature","content":"Feature \nRepresents a single feature from the FEATURES section of a GenBank file. Features can contain\nInformation about genes and gene products, as well as regions of biological significance reported in the sequence \nFeature.Type \nType \nFeature.BaseSpan \nBaseSpan \nFeature.Qualifiers \nQualifiers","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-feature.html#Type","title":"Feature.Type","content":"Feature.Type \nType \nType of the Feature","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-feature.html#BaseSpan","title":"Feature.BaseSpan","content":"Feature.BaseSpan \nBaseSpan \nLocation of the feature in the sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-feature.html#Qualifiers","title":"Feature.Qualifiers","content":"Feature.Qualifiers \nQualifiers \nA List of feature Qualifiers and their values associated with this feature","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-featurequalifier.html","title":"FeatureQualifier","content":"FeatureQualifier \nRepresents a single feature Qualifier and its value from the FEATURES section of a Genbank file. Features can contain\nInformation about genes and gene products, as well as regions of biological significance reported in the sequence \nFeatureQualifier.Name \nName \nFeatureQualifier.Value \nValue","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-featurequalifier.html#Name","title":"FeatureQualifier.Name","content":"FeatureQualifier.Name \nName \nKey of the Feature","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-featurequalifier.html#Value","title":"FeatureQualifier.Value","content":"FeatureQualifier.Value \nValue \nValue of the Feature","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-genbankitem-1.html","title":"GenBankItem\u003C\u0027a\u003E","content":"GenBankItem\u003C\u0027a\u003E \nRepresents any Item a GenBank file can contain as a union case. The result of parsing a genBank file will be a dictionary containing this type. \nGenBankItem\u003C\u0027a\u003E.Value \nValue \nGenBankItem\u003C\u0027a\u003E.References \nReferences \nGenBankItem\u003C\u0027a\u003E.Features \nFeatures \nGenBankItem\u003C\u0027a\u003E.Sequence \nSequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-genbankitem-1.html#Value","title":"GenBankItem\u003C\u0027a\u003E.Value","content":"GenBankItem\u003C\u0027a\u003E.Value \nValue \nAny value contained in the meta section of a GenBank file. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-genbankitem-1.html#References","title":"GenBankItem\u003C\u0027a\u003E.References","content":"GenBankItem\u003C\u0027a\u003E.References \nReferences \nAll references contained in a GenBank file is seperate entries in a list.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-genbankitem-1.html#Features","title":"GenBankItem\u003C\u0027a\u003E.Features","content":"GenBankItem\u003C\u0027a\u003E.Features \nFeatures \nAll features contained in a GenBank file as seperate entries in a list","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-genbank-genbankitem-1.html#Sequence","title":"GenBankItem\u003C\u0027a\u003E.Sequence","content":"GenBankItem\u003C\u0027a\u003E.Sequence \nSequence \nThe origin section of a GenBank file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html","title":"Mgf","content":"Mgf \n Mgf \u003Chttp://www.matrixscience.com/help/data_file_help.html\u003E\u0060_ is a simple\n human-readable format for MS/MS data. It allows storing MS/MS peak lists and\n exprimental parameters. \nMgf.MgfEntry \nMgfEntry \nMgf.createMgfEntry \ncreateMgfEntry \nMgf.tryGetPrecursorMass \ntryGetPrecursorMass \nMgf.tryGetPrecursorMZ \ntryGetPrecursorMZ \nMgf.tryParseCharge \ntryParseCharge \nMgf.tryGetPrecursorCharges \ntryGetPrecursorCharges \nMgf.tryGetTitle \ntryGetTitle \nMgf.tryParseTitle \ntryParseTitle \nMgf.readMgf \nreadMgf \nMgf.mgfToString \nmgfToString","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html#createMgfEntry","title":"Mgf.createMgfEntry","content":"Mgf.createMgfEntry \ncreateMgfEntry \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html#tryGetPrecursorMass","title":"Mgf.tryGetPrecursorMass","content":"Mgf.tryGetPrecursorMass \ntryGetPrecursorMass \n Returns the precursor mass. Returns None if the information can\u0027t be optained","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html#tryGetPrecursorMZ","title":"Mgf.tryGetPrecursorMZ","content":"Mgf.tryGetPrecursorMZ \ntryGetPrecursorMZ \n Returns the precursor mz. Returns None if the information can\u0027t be optained","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html#tryParseCharge","title":"Mgf.tryParseCharge","content":"Mgf.tryParseCharge \ntryParseCharge \n Returns the posible charge/charges in a list. Returns None if the information can\u0027t be optained","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html#tryGetPrecursorCharges","title":"Mgf.tryGetPrecursorCharges","content":"Mgf.tryGetPrecursorCharges \ntryGetPrecursorCharges \n Returns the precursor mass. Returns None if the information can\u0027t be optained","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html#tryGetTitle","title":"Mgf.tryGetTitle","content":"Mgf.tryGetTitle \ntryGetTitle \n Returns the title string of a \u0027mgf-entry\u0027. Returns None if the information can\u0027t be optained","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html#tryParseTitle","title":"Mgf.tryParseTitle","content":"Mgf.tryParseTitle \ntryParseTitle \n Returns the retention time and precursor intensity from \u0027mgf-title\u0027 string. Returns None if title does not contain the information","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html#readMgf","title":"Mgf.readMgf","content":"Mgf.readMgf \nreadMgf \n Reads an mgf file into a collection of MgfEntries","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf.html#mgfToString","title":"Mgf.mgfToString","content":"Mgf.mgfToString \nmgfToString \n Converts a MgfEntry to string.\n Use Seq.write to write to file.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf-mgfentry.html","title":"MgfEntry","content":"MgfEntry \n Represents  \nMgfEntry.Parameters \nParameters \nMgfEntry.Mass \nMass \nMgfEntry.Intensity \nIntensity","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf-mgfentry.html#Parameters","title":"MgfEntry.Parameters","content":"MgfEntry.Parameters \nParameters \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf-mgfentry.html#Mass","title":"MgfEntry.Mass","content":"MgfEntry.Mass \nMass \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-mgf-mgfentry.html#Intensity","title":"MgfEntry.Intensity","content":"MgfEntry.Intensity \nIntensity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-newick.html","title":"Newick","content":"Newick \nContains functions for parsing phylogenetic trees in the Newick format \nNewick.ofFile \nofFile \nNewick.toFile \ntoFile","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-newick.html#ofFile","title":"Newick.ofFile","content":"Newick.ofFile \nofFile \nReturns a PhylTree of file. Converter is used to create a distancevalue of a string","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-newick.html#toFile","title":"Newick.toFile","content":"Newick.toFile \ntoFile \nCreates a NewickTree file of PhylTree. nodeConverter is used to split the distanceInfo and the name of a node, because they are parsed separately. First result of the tuple is name, second is distance.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo.html","title":"Obo","content":"Obo \n Functions for par \nObo.DBXref \nDBXref \nObo.OboTerm \nOboTerm \nObo.OboTermDef \nOboTermDef \nObo.TermSynonym \nTermSynonym \nObo.TermSynonymScope \nTermSynonymScope \nObo.parseDBXref \nparseDBXref \nObo.parseSynonym \nparseSynonym \nObo.createOboTerm \ncreateOboTerm \nObo.createOboTermDef \ncreateOboTermDef \nObo.parseOboTerms \nparseOboTerms","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo.html#parseDBXref","title":"Obo.parseDBXref","content":"Obo.parseDBXref \nparseDBXref \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo.html#parseSynonym","title":"Obo.parseSynonym","content":"Obo.parseSynonym \nparseSynonym \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo.html#createOboTerm","title":"Obo.createOboTerm","content":"Obo.createOboTerm \ncreateOboTerm \n Creates an obo term record","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo.html#createOboTermDef","title":"Obo.createOboTermDef","content":"Obo.createOboTermDef \ncreateOboTermDef \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo.html#parseOboTerms","title":"Obo.parseOboTerms","content":"Obo.parseOboTerms \nparseOboTerms \n Parse Obo Terms [Term] from seq\u003Cstring\u003E","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-dbxref.html","title":"DBXref","content":"DBXref \n \nDBXref.Name \nName \nDBXref.Description \nDescription \nDBXref.Modifiers \nModifiers","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-dbxref.html#Name","title":"DBXref.Name","content":"DBXref.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-dbxref.html#Description","title":"DBXref.Description","content":"DBXref.Description \nDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-dbxref.html#Modifiers","title":"DBXref.Modifiers","content":"DBXref.Modifiers \nModifiers \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html","title":"OboTerm","content":"OboTerm \n obo term record type \nOboTerm.Id \nId \nOboTerm.Name \nName \nOboTerm.IsAnonymous \nIsAnonymous \nOboTerm.AltIds \nAltIds \nOboTerm.Definition \nDefinition \nOboTerm.Comment \nComment \nOboTerm.Subsets \nSubsets \nOboTerm.Synonyms \nSynonyms \nOboTerm.Xrefs \nXrefs \nOboTerm.IsA \nIsA \nOboTerm.IntersectionOf \nIntersectionOf \nOboTerm.UnionOf \nUnionOf \nOboTerm.DisjointFrom \nDisjointFrom \nOboTerm.Relationships \nRelationships \nOboTerm.IsObsolete \nIsObsolete \nOboTerm.Replacedby \nReplacedby \nOboTerm.Consider \nConsider \nOboTerm.PropertyValues \nPropertyValues \nOboTerm.BuiltIn \nBuiltIn \nOboTerm.CreatedBy \nCreatedBy \nOboTerm.CreationDate \nCreationDate","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Id","title":"OboTerm.Id","content":"OboTerm.Id \nId \nThe unique id of the current term. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Name","title":"OboTerm.Name","content":"OboTerm.Name \nName \nThe term name. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#IsAnonymous","title":"OboTerm.IsAnonymous","content":"OboTerm.IsAnonymous \nIsAnonymous \nWhether or not the current object has an anonymous id. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#AltIds","title":"OboTerm.AltIds","content":"OboTerm.AltIds \nAltIds \nDefines an alternate id for this term. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Definition","title":"OboTerm.Definition","content":"OboTerm.Definition \nDefinition \nThe definition of the current term. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Comment","title":"OboTerm.Comment","content":"OboTerm.Comment \nComment \nA comment for this term. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Subsets","title":"OboTerm.Subsets","content":"OboTerm.Subsets \nSubsets \nThis tag indicates a term subset to which this term belongs. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Synonyms","title":"OboTerm.Synonyms","content":"OboTerm.Synonyms \nSynonyms \nThis tag gives a synonym for this term, some xrefs to describe the origins of the synonym, and may indicate a synonym category or scope information. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Xrefs","title":"OboTerm.Xrefs","content":"OboTerm.Xrefs \nXrefs \nCross references that describe analagous terms in another vocabularies. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#IsA","title":"OboTerm.IsA","content":"OboTerm.IsA \nIsA \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#IntersectionOf","title":"OboTerm.IntersectionOf","content":"OboTerm.IntersectionOf \nIntersectionOf \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#UnionOf","title":"OboTerm.UnionOf","content":"OboTerm.UnionOf \nUnionOf \nindicates that this term represents the union of several other terms. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#DisjointFrom","title":"OboTerm.DisjointFrom","content":"OboTerm.DisjointFrom \nDisjointFrom \nindicates that a term is disjoint from another, meaning that the two terms have no instances or subclasses in common. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Relationships","title":"OboTerm.Relationships","content":"OboTerm.Relationships \nRelationships \nThe value of this tag should be the relationship type id, and then the id of the target term, plus, optionally, other target terms. The relationship type ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#IsObsolete","title":"OboTerm.IsObsolete","content":"OboTerm.IsObsolete \nIsObsolete \nWhether or not this term is obsolete. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Replacedby","title":"OboTerm.Replacedby","content":"OboTerm.Replacedby \nReplacedby \nGives a term which replaces an obsolete term. The value is the id of the replacement term. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#Consider","title":"OboTerm.Consider","content":"OboTerm.Consider \nConsider \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#PropertyValues","title":"OboTerm.PropertyValues","content":"OboTerm.PropertyValues \nPropertyValues \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#BuiltIn","title":"OboTerm.BuiltIn","content":"OboTerm.BuiltIn \nBuiltIn \nWhether or not this term or relation is built in to the OBO format. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#CreatedBy","title":"OboTerm.CreatedBy","content":"OboTerm.CreatedBy \nCreatedBy \nName of the creator of the term. May be a short username, initials or ID. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-oboterm.html#CreationDate","title":"OboTerm.CreationDate","content":"OboTerm.CreationDate \nCreationDate \nDate of creation of the term specified in ISO 8601 format. Example: 2009-04-13T01:32:36Z","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-obotermdef.html","title":"OboTermDef","content":"OboTermDef \n \nOboTermDef.Id \nId \nOboTermDef.Name \nName \nOboTermDef.IsTransitive \nIsTransitive \nOboTermDef.IsCyclic \nIsCyclic","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-obotermdef.html#Id","title":"OboTermDef.Id","content":"OboTermDef.Id \nId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-obotermdef.html#Name","title":"OboTermDef.Name","content":"OboTermDef.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-obotermdef.html#IsTransitive","title":"OboTermDef.IsTransitive","content":"OboTermDef.IsTransitive \nIsTransitive \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-obotermdef.html#IsCyclic","title":"OboTermDef.IsCyclic","content":"OboTermDef.IsCyclic \nIsCyclic \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonym.html","title":"TermSynonym","content":"TermSynonym \n \nTermSynonym.Text \nText \nTermSynonym.Scope \nScope \nTermSynonym.TypeName \nTypeName \nTermSynonym.DBXrefs \nDBXrefs","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonym.html#Text","title":"TermSynonym.Text","content":"TermSynonym.Text \nText \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonym.html#Scope","title":"TermSynonym.Scope","content":"TermSynonym.Scope \nScope \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonym.html#TypeName","title":"TermSynonym.TypeName","content":"TermSynonym.TypeName \nTypeName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonym.html#DBXrefs","title":"TermSynonym.DBXrefs","content":"TermSynonym.DBXrefs \nDBXrefs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonymscope.html","title":"TermSynonymScope","content":"TermSynonymScope \n \nTermSynonymScope.ofString \nofString \nTermSynonymScope.Exact \nExact \nTermSynonymScope.Broad \nBroad \nTermSynonymScope.Narrow \nNarrow \nTermSynonymScope.Related \nRelated","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonymscope.html#ofString","title":"TermSynonymScope.ofString","content":"TermSynonymScope.ofString \nofString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonymscope.html#Exact","title":"TermSynonymScope.Exact","content":"TermSynonymScope.Exact \nExact \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonymscope.html#Broad","title":"TermSynonymScope.Broad","content":"TermSynonymScope.Broad \nBroad \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonymscope.html#Narrow","title":"TermSynonymScope.Narrow","content":"TermSynonymScope.Narrow \nNarrow \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-obo-termsynonymscope.html#Related","title":"TermSynonymScope.Related","content":"TermSynonymScope.Related \nRelated \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl.html","title":"OrthoMCL","content":"OrthoMCL \n \nOrthoMCL.EvalueConverter \nEvalueConverter \nOrthoMCL.OrthoMCL \nOrthoMCL \nOrthoMCL.no_Orthomcl_group \nno_Orthomcl_group \nOrthoMCL.readOrthoMCL \nreadOrthoMCL","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl.html#no_Orthomcl_group","title":"OrthoMCL.no_Orthomcl_group","content":"OrthoMCL.no_Orthomcl_group \nno_Orthomcl_group \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl.html#readOrthoMCL","title":"OrthoMCL.readOrthoMCL","content":"OrthoMCL.readOrthoMCL \nreadOrthoMCL \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl-evalueconverter.html","title":"EvalueConverter","content":"EvalueConverter \n \nEvalueConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl-evalueconverter.html#\u0060\u0060.ctor\u0060\u0060","title":"EvalueConverter.\u0060\u0060.ctor\u0060\u0060","content":"EvalueConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl-orthomcl.html","title":"OrthoMCL","content":"OrthoMCL \n \nOrthoMCL.Query_SeqId \nQuery_SeqId \nOrthoMCL.Subject_SeqId \nSubject_SeqId \nOrthoMCL.Orthomcl_group \nOrthomcl_group \nOrthoMCL.Evalue \nEvalue \nOrthoMCL.Identity \nIdentity \nOrthoMCL.Similarity \nSimilarity","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl-orthomcl.html#Query_SeqId","title":"OrthoMCL.Query_SeqId","content":"OrthoMCL.Query_SeqId \nQuery_SeqId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl-orthomcl.html#Subject_SeqId","title":"OrthoMCL.Subject_SeqId","content":"OrthoMCL.Subject_SeqId \nSubject_SeqId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl-orthomcl.html#Orthomcl_group","title":"OrthoMCL.Orthomcl_group","content":"OrthoMCL.Orthomcl_group \nOrthomcl_group \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl-orthomcl.html#Evalue","title":"OrthoMCL.Evalue","content":"OrthoMCL.Evalue \nEvalue \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl-orthomcl.html#Identity","title":"OrthoMCL.Identity","content":"OrthoMCL.Identity \nIdentity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-orthomcl-orthomcl.html#Similarity","title":"OrthoMCL.Similarity","content":"OrthoMCL.Similarity \nSimilarity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb.html","title":"PDB","content":"PDB \n \nPDB.ActivePatterns \nActivePatterns \nPDB.Atom \nAtom \nPDB.AtomName \nAtomName \nPDB.Coordinate \nCoordinate \nPDB.DBREF \nDBREF \nPDB.HetAtom \nHetAtom \nPDB.Terminator \nTerminator \nPDB.tryParseCoordinateLine \ntryParseCoordinateLine \nPDB.parseDBREFs \nparseDBREFs \nPDB.parseCoordinates \nparseCoordinates","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb.html#tryParseCoordinateLine","title":"PDB.tryParseCoordinateLine","content":"PDB.tryParseCoordinateLine \ntryParseCoordinateLine \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb.html#parseDBREFs","title":"PDB.parseDBREFs","content":"PDB.parseDBREFs \nparseDBREFs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb.html#parseCoordinates","title":"PDB.parseCoordinates","content":"PDB.parseCoordinates \nparseCoordinates \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-activepatterns.html","title":"ActivePatterns","content":"ActivePatterns \n \nActivePatterns.(|ATOM|_|) \n(|ATOM|_|) \nActivePatterns.(|HETATM|_|) \n(|HETATM|_|) \nActivePatterns.(|TER|_|) \n(|TER|_|) \nActivePatterns.(|DBREF|_|) \n(|DBREF|_|)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-activepatterns.html#(|ATOM|_|)","title":"ActivePatterns.(|ATOM|_|)","content":"ActivePatterns.(|ATOM|_|) \n(|ATOM|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-activepatterns.html#(|HETATM|_|)","title":"ActivePatterns.(|HETATM|_|)","content":"ActivePatterns.(|HETATM|_|) \n(|HETATM|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-activepatterns.html#(|TER|_|)","title":"ActivePatterns.(|TER|_|)","content":"ActivePatterns.(|TER|_|) \n(|TER|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-activepatterns.html#(|DBREF|_|)","title":"ActivePatterns.(|DBREF|_|)","content":"ActivePatterns.(|DBREF|_|) \n(|DBREF|_|) \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html","title":"Atom","content":"Atom \n atomic coordinate record containing the X,Y,Z orthogonal \uFFFD coordinates for atoms in standard residues (amino acids and nucleic acids). \nAtom.create \ncreate \nAtom.toString \ntoString \nAtom.SerialNumber \nSerialNumber \nAtom.Name \nName \nAtom.AlternateLocationIndicator \nAlternateLocationIndicator \nAtom.ResidueName \nResidueName \nAtom.ChainIdentifier \nChainIdentifier \nAtom.ResidueSequenceNumber \nResidueSequenceNumber \nAtom.ResidueInsertionCode \nResidueInsertionCode \nAtom.X \nX \nAtom.Y \nY \nAtom.Z \nZ \nAtom.Occupancy \nOccupancy \nAtom.TemperatureFactor \nTemperatureFactor \nAtom.SegmentIdentifier \nSegmentIdentifier \nAtom.ElementSymbol \nElementSymbol \nAtom.Charge \nCharge","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#create","title":"Atom.create","content":"Atom.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#toString","title":"Atom.toString","content":"Atom.toString \ntoString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#SerialNumber","title":"Atom.SerialNumber","content":"Atom.SerialNumber \nSerialNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#Name","title":"Atom.Name","content":"Atom.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#AlternateLocationIndicator","title":"Atom.AlternateLocationIndicator","content":"Atom.AlternateLocationIndicator \nAlternateLocationIndicator \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#ResidueName","title":"Atom.ResidueName","content":"Atom.ResidueName \nResidueName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#ChainIdentifier","title":"Atom.ChainIdentifier","content":"Atom.ChainIdentifier \nChainIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#ResidueSequenceNumber","title":"Atom.ResidueSequenceNumber","content":"Atom.ResidueSequenceNumber \nResidueSequenceNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#ResidueInsertionCode","title":"Atom.ResidueInsertionCode","content":"Atom.ResidueInsertionCode \nResidueInsertionCode \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#X","title":"Atom.X","content":"Atom.X \nX \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#Y","title":"Atom.Y","content":"Atom.Y \nY \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#Z","title":"Atom.Z","content":"Atom.Z \nZ \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#Occupancy","title":"Atom.Occupancy","content":"Atom.Occupancy \nOccupancy \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#TemperatureFactor","title":"Atom.TemperatureFactor","content":"Atom.TemperatureFactor \nTemperatureFactor \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#SegmentIdentifier","title":"Atom.SegmentIdentifier","content":"Atom.SegmentIdentifier \nSegmentIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#ElementSymbol","title":"Atom.ElementSymbol","content":"Atom.ElementSymbol \nElementSymbol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atom.html#Charge","title":"Atom.Charge","content":"Atom.Charge \nCharge \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atomname.html","title":"AtomName","content":"AtomName \n \nAtomName.ofString \nofString \nAtomName.toString \ntoString \nAtomName.ChemicalSymbol \nChemicalSymbol \nAtomName.RemotenessIndicator \nRemotenessIndicator \nAtomName.BranchDesignator \nBranchDesignator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atomname.html#ofString","title":"AtomName.ofString","content":"AtomName.ofString \nofString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atomname.html#toString","title":"AtomName.toString","content":"AtomName.toString \ntoString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atomname.html#ChemicalSymbol","title":"AtomName.ChemicalSymbol","content":"AtomName.ChemicalSymbol \nChemicalSymbol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atomname.html#RemotenessIndicator","title":"AtomName.RemotenessIndicator","content":"AtomName.RemotenessIndicator \nRemotenessIndicator \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-atomname.html#BranchDesignator","title":"AtomName.BranchDesignator","content":"AtomName.BranchDesignator \nBranchDesignator \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-coordinate.html","title":"Coordinate","content":"Coordinate \n \nCoordinate.toString \ntoString \nCoordinate.Atom \nAtom \nCoordinate.HetAtom \nHetAtom \nCoordinate.Terminator \nTerminator","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-coordinate.html#toString","title":"Coordinate.toString","content":"Coordinate.toString \ntoString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-coordinate.html#Atom","title":"Coordinate.Atom","content":"Coordinate.Atom \nAtom \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-coordinate.html#HetAtom","title":"Coordinate.HetAtom","content":"Coordinate.HetAtom \nHetAtom \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-coordinate.html#Terminator","title":"Coordinate.Terminator","content":"Coordinate.Terminator \nTerminator \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html","title":"DBREF","content":"DBREF \nThe DBREF record provides cross-reference links between PDB sequences (what appears in SEQRES record) and a corresponding database sequence.  \nDBREF.create \ncreate \nDBREF.IdCode \nIdCode \nDBREF.ChainIdentifier \nChainIdentifier \nDBREF.SeqBegin \nSeqBegin \nDBREF.InsertBegin \nInsertBegin \nDBREF.SeqEnd \nSeqEnd \nDBREF.InsertEnd \nInsertEnd \nDBREF.Database \nDatabase \nDBREF.DbAccession \nDbAccession \nDBREF.DbIdCode \nDbIdCode \nDBREF.DbSeqBegin \nDbSeqBegin \nDBREF.IDBnsBeg \nIDBnsBeg \nDBREF.DbSeqEnd \nDbSeqEnd \nDBREF.DbInsEnd \nDbInsEnd","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#create","title":"DBREF.create","content":"DBREF.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#IdCode","title":"DBREF.IdCode","content":"DBREF.IdCode \nIdCode \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#ChainIdentifier","title":"DBREF.ChainIdentifier","content":"DBREF.ChainIdentifier \nChainIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#SeqBegin","title":"DBREF.SeqBegin","content":"DBREF.SeqBegin \nSeqBegin \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#InsertBegin","title":"DBREF.InsertBegin","content":"DBREF.InsertBegin \nInsertBegin \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#SeqEnd","title":"DBREF.SeqEnd","content":"DBREF.SeqEnd \nSeqEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#InsertEnd","title":"DBREF.InsertEnd","content":"DBREF.InsertEnd \nInsertEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#Database","title":"DBREF.Database","content":"DBREF.Database \nDatabase \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#DbAccession","title":"DBREF.DbAccession","content":"DBREF.DbAccession \nDbAccession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#DbIdCode","title":"DBREF.DbIdCode","content":"DBREF.DbIdCode \nDbIdCode \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#DbSeqBegin","title":"DBREF.DbSeqBegin","content":"DBREF.DbSeqBegin \nDbSeqBegin \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#IDBnsBeg","title":"DBREF.IDBnsBeg","content":"DBREF.IDBnsBeg \nIDBnsBeg \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#DbSeqEnd","title":"DBREF.DbSeqEnd","content":"DBREF.DbSeqEnd \nDbSeqEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-dbref.html#DbInsEnd","title":"DBREF.DbInsEnd","content":"DBREF.DbInsEnd \nDbInsEnd \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html","title":"HetAtom","content":"HetAtom \n atomic coordinate record containing the X,Y,Z orthogonal \uFFFD coordinates for atoms in nonstandard residues. Nonstandard residues include inhibitors, cofactors, ions, and solvent. The only functional difference from ATOM records is that HETATM residues are by default not connected to other residues. Note that water residues should be in HETATM records. \nHetAtom.create \ncreate \nHetAtom.toString \ntoString \nHetAtom.SerialNumber \nSerialNumber \nHetAtom.Name \nName \nHetAtom.AlternateLocationIndicator \nAlternateLocationIndicator \nHetAtom.ResidueName \nResidueName \nHetAtom.ChainIdentifier \nChainIdentifier \nHetAtom.ResidueSequenceNumber \nResidueSequenceNumber \nHetAtom.ResidueInsertionCode \nResidueInsertionCode \nHetAtom.X \nX \nHetAtom.Y \nY \nHetAtom.Z \nZ \nHetAtom.Occupancy \nOccupancy \nHetAtom.TemperatureFactor \nTemperatureFactor \nHetAtom.SegmentIdentifier \nSegmentIdentifier \nHetAtom.ElementSymbol \nElementSymbol \nHetAtom.Charge \nCharge","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#create","title":"HetAtom.create","content":"HetAtom.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#toString","title":"HetAtom.toString","content":"HetAtom.toString \ntoString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#SerialNumber","title":"HetAtom.SerialNumber","content":"HetAtom.SerialNumber \nSerialNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#Name","title":"HetAtom.Name","content":"HetAtom.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#AlternateLocationIndicator","title":"HetAtom.AlternateLocationIndicator","content":"HetAtom.AlternateLocationIndicator \nAlternateLocationIndicator \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#ResidueName","title":"HetAtom.ResidueName","content":"HetAtom.ResidueName \nResidueName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#ChainIdentifier","title":"HetAtom.ChainIdentifier","content":"HetAtom.ChainIdentifier \nChainIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#ResidueSequenceNumber","title":"HetAtom.ResidueSequenceNumber","content":"HetAtom.ResidueSequenceNumber \nResidueSequenceNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#ResidueInsertionCode","title":"HetAtom.ResidueInsertionCode","content":"HetAtom.ResidueInsertionCode \nResidueInsertionCode \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#X","title":"HetAtom.X","content":"HetAtom.X \nX \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#Y","title":"HetAtom.Y","content":"HetAtom.Y \nY \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#Z","title":"HetAtom.Z","content":"HetAtom.Z \nZ \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#Occupancy","title":"HetAtom.Occupancy","content":"HetAtom.Occupancy \nOccupancy \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#TemperatureFactor","title":"HetAtom.TemperatureFactor","content":"HetAtom.TemperatureFactor \nTemperatureFactor \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#SegmentIdentifier","title":"HetAtom.SegmentIdentifier","content":"HetAtom.SegmentIdentifier \nSegmentIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#ElementSymbol","title":"HetAtom.ElementSymbol","content":"HetAtom.ElementSymbol \nElementSymbol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-hetatom.html#Charge","title":"HetAtom.Charge","content":"HetAtom.Charge \nCharge \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-terminator.html","title":"Terminator","content":"Terminator \n \nTerminator.create \ncreate \nTerminator.toString \ntoString \nTerminator.SerialNumber \nSerialNumber \nTerminator.ResidueName \nResidueName \nTerminator.ChainIdentifier \nChainIdentifier \nTerminator.ResidueSequenceNumber \nResidueSequenceNumber \nTerminator.ResidueInsertionCode \nResidueInsertionCode","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-terminator.html#create","title":"Terminator.create","content":"Terminator.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-terminator.html#toString","title":"Terminator.toString","content":"Terminator.toString \ntoString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-terminator.html#SerialNumber","title":"Terminator.SerialNumber","content":"Terminator.SerialNumber \nSerialNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-terminator.html#ResidueName","title":"Terminator.ResidueName","content":"Terminator.ResidueName \nResidueName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-terminator.html#ChainIdentifier","title":"Terminator.ChainIdentifier","content":"Terminator.ChainIdentifier \nChainIdentifier \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-terminator.html#ResidueSequenceNumber","title":"Terminator.ResidueSequenceNumber","content":"Terminator.ResidueSequenceNumber \nResidueSequenceNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-pdb-terminator.html#ResidueInsertionCode","title":"Terminator.ResidueInsertionCode","content":"Terminator.ResidueInsertionCode \nResidueInsertionCode \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft.html","title":"SOFT","content":"SOFT \n \nSOFT.Generated \nGenerated \nSOFT.Platform \nPlatform \nSOFT.Series \nSeries \nSOFT.Tokenization \nTokenization \nSOFT.DataTable \nDataTable \nSOFT.PlatformRecord \nPlatformRecord \nSOFT.SampleRecord \nSampleRecord \nSOFT.SeriesRecord \nSeriesRecord","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated.html","title":"Generated","content":"Generated \n \nGenerated.Specifications \nSpecifications","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications.html","title":"Specifications","content":"Specifications \n \nSpecifications.SOFTPlatformSpecifications \nSOFTPlatformSpecifications \nSpecifications.SOFTSampleSpecifications \nSOFTSampleSpecifications \nSpecifications.SOFTSeriesSpecifications \nSOFTSeriesSpecifications","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html","title":"SOFTPlatformSpecifications","content":"SOFTPlatformSpecifications \n \nSOFTPlatformSpecifications.Accession \nAccession \nSOFTPlatformSpecifications.Title \nTitle \nSOFTPlatformSpecifications.Distribution \nDistribution \nSOFTPlatformSpecifications.Technology \nTechnology \nSOFTPlatformSpecifications.Organism \nOrganism \nSOFTPlatformSpecifications.Manufacturer \nManufacturer \nSOFTPlatformSpecifications.ManufactureProtocol \nManufactureProtocol \nSOFTPlatformSpecifications.CatalogNumber \nCatalogNumber \nSOFTPlatformSpecifications.WebLink \nWebLink \nSOFTPlatformSpecifications.Support \nSupport \nSOFTPlatformSpecifications.Coating \nCoating \nSOFTPlatformSpecifications.Description \nDescription \nSOFTPlatformSpecifications.Contributor \nContributor \nSOFTPlatformSpecifications.PubmedId \nPubmedId \nSOFTPlatformSpecifications.GeoAccession \nGeoAccession \nSOFTPlatformSpecifications.TableBegin \nTableBegin \nSOFTPlatformSpecifications.TableEnd \nTableEnd \nSOFTPlatformSpecifications.AdditionalAttribute \nAdditionalAttribute \nSOFTPlatformSpecifications.TableHeader \nTableHeader \nSOFTPlatformSpecifications.TableData \nTableData","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Accession","title":"SOFTPlatformSpecifications.Accession","content":"SOFTPlatformSpecifications.Accession \nAccession \nProvide an identifier for this entity. This identifier is used only as an internal reference within a given file. The identifier will not appear on final GEO records. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Title","title":"SOFTPlatformSpecifications.Title","content":"SOFTPlatformSpecifications.Title \nTitle \n\u0022Provide a unique title that describes your Platform. We suggest that you use the system [institution/lab]-[species]-[number of features]-[version], e.g. \u0022\u0022FHCRC Mouse 15K v1.0\u0022\u0022.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Distribution","title":"SOFTPlatformSpecifications.Distribution","content":"SOFTPlatformSpecifications.Distribution \nDistribution \n\u0022Microarrays are \u0027commercial\u0027, \u0027non-commercial\u0027, or \u0027custom-commercial\u0027 in accordance with how the array was manufactured. Use \u0027virtual\u0027 only if creating a virtual definition for MPSS, SARST, or RT-PCR data.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Technology","title":"SOFTPlatformSpecifications.Technology","content":"SOFTPlatformSpecifications.Technology \nTechnology \nSelect the category that best describes the Platform technology. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Organism","title":"SOFTPlatformSpecifications.Organism","content":"SOFTPlatformSpecifications.Organism \nOrganism \nIdentify the organism(s) from which the features on the Platform were designed or derived. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Manufacturer","title":"SOFTPlatformSpecifications.Manufacturer","content":"SOFTPlatformSpecifications.Manufacturer \nManufacturer \n\u0022Provide the name of the company, facility or laboratory where the array was manufactured or produced.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#ManufactureProtocol","title":"SOFTPlatformSpecifications.ManufactureProtocol","content":"SOFTPlatformSpecifications.ManufactureProtocol \nManufactureProtocol \n\u0022Describe the array manufacture protocol. Include as much detail as possible, e.g., clone/primer set identification and preparation, strandedness/length, arrayer hardware/software, spotting protocols. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#CatalogNumber","title":"SOFTPlatformSpecifications.CatalogNumber","content":"SOFTPlatformSpecifications.CatalogNumber \nCatalogNumber \nProvide the manufacturer catalog number for commercially-available arrays. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#WebLink","title":"SOFTPlatformSpecifications.WebLink","content":"SOFTPlatformSpecifications.WebLink \nWebLink \nSpecify a Web link that directs users to supplementary information about the array. Please restrict to Web sites that you know are stable. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Support","title":"SOFTPlatformSpecifications.Support","content":"SOFTPlatformSpecifications.Support \nSupport \n\u0022Provide the surface type of the array, e.g., glass, nitrocellulose, nylon, silicon, unknown.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Coating","title":"SOFTPlatformSpecifications.Coating","content":"SOFTPlatformSpecifications.Coating \nCoating \n\u0022Provide the coating of the array, e.g., aminosilane, quartz, polysine, unknown.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Description","title":"SOFTPlatformSpecifications.Description","content":"SOFTPlatformSpecifications.Description \nDescription \n\u0022Provide any additional descriptive information not captured in another field, e.g., array and/or feature physical dimensions, element grid system.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#Contributor","title":"SOFTPlatformSpecifications.Contributor","content":"SOFTPlatformSpecifications.Contributor \nContributor \nList all people associated with this array design. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#PubmedId","title":"SOFTPlatformSpecifications.PubmedId","content":"SOFTPlatformSpecifications.PubmedId \nPubmedId \nSpecify a valid PubMed identifier (PMID) that references a published article that describes the array. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#GeoAccession","title":"SOFTPlatformSpecifications.GeoAccession","content":"SOFTPlatformSpecifications.GeoAccession \nGeoAccession \nOnly use for performing\uFFFDupdates\uFFFDto existing GEO records. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#TableBegin","title":"SOFTPlatformSpecifications.TableBegin","content":"SOFTPlatformSpecifications.TableBegin \nTableBegin \nIndicates the start of the data table. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#TableEnd","title":"SOFTPlatformSpecifications.TableEnd","content":"SOFTPlatformSpecifications.TableEnd \nTableEnd \nIndicates the end of the data table. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#AdditionalAttribute","title":"SOFTPlatformSpecifications.AdditionalAttribute","content":"SOFTPlatformSpecifications.AdditionalAttribute \nAdditionalAttribute \nCustom Attributes Used in the SOFT file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#TableHeader","title":"SOFTPlatformSpecifications.TableHeader","content":"SOFTPlatformSpecifications.TableHeader \nTableHeader \nTable formatted data header","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softplatformspecifications.html#TableData","title":"SOFTPlatformSpecifications.TableData","content":"SOFTPlatformSpecifications.TableData \nTableData \nTable formatted data","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html","title":"SOFTSampleSpecifications","content":"SOFTSampleSpecifications \n \nSOFTSampleSpecifications.Accession \nAccession \nSOFTSampleSpecifications.Title \nTitle \nSOFTSampleSpecifications.SupplementaryFile \nSupplementaryFile \nSOFTSampleSpecifications.Table \nTable \nSOFTSampleSpecifications.SourceName \nSourceName \nSOFTSampleSpecifications.Organism \nOrganism \nSOFTSampleSpecifications.Characteristics \nCharacteristics \nSOFTSampleSpecifications.BiomaterialProvider \nBiomaterialProvider \nSOFTSampleSpecifications.TreatmentProtocol \nTreatmentProtocol \nSOFTSampleSpecifications.GrowthProtocol \nGrowthProtocol \nSOFTSampleSpecifications.Molecule \nMolecule \nSOFTSampleSpecifications.ExtractProtocol \nExtractProtocol \nSOFTSampleSpecifications.Label \nLabel \nSOFTSampleSpecifications.LabelProtocol \nLabelProtocol \nSOFTSampleSpecifications.HybProtocol \nHybProtocol \nSOFTSampleSpecifications.ScanProtocol \nScanProtocol \nSOFTSampleSpecifications.DataProcessing \nDataProcessing \nSOFTSampleSpecifications.Description \nDescription \nSOFTSampleSpecifications.PlatformId \nPlatformId \nSOFTSampleSpecifications.GeoAccession \nGeoAccession \nSOFTSampleSpecifications.Anchor \nAnchor \nSOFTSampleSpecifications.Type \nType \nSOFTSampleSpecifications.TagCount \nTagCount \nSOFTSampleSpecifications.TagLength \nTagLength \nSOFTSampleSpecifications.TableBegin \nTableBegin \nSOFTSampleSpecifications.TableEnd \nTableEnd \nSOFTSampleSpecifications.Relation \nRelation \nSOFTSampleSpecifications.AdditionalAttribute \nAdditionalAttribute \nSOFTSampleSpecifications.TableHeader \nTableHeader \nSOFTSampleSpecifications.TableData \nTableData","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Accession","title":"SOFTSampleSpecifications.Accession","content":"SOFTSampleSpecifications.Accession \nAccession \nProvide an identifier for this entity. This identifier is used only as an internal reference within a given file. The identifier will not appear on final GEO records. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Title","title":"SOFTSampleSpecifications.Title","content":"SOFTSampleSpecifications.Title \nTitle \n\u0022Provide a unique title that describes this Sample. We suggest that you use the system [biomaterial]-[condition(s)]-[replicate number], e.g., Muscle_exercised_60min_rep2.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#SupplementaryFile","title":"SOFTSampleSpecifications.SupplementaryFile","content":"SOFTSampleSpecifications.SupplementaryFile \nSupplementaryFile \n\u0022Examples of supplementary file types include original Affymetrix CEL and EXP files, GenePix GPR files, and TIFF image files. Supplementary files should be zipped or tarred together with the SOFT file at time of submission (do not include any sub-directories or sub-folders in your zip/tar archive). Provision of supplementary raw data files facilitates the unambiguous interpretation of data and potential verification of conclusions as set forth in the MIAME guidelines.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Table","title":"SOFTSampleSpecifications.Table","content":"SOFTSampleSpecifications.Table \nTable \n- Affymetrix CHP file name:\u0022If your processed data are CHP files, you can reference the CHP file name in this field. If your manuscript discusses data processed by RMA or another algorithm, we recommend providing those values in the\uFFFDtable section. There is no need to specify the !Sample_platform_id when CHP files are supplied. All external files should be zipped or tarred together with the SOFT file at time of submission.\u0022- Tab-delimited table file name:\u0022If it is convenient for you to generate, you can reference the name of an external tab-delimited table file (see format) in this field, rather than include the table in the !Sample_table_begin section. All external files should be zipped or tarred together with the SOFT file at time of submission.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#SourceName","title":"SOFTSampleSpecifications.SourceName","content":"SOFTSampleSpecifications.SourceName \nSourceName \n\u0022Briefly identify the biological material and the experimental variable(s), e.g., vastus lateralis muscle, exercised, 60 min.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Organism","title":"SOFTSampleSpecifications.Organism","content":"SOFTSampleSpecifications.Organism \nOrganism \nIdentify the organism(s) from which the biological material was derived. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Characteristics","title":"SOFTSampleSpecifications.Characteristics","content":"SOFTSampleSpecifications.Characteristics \nCharacteristics \n\u0022Describe all available characteristics of the biological source, including factors not necessarily under investigation. Provide in \u0027Tag: Value\u0027 format, where \u0027Tag\u0027 is a type of characteristic (e.g. \u0022\u0022gender\u0022\u0022, \u0022\u0022strain\u0022\u0022, \u0022\u0022tissue\u0022\u0022, \u0022\u0022developmental stage\u0022\u0022, \u0022\u0022tumor stage\u0022\u0022, etc), and \u0027Value\u0027 is the value for each tag (e.g. \u0022\u0022female\u0022\u0022, \u0022\u0022129SV\u0022\u0022, \u0022\u0022brain\u0022\u0022, \u0022\u0022embryo\u0022\u0022, etc). Include as many characteristics fields as necessary to thoroughly describe your Samples.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#BiomaterialProvider","title":"SOFTSampleSpecifications.BiomaterialProvider","content":"SOFTSampleSpecifications.BiomaterialProvider \nBiomaterialProvider \n\u0022Specify the name of the company, laboratory or person that provided the biological material.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#TreatmentProtocol","title":"SOFTSampleSpecifications.TreatmentProtocol","content":"SOFTSampleSpecifications.TreatmentProtocol \nTreatmentProtocol \nDescribe any treatments applied to the biological material prior to extract preparation. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#GrowthProtocol","title":"SOFTSampleSpecifications.GrowthProtocol","content":"SOFTSampleSpecifications.GrowthProtocol \nGrowthProtocol \nDescribe the conditions that were used to grow or maintain organisms or cells prior to extract preparation. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Molecule","title":"SOFTSampleSpecifications.Molecule","content":"SOFTSampleSpecifications.Molecule \nMolecule \nSpecify the type of molecule that was extracted from the biological material. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#ExtractProtocol","title":"SOFTSampleSpecifications.ExtractProtocol","content":"SOFTSampleSpecifications.ExtractProtocol \nExtractProtocol \nDescribe the protocol used to isolate the extract material. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Label","title":"SOFTSampleSpecifications.Label","content":"SOFTSampleSpecifications.Label \nLabel \n\u0022Specify the compound used to label the extract e.g., biotin, Cy3, Cy5, 33P.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#LabelProtocol","title":"SOFTSampleSpecifications.LabelProtocol","content":"SOFTSampleSpecifications.LabelProtocol \nLabelProtocol \nDescribe the protocol used to label the extract. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#HybProtocol","title":"SOFTSampleSpecifications.HybProtocol","content":"SOFTSampleSpecifications.HybProtocol \nHybProtocol \n\u0022Describe the protocols used for hybridization, blocking and washing, and any post-processing steps such as staining. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#ScanProtocol","title":"SOFTSampleSpecifications.ScanProtocol","content":"SOFTSampleSpecifications.ScanProtocol \nScanProtocol \n\u0022Describe the scanning and image acquisition protocols, hardware, and software. You can include as much text as you need to thoroughly describe the protocol; it is strongly recommended that complete protocol descriptions are provided within your submission.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#DataProcessing","title":"SOFTSampleSpecifications.DataProcessing","content":"SOFTSampleSpecifications.DataProcessing \nDataProcessing \n\u0022Provide details of how data in the VALUE column of your table were generated and calculated, i.e., normalization method, data selection procedures and parameters, transformation algorithm (e.g., MAS5.0), and scaling parameters. You can include as much text as you need to thoroughly describe the processing procedures.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Description","title":"SOFTSampleSpecifications.Description","content":"SOFTSampleSpecifications.Description \nDescription \n\u0022Include any additional information not provided in the other fields, or paste in broad descriptions that cannot be easily dissected into the other fields.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#PlatformId","title":"SOFTSampleSpecifications.PlatformId","content":"SOFTSampleSpecifications.PlatformId \nPlatformId \n\u0022Reference the Platform upon which this hybridization was performed. Reference the Platform accession number (GPLxxx) if the Platform already exists in GEO, or reference the ^Platform identifier if the Platform record is being batch submitted within the same SOFT file. To identify the accession number of an existing commercial Platform in GEO, use the\uFFFDFIND PLATFORM\uFFFDtool.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#GeoAccession","title":"SOFTSampleSpecifications.GeoAccession","content":"SOFTSampleSpecifications.GeoAccession \nGeoAccession \nOnly use for performing\uFFFDupdates\uFFFDto existing GEO records. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Anchor","title":"SOFTSampleSpecifications.Anchor","content":"SOFTSampleSpecifications.Anchor \nAnchor \nUse for SAGE submissions only. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Type","title":"SOFTSampleSpecifications.Type","content":"SOFTSampleSpecifications.Type \nType \nUse for SAGE submissions only. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#TagCount","title":"SOFTSampleSpecifications.TagCount","content":"SOFTSampleSpecifications.TagCount \nTagCount \nUse for SAGE submissions only. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#TagLength","title":"SOFTSampleSpecifications.TagLength","content":"SOFTSampleSpecifications.TagLength \nTagLength \nUse for SAGE submissions only. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#TableBegin","title":"SOFTSampleSpecifications.TableBegin","content":"SOFTSampleSpecifications.TableBegin \nTableBegin \nIndicates the start of the data table. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#TableEnd","title":"SOFTSampleSpecifications.TableEnd","content":"SOFTSampleSpecifications.TableEnd \nTableEnd \nIndicates the end of the data table. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#Relation","title":"SOFTSampleSpecifications.Relation","content":"SOFTSampleSpecifications.Relation \nRelation \n\u0022Sample relation, e.g. SRA accession or BioSample id\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#AdditionalAttribute","title":"SOFTSampleSpecifications.AdditionalAttribute","content":"SOFTSampleSpecifications.AdditionalAttribute \nAdditionalAttribute \nCustom Attributes Used in the SOFT file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#TableHeader","title":"SOFTSampleSpecifications.TableHeader","content":"SOFTSampleSpecifications.TableHeader \nTableHeader \nTable formatted data header","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softsamplespecifications.html#TableData","title":"SOFTSampleSpecifications.TableData","content":"SOFTSampleSpecifications.TableData \nTableData \nTable formatted data","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html","title":"SOFTSeriesSpecifications","content":"SOFTSeriesSpecifications \n \nSOFTSeriesSpecifications.Accession \nAccession \nSOFTSeriesSpecifications.Title \nTitle \nSOFTSeriesSpecifications.Summary \nSummary \nSOFTSeriesSpecifications.OverallDesign \nOverallDesign \nSOFTSeriesSpecifications.PubmedId \nPubmedId \nSOFTSeriesSpecifications.WebLink \nWebLink \nSOFTSeriesSpecifications.Contributor \nContributor \nSOFTSeriesSpecifications.Variable \nVariable \nSOFTSeriesSpecifications.VariableDescription \nVariableDescription \nSOFTSeriesSpecifications.VariableSampleList \nVariableSampleList \nSOFTSeriesSpecifications.Repeats \nRepeats \nSOFTSeriesSpecifications.RepeatsSampleList \nRepeatsSampleList \nSOFTSeriesSpecifications.SampleId \nSampleId \nSOFTSeriesSpecifications.GeoAccession \nGeoAccession \nSOFTSeriesSpecifications.Type \nType \nSOFTSeriesSpecifications.SubmissionDate \nSubmissionDate \nSOFTSeriesSpecifications.AdditionalAttribute \nAdditionalAttribute","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#Accession","title":"SOFTSeriesSpecifications.Accession","content":"SOFTSeriesSpecifications.Accession \nAccession \nProvide an identifier for this entity. This identifier is used only as an internal reference within a given file. The identifier will not appear on final GEO records. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#Title","title":"SOFTSeriesSpecifications.Title","content":"SOFTSeriesSpecifications.Title \nTitle \nProvide a unique title that describes the overall study. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#Summary","title":"SOFTSeriesSpecifications.Summary","content":"SOFTSeriesSpecifications.Summary \nSummary \nSummarize the goals and objectives of this study. The abstract from the associated publication may be suitable. You can include as much text as you need to thoroughly describe the study. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#OverallDesign","title":"SOFTSeriesSpecifications.OverallDesign","content":"SOFTSeriesSpecifications.OverallDesign \nOverallDesign \n\u0022Provide a description of the experimental design. Indicate how many Samples are analyzed, if replicates are included, are there control and/or reference Samples, dye-swaps, etc.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#PubmedId","title":"SOFTSeriesSpecifications.PubmedId","content":"SOFTSeriesSpecifications.PubmedId \nPubmedId \n\u0022Specify a valid PubMed identifier (PMID) that references a published article describing this study. Most commonly, this information is not available at the time of submission - it can be added later once the data are published.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#WebLink","title":"SOFTSeriesSpecifications.WebLink","content":"SOFTSeriesSpecifications.WebLink \nWebLink \nSpecify a Web link that directs users to supplementary information about the study. Please restrict to Web sites that you know are stable. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#Contributor","title":"SOFTSeriesSpecifications.Contributor","content":"SOFTSeriesSpecifications.Contributor \nContributor \nList all people associated with this study. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#Variable","title":"SOFTSeriesSpecifications.Variable","content":"SOFTSeriesSpecifications.Variable \nVariable \n\u0022Indicate the variable type(s) investigated in this study, e.g.,\u0022!Series_variable_1 = age!Series_variable_2 = age\u0022NOTE - this information is optional and does not appear in Series records or downloads, but will be used to assemble corresponding GEO DataSet records.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#VariableDescription","title":"SOFTSeriesSpecifications.VariableDescription","content":"SOFTSeriesSpecifications.VariableDescription \nVariableDescription \n\u0022Describe each variable, e.g.,\u0022!Series_variable_description_1 = 2 months!Series_variable_description_2 = 12 months\u0022NOTE - this information is optional and does not appear in Series records or downloads, but will be used to assemble corresponding GEO DataSet records.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#VariableSampleList","title":"SOFTSeriesSpecifications.VariableSampleList","content":"SOFTSeriesSpecifications.VariableSampleList \nVariableSampleList \n\u0022List which Samples belong to each group, e.g.,\u0022\u0022!Series_variable_sample_list_1 = samA, samB\u0022\u0022!Series_variable_sample_list_2 = samC, samD\u0022\u0022NOTE - this information is optional and does not appear in Series records or downloads, but will be used to assemble corresponding GEO DataSet records.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#Repeats","title":"SOFTSeriesSpecifications.Repeats","content":"SOFTSeriesSpecifications.Repeats \nRepeats \n\u0022Indicate the repeat type(s), e.g.,\u0022!Series_repeats_1 = biological replicate!Series_repeats_2 = biological replicate\u0022NOTE - this information is optional and does not appear in Series records or downloads, but will be used to assemble corresponding GEO DataSet records.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#RepeatsSampleList","title":"SOFTSeriesSpecifications.RepeatsSampleList","content":"SOFTSeriesSpecifications.RepeatsSampleList \nRepeatsSampleList \n\u0022List which Samples belong to each group, e.g.,\u0022\u0022!Series_repeats_sample_list_1 = samA, samB\u0022\u0022!Series_repeats_sample_list_2 = samC, samD\u0022\u0022NOTE - this information is optional and does not appear in Series records or downloads, but will be used to assemble corresponding GEO DataSet records.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#SampleId","title":"SOFTSeriesSpecifications.SampleId","content":"SOFTSeriesSpecifications.SampleId \nSampleId \n\u0022Reference the Samples that make up this experiment. Reference the Sample accession numbers (GSMxxx) if the Samples already exists in GEO, or reference the ^Sample identifiers if they are being submitted in the same file.\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#GeoAccession","title":"SOFTSeriesSpecifications.GeoAccession","content":"SOFTSeriesSpecifications.GeoAccession \nGeoAccession \nOnly use for performing\uFFFDupdates\uFFFDto existing GEO records. ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#Type","title":"SOFTSeriesSpecifications.Type","content":"SOFTSeriesSpecifications.Type \nType \n\u0022Indicates the type(s) of experiment conducted in the Series\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#SubmissionDate","title":"SOFTSeriesSpecifications.SubmissionDate","content":"SOFTSeriesSpecifications.SubmissionDate \nSubmissionDate \n\u0022Time of submission to GEO\u0022 ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-generated-specifications-softseriesspecifications.html#AdditionalAttribute","title":"SOFTSeriesSpecifications.AdditionalAttribute","content":"SOFTSeriesSpecifications.AdditionalAttribute \nAdditionalAttribute \nCustom Attributes Used in the SOFT file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform.html","title":"Platform","content":"Platform \n \nPlatform.GPL \nGPL \nPlatform.fromFile \nfromFile \nPlatform.fromFileEnumerator \nfromFileEnumerator \nPlatform.getAssociatedSeries \ngetAssociatedSeries \nPlatform.getAssociatedSeriesAccessions \ngetAssociatedSeriesAccessions \nPlatform.getAssociatedSamples \ngetAssociatedSamples \nPlatform.getAssociatedSampleAccessions \ngetAssociatedSampleAccessions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform.html#fromFile","title":"Platform.fromFile","content":"Platform.fromFile \nfromFile \nRead GEO platform metadata and associated sample/series Metadata from a SOFT formatted platform file (GPLXXXXX_family.soft)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform.html#fromFileEnumerator","title":"Platform.fromFileEnumerator","content":"Platform.fromFileEnumerator \nfromFileEnumerator \nRead GEO platform metadata and associated sample/series Metadata from a sequence of strings representing a SOFT formatted platform","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform.html#getAssociatedSeries","title":"Platform.getAssociatedSeries","content":"Platform.getAssociatedSeries \ngetAssociatedSeries \nreturns series metadata associated with the input platform GPL representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform.html#getAssociatedSeriesAccessions","title":"Platform.getAssociatedSeriesAccessions","content":"Platform.getAssociatedSeriesAccessions \ngetAssociatedSeriesAccessions \nreturns series accessions associated with the input platform GPL representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform.html#getAssociatedSamples","title":"Platform.getAssociatedSamples","content":"Platform.getAssociatedSamples \ngetAssociatedSamples \nreturns sample metadata associated with the input platform GPL representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform.html#getAssociatedSampleAccessions","title":"Platform.getAssociatedSampleAccessions","content":"Platform.getAssociatedSampleAccessions \ngetAssociatedSampleAccessions \nreturns sample accessions associated with the input platform GPL representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform-gpl.html","title":"GPL","content":"GPL \n \nGPL.PlatformMetadata \nPlatformMetadata \nGPL.SeriesMetadata \nSeriesMetadata \nGPL.SampleMetadata \nSampleMetadata","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform-gpl.html#PlatformMetadata","title":"GPL.PlatformMetadata","content":"GPL.PlatformMetadata \nPlatformMetadata \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform-gpl.html#SeriesMetadata","title":"GPL.SeriesMetadata","content":"GPL.SeriesMetadata \nSeriesMetadata \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platform-gpl.html#SampleMetadata","title":"GPL.SampleMetadata","content":"GPL.SampleMetadata \nSampleMetadata \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series.html","title":"Series","content":"Series \n \nSeries.GSE \nGSE \nSeries.fromFile \nfromFile \nSeries.fromFileEnumerator \nfromFileEnumerator \nSeries.getAssociatedPlatforms \ngetAssociatedPlatforms \nSeries.getAssociatedPlatformAccessions \ngetAssociatedPlatformAccessions \nSeries.getAssociatedSamples \ngetAssociatedSamples \nSeries.getAssociatedSampleAccessions \ngetAssociatedSampleAccessions","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series.html#fromFile","title":"Series.fromFile","content":"Series.fromFile \nfromFile \nRead GEO series metadata and associated sample/platform metadata from a SOFT formatted series file (GPLXXXXX_family.soft)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series.html#fromFileEnumerator","title":"Series.fromFileEnumerator","content":"Series.fromFileEnumerator \nfromFileEnumerator \nRead GEO series metadata and associated sample/platform metadata from a sequence of strings representing a SOFT formatted series","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series.html#getAssociatedPlatforms","title":"Series.getAssociatedPlatforms","content":"Series.getAssociatedPlatforms \ngetAssociatedPlatforms \nreturns platform metadata associated with the input series GSE representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series.html#getAssociatedPlatformAccessions","title":"Series.getAssociatedPlatformAccessions","content":"Series.getAssociatedPlatformAccessions \ngetAssociatedPlatformAccessions \nreturns platform accessions associated with the input series GSE representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series.html#getAssociatedSamples","title":"Series.getAssociatedSamples","content":"Series.getAssociatedSamples \ngetAssociatedSamples \nreturns sample metadata associated with the input series GSE representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series.html#getAssociatedSampleAccessions","title":"Series.getAssociatedSampleAccessions","content":"Series.getAssociatedSampleAccessions \ngetAssociatedSampleAccessions \nreturns sample accessions associated with the input series GSE representation","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series-gse.html","title":"GSE","content":"GSE \n \nGSE.SeriesMetadata \nSeriesMetadata \nGSE.SampleMetadata \nSampleMetadata \nGSE.PlatformMetadata \nPlatformMetadata","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series-gse.html#SeriesMetadata","title":"GSE.SeriesMetadata","content":"GSE.SeriesMetadata \nSeriesMetadata \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series-gse.html#SampleMetadata","title":"GSE.SampleMetadata","content":"GSE.SampleMetadata \nSampleMetadata \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-series-gse.html#PlatformMetadata","title":"GSE.PlatformMetadata","content":"GSE.PlatformMetadata \nPlatformMetadata \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-tokenization.html","title":"Tokenization","content":"Tokenization \n \nTokenization.SOFTToken \nSOFTToken \nTokenization.tokenizeSOFTLine \ntokenizeSOFTLine","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-tokenization.html#tokenizeSOFTLine","title":"Tokenization.tokenizeSOFTLine","content":"Tokenization.tokenizeSOFTLine \ntokenizeSOFTLine \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-tokenization-softtoken.html","title":"SOFTToken","content":"SOFTToken \n \nSOFTToken.Entity \nEntity \nSOFTToken.Attribute \nAttribute \nSOFTToken.TableHeader \nTableHeader \nSOFTToken.TableRow \nTableRow","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-tokenization-softtoken.html#Entity","title":"SOFTToken.Entity","content":"SOFTToken.Entity \nEntity \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-tokenization-softtoken.html#Attribute","title":"SOFTToken.Attribute","content":"SOFTToken.Attribute \nAttribute \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-tokenization-softtoken.html#TableHeader","title":"SOFTToken.TableHeader","content":"SOFTToken.TableHeader \nTableHeader \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-tokenization-softtoken.html#TableRow","title":"SOFTToken.TableRow","content":"SOFTToken.TableRow \nTableRow \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-datatable.html","title":"DataTable","content":"DataTable \n \nDataTable.Headers \nHeaders \nDataTable.Rows \nRows","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-datatable.html#Headers","title":"DataTable.Headers","content":"DataTable.Headers \nHeaders \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-datatable.html#Rows","title":"DataTable.Rows","content":"DataTable.Rows \nRows \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html","title":"PlatformRecord","content":"PlatformRecord \n \nPlatformRecord.Accession \nAccession \nPlatformRecord.Title \nTitle \nPlatformRecord.Distribution \nDistribution \nPlatformRecord.Technology \nTechnology \nPlatformRecord.Organism \nOrganism \nPlatformRecord.Manufacturer \nManufacturer \nPlatformRecord.ManufactureProtocol \nManufactureProtocol \nPlatformRecord.CatalogNumber \nCatalogNumber \nPlatformRecord.WebLink \nWebLink \nPlatformRecord.Support \nSupport \nPlatformRecord.Coating \nCoating \nPlatformRecord.Description \nDescription \nPlatformRecord.Contributor \nContributor \nPlatformRecord.PubmedId \nPubmedId \nPlatformRecord.GeoAccession \nGeoAccession \nPlatformRecord.AdditionalAttributes \nAdditionalAttributes \nPlatformRecord.DataTable \nDataTable \nPlatformRecord.SpecificationTokens \nSpecificationTokens","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Accession","title":"PlatformRecord.Accession","content":"PlatformRecord.Accession \nAccession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Title","title":"PlatformRecord.Title","content":"PlatformRecord.Title \nTitle \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Distribution","title":"PlatformRecord.Distribution","content":"PlatformRecord.Distribution \nDistribution \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Technology","title":"PlatformRecord.Technology","content":"PlatformRecord.Technology \nTechnology \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Organism","title":"PlatformRecord.Organism","content":"PlatformRecord.Organism \nOrganism \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Manufacturer","title":"PlatformRecord.Manufacturer","content":"PlatformRecord.Manufacturer \nManufacturer \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#ManufactureProtocol","title":"PlatformRecord.ManufactureProtocol","content":"PlatformRecord.ManufactureProtocol \nManufactureProtocol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#CatalogNumber","title":"PlatformRecord.CatalogNumber","content":"PlatformRecord.CatalogNumber \nCatalogNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#WebLink","title":"PlatformRecord.WebLink","content":"PlatformRecord.WebLink \nWebLink \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Support","title":"PlatformRecord.Support","content":"PlatformRecord.Support \nSupport \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Coating","title":"PlatformRecord.Coating","content":"PlatformRecord.Coating \nCoating \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Description","title":"PlatformRecord.Description","content":"PlatformRecord.Description \nDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#Contributor","title":"PlatformRecord.Contributor","content":"PlatformRecord.Contributor \nContributor \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#PubmedId","title":"PlatformRecord.PubmedId","content":"PlatformRecord.PubmedId \nPubmedId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#GeoAccession","title":"PlatformRecord.GeoAccession","content":"PlatformRecord.GeoAccession \nGeoAccession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#AdditionalAttributes","title":"PlatformRecord.AdditionalAttributes","content":"PlatformRecord.AdditionalAttributes \nAdditionalAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#DataTable","title":"PlatformRecord.DataTable","content":"PlatformRecord.DataTable \nDataTable \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-platformrecord.html#SpecificationTokens","title":"PlatformRecord.SpecificationTokens","content":"PlatformRecord.SpecificationTokens \nSpecificationTokens \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html","title":"SampleRecord","content":"SampleRecord \n \nSampleRecord.Accession \nAccession \nSampleRecord.Title \nTitle \nSampleRecord.Type \nType \nSampleRecord.PlatformId \nPlatformId \nSampleRecord.SupplementaryFile \nSupplementaryFile \nSampleRecord.Table \nTable \nSampleRecord.SourceName \nSourceName \nSampleRecord.Organism \nOrganism \nSampleRecord.Characteristics \nCharacteristics \nSampleRecord.BiomaterialProvider \nBiomaterialProvider \nSampleRecord.TreatmentProtocol \nTreatmentProtocol \nSampleRecord.GrowthProtocol \nGrowthProtocol \nSampleRecord.Molecule \nMolecule \nSampleRecord.ExtractProtocol \nExtractProtocol \nSampleRecord.Label \nLabel \nSampleRecord.LabelProtocol \nLabelProtocol \nSampleRecord.HybProtocol \nHybProtocol \nSampleRecord.ScanProtocol \nScanProtocol \nSampleRecord.DataProcessing \nDataProcessing \nSampleRecord.Description \nDescription \nSampleRecord.GeoAccession \nGeoAccession \nSampleRecord.Anchor \nAnchor \nSampleRecord.TagCount \nTagCount \nSampleRecord.TagLength \nTagLength \nSampleRecord.Relation \nRelation \nSampleRecord.DataTable \nDataTable \nSampleRecord.SpecificationTokens \nSpecificationTokens","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Accession","title":"SampleRecord.Accession","content":"SampleRecord.Accession \nAccession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Title","title":"SampleRecord.Title","content":"SampleRecord.Title \nTitle \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Type","title":"SampleRecord.Type","content":"SampleRecord.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#PlatformId","title":"SampleRecord.PlatformId","content":"SampleRecord.PlatformId \nPlatformId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#SupplementaryFile","title":"SampleRecord.SupplementaryFile","content":"SampleRecord.SupplementaryFile \nSupplementaryFile \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Table","title":"SampleRecord.Table","content":"SampleRecord.Table \nTable \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#SourceName","title":"SampleRecord.SourceName","content":"SampleRecord.SourceName \nSourceName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Organism","title":"SampleRecord.Organism","content":"SampleRecord.Organism \nOrganism \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Characteristics","title":"SampleRecord.Characteristics","content":"SampleRecord.Characteristics \nCharacteristics \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#BiomaterialProvider","title":"SampleRecord.BiomaterialProvider","content":"SampleRecord.BiomaterialProvider \nBiomaterialProvider \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#TreatmentProtocol","title":"SampleRecord.TreatmentProtocol","content":"SampleRecord.TreatmentProtocol \nTreatmentProtocol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#GrowthProtocol","title":"SampleRecord.GrowthProtocol","content":"SampleRecord.GrowthProtocol \nGrowthProtocol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Molecule","title":"SampleRecord.Molecule","content":"SampleRecord.Molecule \nMolecule \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#ExtractProtocol","title":"SampleRecord.ExtractProtocol","content":"SampleRecord.ExtractProtocol \nExtractProtocol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Label","title":"SampleRecord.Label","content":"SampleRecord.Label \nLabel \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#LabelProtocol","title":"SampleRecord.LabelProtocol","content":"SampleRecord.LabelProtocol \nLabelProtocol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#HybProtocol","title":"SampleRecord.HybProtocol","content":"SampleRecord.HybProtocol \nHybProtocol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#ScanProtocol","title":"SampleRecord.ScanProtocol","content":"SampleRecord.ScanProtocol \nScanProtocol \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#DataProcessing","title":"SampleRecord.DataProcessing","content":"SampleRecord.DataProcessing \nDataProcessing \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Description","title":"SampleRecord.Description","content":"SampleRecord.Description \nDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#GeoAccession","title":"SampleRecord.GeoAccession","content":"SampleRecord.GeoAccession \nGeoAccession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Anchor","title":"SampleRecord.Anchor","content":"SampleRecord.Anchor \nAnchor \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#TagCount","title":"SampleRecord.TagCount","content":"SampleRecord.TagCount \nTagCount \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#TagLength","title":"SampleRecord.TagLength","content":"SampleRecord.TagLength \nTagLength \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#Relation","title":"SampleRecord.Relation","content":"SampleRecord.Relation \nRelation \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#DataTable","title":"SampleRecord.DataTable","content":"SampleRecord.DataTable \nDataTable \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-samplerecord.html#SpecificationTokens","title":"SampleRecord.SpecificationTokens","content":"SampleRecord.SpecificationTokens \nSpecificationTokens \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html","title":"SeriesRecord","content":"SeriesRecord \n \nSeriesRecord.Accession \nAccession \nSeriesRecord.Title \nTitle \nSeriesRecord.Summary \nSummary \nSeriesRecord.OverallDesign \nOverallDesign \nSeriesRecord.PubmedId \nPubmedId \nSeriesRecord.WebLink \nWebLink \nSeriesRecord.Contributor \nContributor \nSeriesRecord.Variable \nVariable \nSeriesRecord.VariableDescription \nVariableDescription \nSeriesRecord.VariableSampleList \nVariableSampleList \nSeriesRecord.Repeats \nRepeats \nSeriesRecord.RepeatsSampleList \nRepeatsSampleList \nSeriesRecord.SampleId \nSampleId \nSeriesRecord.GeoAccession \nGeoAccession \nSeriesRecord.Type \nType \nSeriesRecord.SubmissionDate \nSubmissionDate \nSeriesRecord.SpecificationTokens \nSpecificationTokens","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#Accession","title":"SeriesRecord.Accession","content":"SeriesRecord.Accession \nAccession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#Title","title":"SeriesRecord.Title","content":"SeriesRecord.Title \nTitle \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#Summary","title":"SeriesRecord.Summary","content":"SeriesRecord.Summary \nSummary \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#OverallDesign","title":"SeriesRecord.OverallDesign","content":"SeriesRecord.OverallDesign \nOverallDesign \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#PubmedId","title":"SeriesRecord.PubmedId","content":"SeriesRecord.PubmedId \nPubmedId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#WebLink","title":"SeriesRecord.WebLink","content":"SeriesRecord.WebLink \nWebLink \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#Contributor","title":"SeriesRecord.Contributor","content":"SeriesRecord.Contributor \nContributor \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#Variable","title":"SeriesRecord.Variable","content":"SeriesRecord.Variable \nVariable \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#VariableDescription","title":"SeriesRecord.VariableDescription","content":"SeriesRecord.VariableDescription \nVariableDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#VariableSampleList","title":"SeriesRecord.VariableSampleList","content":"SeriesRecord.VariableSampleList \nVariableSampleList \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#Repeats","title":"SeriesRecord.Repeats","content":"SeriesRecord.Repeats \nRepeats \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#RepeatsSampleList","title":"SeriesRecord.RepeatsSampleList","content":"SeriesRecord.RepeatsSampleList \nRepeatsSampleList \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#SampleId","title":"SeriesRecord.SampleId","content":"SeriesRecord.SampleId \nSampleId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#GeoAccession","title":"SeriesRecord.GeoAccession","content":"SeriesRecord.GeoAccession \nGeoAccession \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#Type","title":"SeriesRecord.Type","content":"SeriesRecord.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#SubmissionDate","title":"SeriesRecord.SubmissionDate","content":"SeriesRecord.SubmissionDate \nSubmissionDate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-soft-seriesrecord.html#SpecificationTokens","title":"SeriesRecord.SpecificationTokens","content":"SeriesRecord.SpecificationTokens \nSpecificationTokens \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride.html","title":"Stride","content":"Stride \n \nStride.StrideLine \nStrideLine \nStride.fromLines \nfromLines \nStride.fromFile \nfromFile \nStride.toAASequence \ntoAASequence \nStride.toStructureSequence \ntoStructureSequence \nStride.toSequenceFeatures \ntoSequenceFeatures \nStride.prettyPrint \nprettyPrint","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride.html#fromLines","title":"Stride.fromLines","content":"Stride.fromLines \nfromLines \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride.html#fromFile","title":"Stride.fromFile","content":"Stride.fromFile \nfromFile \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride.html#toAASequence","title":"Stride.toAASequence","content":"Stride.toAASequence \ntoAASequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride.html#toStructureSequence","title":"Stride.toStructureSequence","content":"Stride.toStructureSequence \ntoStructureSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride.html#toSequenceFeatures","title":"Stride.toSequenceFeatures","content":"Stride.toSequenceFeatures \ntoSequenceFeatures \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride.html#prettyPrint","title":"Stride.prettyPrint","content":"Stride.prettyPrint \nprettyPrint \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html","title":"StrideLine","content":"StrideLine \n \nStrideLine.create \ncreate \nStrideLine.ofParseResults \nofParseResults \nStrideLine.ofString \nofString \nStrideLine.ResidueIndex \nResidueIndex \nStrideLine.OrdinalResidueIndex \nOrdinalResidueIndex \nStrideLine.ResidueName \nResidueName \nStrideLine.ChainId \nChainId \nStrideLine.AminoAcid \nAminoAcid \nStrideLine.SecondaryStructure \nSecondaryStructure \nStrideLine.AccessibleSurface \nAccessibleSurface \nStrideLine.PHI \nPHI \nStrideLine.PSI \nPSI","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#create","title":"StrideLine.create","content":"StrideLine.create \ncreate \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#ofParseResults","title":"StrideLine.ofParseResults","content":"StrideLine.ofParseResults \nofParseResults \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#ofString","title":"StrideLine.ofString","content":"StrideLine.ofString \nofString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#ResidueIndex","title":"StrideLine.ResidueIndex","content":"StrideLine.ResidueIndex \nResidueIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#OrdinalResidueIndex","title":"StrideLine.OrdinalResidueIndex","content":"StrideLine.OrdinalResidueIndex \nOrdinalResidueIndex \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#ResidueName","title":"StrideLine.ResidueName","content":"StrideLine.ResidueName \nResidueName \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#ChainId","title":"StrideLine.ChainId","content":"StrideLine.ChainId \nChainId \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#AminoAcid","title":"StrideLine.AminoAcid","content":"StrideLine.AminoAcid \nAminoAcid \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#SecondaryStructure","title":"StrideLine.SecondaryStructure","content":"StrideLine.SecondaryStructure \nSecondaryStructure \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#AccessibleSurface","title":"StrideLine.AccessibleSurface","content":"StrideLine.AccessibleSurface \nAccessibleSurface \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#PHI","title":"StrideLine.PHI","content":"StrideLine.PHI \nPHI \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-stride-strideline.html#PSI","title":"StrideLine.PSI","content":"StrideLine.PSI \nPSI \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html","title":"SecondaryStructure","content":"SecondaryStructure \ncompromise summary of secondary structure, intended to approximate crystallographers\u0027 intuition, based on columns 19-38, which are the principal result of DSSP analysis of the atomic coordinates. \nSecondaryStructure.isHelical \nisHelical \nSecondaryStructure.isNoStructure \nisNoStructure \nSecondaryStructure.isSheet \nisSheet \nSecondaryStructure.ofString \nofString \nSecondaryStructure.toString \ntoString \nSecondaryStructure.AlphaHelix \nAlphaHelix \nSecondaryStructure.IsolatedBetaBridge \nIsolatedBetaBridge \nSecondaryStructure.BetaSheet \nBetaSheet \nSecondaryStructure.Helix310 \nHelix310 \nSecondaryStructure.PiHelix \nPiHelix \nSecondaryStructure.Turn \nTurn \nSecondaryStructure.Bend \nBend \nSecondaryStructure.NoStructure \nNoStructure","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#isHelical","title":"SecondaryStructure.isHelical","content":"SecondaryStructure.isHelical \nisHelical \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#isNoStructure","title":"SecondaryStructure.isNoStructure","content":"SecondaryStructure.isNoStructure \nisNoStructure \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#isSheet","title":"SecondaryStructure.isSheet","content":"SecondaryStructure.isSheet \nisSheet \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#ofString","title":"SecondaryStructure.ofString","content":"SecondaryStructure.ofString \nofString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#toString","title":"SecondaryStructure.toString","content":"SecondaryStructure.toString \ntoString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#AlphaHelix","title":"SecondaryStructure.AlphaHelix","content":"SecondaryStructure.AlphaHelix \nAlphaHelix \n \u03B1-helix","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#IsolatedBetaBridge","title":"SecondaryStructure.IsolatedBetaBridge","content":"SecondaryStructure.IsolatedBetaBridge \nIsolatedBetaBridge \n residue in isolated \u03B2-bridge","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#BetaSheet","title":"SecondaryStructure.BetaSheet","content":"SecondaryStructure.BetaSheet \nBetaSheet \n extended strand, participates in \u03B2 ladder","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#Helix310","title":"SecondaryStructure.Helix310","content":"SecondaryStructure.Helix310 \nHelix310 \n 3-helix (310 helix)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#PiHelix","title":"SecondaryStructure.PiHelix","content":"SecondaryStructure.PiHelix \nPiHelix \n 5 helix (\u03C0-helix)","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#Turn","title":"SecondaryStructure.Turn","content":"SecondaryStructure.Turn \nTurn \n hydrogen bonded turn","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#Bend","title":"SecondaryStructure.Bend","content":"SecondaryStructure.Bend \nBend \n bend","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-secondarystructure.html#NoStructure","title":"SecondaryStructure.NoStructure","content":"SecondaryStructure.NoStructure \nNoStructure \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-structureformat.html","title":"StructureFormat","content":"StructureFormat \n \nStructureFormat.DSSP \nDSSP \nStructureFormat.Stride \nStride","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-structureformat.html#DSSP","title":"StructureFormat.DSSP","content":"StructureFormat.DSSP \nDSSP \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-fileformats-structureformat.html#Stride","title":"StructureFormat.Stride","content":"StructureFormat.Stride \nStride \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-agilentraw.html","title":"AgilentRaw","content":"AgilentRaw \n \nAgilentRaw.read \nread","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-agilentraw.html#read","title":"AgilentRaw.read","content":"AgilentRaw.read \nread \n Reads agilent raw data from file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli.html","title":"BlastCLI","content":"BlastCLI \n \nBlastCLI.BlastCLIWrapper \nBlastCLIWrapper \nBlastCLI.ncbiPath \nncbiPath","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli.html#ncbiPath","title":"BlastCLI.ncbiPath","content":"BlastCLI.ncbiPath \nncbiPath \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html","title":"BlastCLIWrapper","content":"BlastCLIWrapper \nA Wrapper to perform different BLAST tasks \nBlastCLIWrapper.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBlastCLIWrapper.blastN \nblastN \nBlastCLIWrapper.\u0060\u0060blastn-short\u0060\u0060 \n\u0060\u0060blastn-short\u0060\u0060 \nBlastCLIWrapper.blastp \nblastp \nBlastCLIWrapper.\u0060\u0060blastp-fast\u0060\u0060 \n\u0060\u0060blastp-fast\u0060\u0060 \nBlastCLIWrapper.\u0060\u0060blastp-short\u0060\u0060 \n\u0060\u0060blastp-short\u0060\u0060 \nBlastCLIWrapper.createArgString \ncreateArgString \nBlastCLIWrapper.createProcess \ncreateProcess \nBlastCLIWrapper.\u0060\u0060dc-megablast\u0060\u0060 \n\u0060\u0060dc-megablast\u0060\u0060 \nBlastCLIWrapper.makeblastdb \nmakeblastdb \nBlastCLIWrapper.megablast \nmegablast \nBlastCLIWrapper.printArgs \nprintArgs","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#\u0060\u0060.ctor\u0060\u0060","title":"BlastCLIWrapper.\u0060\u0060.ctor\u0060\u0060","content":"BlastCLIWrapper.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#blastN","title":"BlastCLIWrapper.blastN","content":"BlastCLIWrapper.blastN \nblastN \nCompares a nucleotide query to a nucleotide database","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#\u0060\u0060blastn-short\u0060\u0060","title":"BlastCLIWrapper.\u0060\u0060blastn-short\u0060\u0060","content":"BlastCLIWrapper.\u0060\u0060blastn-short\u0060\u0060 \n\u0060\u0060blastn-short\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#blastp","title":"BlastCLIWrapper.blastp","content":"BlastCLIWrapper.blastp \nblastp \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#\u0060\u0060blastp-fast\u0060\u0060","title":"BlastCLIWrapper.\u0060\u0060blastp-fast\u0060\u0060","content":"BlastCLIWrapper.\u0060\u0060blastp-fast\u0060\u0060 \n\u0060\u0060blastp-fast\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#\u0060\u0060blastp-short\u0060\u0060","title":"BlastCLIWrapper.\u0060\u0060blastp-short\u0060\u0060","content":"BlastCLIWrapper.\u0060\u0060blastp-short\u0060\u0060 \n\u0060\u0060blastp-short\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#createArgString","title":"BlastCLIWrapper.createArgString","content":"BlastCLIWrapper.createArgString \ncreateArgString \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#createProcess","title":"BlastCLIWrapper.createProcess","content":"BlastCLIWrapper.createProcess \ncreateProcess \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#\u0060\u0060dc-megablast\u0060\u0060","title":"BlastCLIWrapper.\u0060\u0060dc-megablast\u0060\u0060","content":"BlastCLIWrapper.\u0060\u0060dc-megablast\u0060\u0060 \n\u0060\u0060dc-megablast\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#makeblastdb","title":"BlastCLIWrapper.makeblastdb","content":"BlastCLIWrapper.makeblastdb \nmakeblastdb \nCreates a BLAST database from given source/s","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#megablast","title":"BlastCLIWrapper.megablast","content":"BlastCLIWrapper.megablast \nmegablast \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastcli-blastcliwrapper.html#printArgs","title":"BlastCLIWrapper.printArgs","content":"BlastCLIWrapper.printArgs \nprintArgs \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastqueries.html","title":"BlastQueries","content":"BlastQueries \n \nBlastQueries.readLines \nreadLines \nBlastQueries.read \nread","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastqueries.html#readLines","title":"BlastQueries.readLines","content":"BlastQueries.readLines \nreadLines \n Reads BlastQuery from file enumerator ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-blastqueries.html#read","title":"BlastQueries.read","content":"BlastQueries.read \nread \n Reads BlastQuery from file.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-clustal.html","title":"Clustal","content":"Clustal \nContains functions for reading clustal alignment files \nClustal.read \nread \nClustal.write \nwrite","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-clustal.html#read","title":"Clustal.read","content":"Clustal.read \nread \nReads clustal File (W or Omega) of given path and creates an alignment out of it. Also reads in numbers at end of line. Those have to be filtered out afterwards if not needed.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-clustal.html#write","title":"Clustal.write","content":"Clustal.write \nwrite \nWrites an alignment to given path in clustal format. Overwrites file if it already exists","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-clustalocli.html","title":"ClustalOCLI","content":"ClustalOCLI \n \nClustalOCLI.ClustalOWrapper \nClustalOWrapper","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-clustalocli-clustalowrapper.html","title":"ClustalOWrapper","content":"ClustalOWrapper \n A wrapper to perform Clustal Omega alignment tasks     \nClustalOWrapper.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nClustalOWrapper.AlignFromFile \nAlignFromFile \nClustalOWrapper.AlignSequences \nAlignSequences","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-clustalocli-clustalowrapper.html#\u0060\u0060.ctor\u0060\u0060","title":"ClustalOWrapper.\u0060\u0060.ctor\u0060\u0060","content":"ClustalOWrapper.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-clustalocli-clustalowrapper.html#AlignFromFile","title":"ClustalOWrapper.AlignFromFile","content":"ClustalOWrapper.AlignFromFile \nAlignFromFile \nRuns clustalo tool with given input file paths and parameters and creates output file for given path","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-clustalocli-clustalowrapper.html#AlignSequences","title":"ClustalOWrapper.AlignSequences","content":"ClustalOWrapper.AlignSequences \nAlignSequences \nRuns clustalo tool with given sequences and parameters and returns an alignment","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-customblastresult.html","title":"CustomBlastResult","content":"CustomBlastResult \n \nCustomBlastResult.read \nread","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-customblastresult.html#read","title":"CustomBlastResult.read","content":"CustomBlastResult.read \nread \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fasta.html","title":"Fasta","content":"Fasta \n Functions to read and write fasta formatted files \nFasta.readLines \nreadLines \nFasta.read \nread \nFasta.readGzip \nreadGzip \nFasta.writeToStream \nwriteToStream \nFasta.write \nwrite \nFasta.append \nappend","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fasta.html#readLines","title":"Fasta.readLines","content":"Fasta.readLines \nreadLines \n\n Creates a sequence of FastaItems by parsing the input line per line.\n\n The passed converter function is used to convert the sequence of each record to the desired type.\n\n Lines starting with \u0027#\u0027 or \u0027;\u0027 are ignored.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fasta.html#read","title":"Fasta.read","content":"Fasta.read \nread \n\n Creates a sequence of FastaItems by parsing the input line per line.\n\n The passed converter function is used to convert the sequence of each record to the desired type.\n\n Lines starting with \u0027#\u0027 or \u0027;\u0027 are ignored.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fasta.html#readGzip","title":"Fasta.readGzip","content":"Fasta.readGzip \nreadGzip \n\n Creates a sequence of FastaItems by parsing the input line per line.\n\n The passed converter function is used to convert the sequence of each record to the desired type.\n\n Lines starting with \u0027#\u0027 or \u0027;\u0027 are ignored.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fasta.html#writeToStream","title":"Fasta.writeToStream","content":"Fasta.writeToStream \nwriteToStream \n\n Writes a sequence of FastaItem to a stream.\n\n The passed converter function is used to convert each item in the sequence of each record to the desired type.\n\n The passed stream stays open and is not disposed after writing to it.\n If you want to reuse the stream (e.g. you are not writing to a file stream but a memory stream that gets used afterwards)\n you have to reset the position with \u0060stream.Seek(0L, SeekOrigin.Begin)\u0060\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fasta.html#write","title":"Fasta.write","content":"Fasta.write \nwrite \n\n Writes a sequence of FastaItem to a stream.\n\n The passed converter function is used to convert each item in the sequence of each record to the desired type.\n\n If the file already exists, it is overwritten.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fasta.html#append","title":"Fasta.append","content":"Fasta.append \nappend \n\n Writes a sequence of FastaItem to a stream.\n\n The passed converter function is used to convert each item in the sequence of each record to the desired type.\n\n If the file already exists, it is appended.\n ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fastq.html","title":"Fastq","content":"Fastq \n Functions to read and write fastq formatted files \nFastq.readLines \nreadLines \nFastq.read \nread \nFastq.readGZip \nreadGZip","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fastq.html#readLines","title":"Fastq.readLines","content":"Fastq.readLines \nreadLines \n Maps each lines from an entry to FastqItem","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fastq.html#read","title":"Fastq.read","content":"Fastq.read \nread \n Reads FastqItem from FastQ format file. Converter and qualityConverter determines type of sequence by converting seq\u003Cchar\u003E -\u003E type","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-fastq.html#readGZip","title":"Fastq.readGZip","content":"Fastq.readGZip \nreadGZip \n Reads FastqItem from GZip format file. Converter and qualityConverter determines type of sequence by converting seq\u003Cchar\u003E -\u003E type","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html","title":"GFF3","content":"GFF3 \n \nGFF3.FastAHeaderParser \nFastAHeaderParser \nGFF3.createGFFEntry \ncreateGFFEntry \nGFF3.parseStrToGFFEntry \nparseStrToGFFEntry \nGFF3.fromFile \nfromFile \nGFF3.fromFileWithoutFasta \nfromFileWithoutFasta \nGFF3.sanityCheckWithSOTerm \nsanityCheckWithSOTerm \nGFF3.sanityCheck \nsanityCheck \nGFF3.relationshipSearch \nrelationshipSearch \nGFF3.gFFEntrytoString \ngFFEntrytoString \nGFF3.toString \ntoString \nGFF3.writeOrAppend \nwriteOrAppend \nGFF3.write \nwrite \nGFF3.getSequence \ngetSequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#createGFFEntry","title":"GFF3.createGFFEntry","content":"GFF3.createGFFEntry \ncreateGFFEntry \nTakes strings of each field and creates a GFFEntry type thereby converting the strings into desired types.        ","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#parseStrToGFFEntry","title":"GFF3.parseStrToGFFEntry","content":"GFF3.parseStrToGFFEntry \nparseStrToGFFEntry \nConverts a string into a GFFEntry type. If there are more than 9 fields an additional \u0022supplement\u0022 field gets filled. If there are less than 9 only the supplement field gets filled with the whole line.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#fromFile","title":"GFF3.fromFile","content":"GFF3.fromFile \nfromFile \nreads in a file and gives a GFFLine\u003C\u0027a\u003E list. If file contains a FastA sequence it is converted to FastA.FastaItem with given converter. (Use \u0027id\u0027 as converter if no FastA is required).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#fromFileWithoutFasta","title":"GFF3.fromFileWithoutFasta","content":"GFF3.fromFileWithoutFasta \nfromFileWithoutFasta \nif no information about Sequence is required or no Fasta is included you can use this function","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#sanityCheckWithSOTerm","title":"GFF3.sanityCheckWithSOTerm","content":"GFF3.sanityCheckWithSOTerm \nsanityCheckWithSOTerm \nValidates GFF3 file. Prints all appearances of errors with line index. If no (SO)FA check is needed set \u0022\u0022 as so_TermsPath.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#sanityCheck","title":"GFF3.sanityCheck","content":"GFF3.sanityCheck \nsanityCheck \n","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#relationshipSearch","title":"GFF3.relationshipSearch","content":"GFF3.relationshipSearch \nrelationshipSearch \nSearches for a term and gives a list of all features of which the searchterm is the mainfeature (ID) or a child of it (Parent).","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#gFFEntrytoString","title":"GFF3.gFFEntrytoString","content":"GFF3.gFFEntrytoString \ngFFEntrytoString \nconverts a single GFF entry to a line (string) of a GFF file","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#toString","title":"GFF3.toString","content":"GFF3.toString \ntoString \nconverts GFF lines to string sequence. Hint: Use id as converter if no FASTA sequence is included.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#writeOrAppend","title":"GFF3.writeOrAppend","content":"GFF3.writeOrAppend \nwriteOrAppend \nwritesOrAppends GFF lines to file. Hint: Use id as converter if no FASTA sequence is included.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#write","title":"GFF3.write","content":"GFF3.write \nwrite \nwrites GFF lines to file. Hint: Use id as converter if no FASTA sequence is included.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3.html#getSequence","title":"GFF3.getSequence","content":"GFF3.getSequence \ngetSequence \nif a FastA sequence is included this function searches the features corresponding sequence","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3-fastaheaderparser.html","title":"FastAHeaderParser","content":"FastAHeaderParser \nParse FastA to GFF3 \nFastAHeaderParser.createGFF3OfFastAWithRegex \ncreateGFF3OfFastAWithRegex \nFastAHeaderParser.createGFF3OfFastA \ncreateGFF3OfFastA","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3-fastaheaderparser.html#createGFF3OfFastAWithRegex","title":"FastAHeaderParser.createGFF3OfFastAWithRegex","content":"FastAHeaderParser.createGFF3OfFastAWithRegex \ncreateGFF3OfFastAWithRegex \n Takes a sequence of FastA items and a regex pattern and transforms them into a sequence of GFF3 RNA items with decoy gene loci.","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/reference/biofsharp-io-gff3-fastaheaderparser.html#createGFF3OfFastA","title":"FastAHeaderParser.createGFF3OfFastA","content":"FastAHeaderParser.createGFF3OfFastA \ncreateGFF3OfFastA \n Takes a sequence of FastA items and transforms them into a sequence of GFF3 RNA and gene items. FastA headers have to be UniProt style.\n\n For Reference see: https://www.uniprot.org/help/fasta-headers","headings":[],"type":"apiDocs"},{"uri":"https://csbiology.github.io/BioFSharp/03_02_fastq_parsing.html","title":"Fastq","content":"\nFastq parsing\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to parse and write fastq formatted files with BioFSharp\nThis module allows to parse FASTQ format data with original 4-lines entries into this record type\n/// FastqItem record contains header, sequence, qualityheader, qualitysequence of one entry\n\ntype FastqItem\u0026lt;\u0026#39;a,\u0026#39;b\u0026gt; = {\n    Header          : string\n    Sequence        : \u0026#39;a\n    QualityHeader   : string\n    QualitySequence : \u0026#39;b      \n}\n\nTo be able to use this parser you need to define two converter functions,\none example for each you can also find in our module, but you also may need to write your own.\nIf you have following possible values for quality sequence:\n!\u0022\u0022#$%\u0026amp;\u0027()*\u002B,-./0123456789:;\u0026lt;=\u0026gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\u0060abcdefghijklmnopqrstuvwxyz{|}~\n\nwith Sanger format, that can encode a Phred quality score from 0 to 93 using ASCII 33 to 126,\nthen you can use our converting function:\n/// get Phred quality score\nlet qualityConvertFn (string:string) =\n    string.ToCharArray()\n    |\u0026gt; Array.map (fun i -\u0026gt; int i - 33)\n\nAnd then you can easily use this module to read your FastQ file\nopen BioFSharp\nopen BioFSharp.IO\n\nlet yourFastqFile = (__SOURCE_DIRECTORY__ \u002B \u0026quot;/data/FastQtest.fastq\u0026quot;)\n\nlet FastQSequence = \n    FastQ.fromFile BioArray.ofAminoAcidString qualityConvertFn yourFastqFile\n\nWarning: Output, it-value and value references require --eval\n","headings":["Fastq parsing"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/02_01_alignment.html","title":"Alignment","content":"\nPairwise Alignment\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to perform sequence alignments in BioFSharp\nIn this short tutorial, the usage of the pairwise alignment implementation is demonstrated.\nFor global alignments, the NeedlemanWunsch algorithm is used. For local alignments, the SmithWaterman algorithm is used.\nFor both implementations, the gapvalues are evaluated using the affine gapscoremodel.\nAligning aminoacid and nucleotide sequences\nFor defining the scores of matching and missmatching characters, the scoring function is defined. In the case of amino acid or nucleotide sequence alignments, the integrated substitution-matrices can be used.\nopen BioFSharp\nopen BioFSharp.Algorithm\nopen PairwiseAlignment\n\n//For aminoacids\nlet aaScoring = ScoringMatrix.getScoringMatrixAminoAcid ScoringMatrix.ScoringMatrixAminoAcid.BLOSUM62\n\n//For nucleotides\nlet nucScoring = ScoringMatrix.getScoringMatrixNucleotide  ScoringMatrix.ScoringMatrixNucleotide.EDNA\n\nIn order to align two sequences, not only the values for substitutions, but also the costs for gaps are needed. In this implementation, an affine gap-penalty is realized. An affine gap penalty weights continuations of gaps different than the opening of a gap.\nThe scoring function (in this case a substitution matrix) and the two gap penalty values are combined into the Costs type.\n//For aminoacids\nlet aaCosts = {\n    Open = -5\n    Continuation = -2\n    Similarity = aaScoring \n    }\n\n//For nucleotides\nlet nucCosts = {\n    Open = -2\n    Continuation = -1\n    Similarity = nucScoring \n    }\n\nThe alignment functions use Arrays as input. The Elements can be of any type, but require type equality. Also they need to have type equality with the input of the scoring function.\nBoth the global and local alignment algorithms take the same parameters (costs,firstSequence,secondSequence) and return the same format.\n//For aminoacids\nlet aaSeq1 = \u0026quot;ACDM\u0026quot; |\u0026gt; BioArray.ofAminoAcidSymbolString\nlet aaSeq2 = \u0026quot;MAACEDM\u0026quot; |\u0026gt; BioArray.ofAminoAcidSymbolString\n\nNeedlemanWunsch.runAminoAcidSymbol aaCosts aaSeq1 aaSeq2\n\n{ MetaData = 12\n  Sequences = [[-; -; A; C; -; D; M]; [M; A; A; C; E; D; M]] }\n\nSmithWaterman.runAminoAcidSymbol aaCosts aaSeq1 aaSeq2\n\n{ MetaData = 19\n  Sequences = [[A; C; -; D; M]; [A; C; E; D; M]] }\n\n//For nucleotides\nlet nucSeq1 = \u0026quot;ATGA\u0026quot; |\u0026gt; BioArray.ofNucleotideString\nlet nucSeq2 = \u0026quot;BATVAWG\u0026quot; |\u0026gt; BioArray.ofNucleotideString\n\nNeedlemanWunsch.runNucleotide nucCosts nucSeq1 nucSeq2\n\n{ MetaData = 9\n  Sequences = [[Gap; A; T; G; A; Gap; Gap]; [B; A; T; V; A; W; G]] }\n\nSmithWaterman.runNucleotide nucCosts nucSeq1 nucSeq2\n\n{ MetaData = 11\n  Sequences = [[A; T; G; A]; [A; T; V; A]] }\n\nAligning anything else\nThis implementation was aimed to be as generic as possible. To achieve this, the scoring function can be designed at will, the only constraints being the need for two input variables and the type equality.\nAlso besides the alignment functions which only take BioItems as input and represent the gaps by the appropriate gaps of type BioItem. There is also a generic alignment function runGeneric which returns lists of options, where None represents gaps. Therefore any input type can be used, given it matches the cost function.\nFor example, one could use a simple if .. then .. else equality function to match nucleotides\nlet scoring a b = \n    if a = b then 2\n    else -2\n\nlet costs = {\n    Open = -2\n    Continuation = -1\n    Similarity = scoring\n    }\n\nNeedlemanWunsch.runGeneric costs nucSeq1 nucSeq2\n\n{ MetaData = -1\n  Sequences =\n   [[None; Some A; Some T; Some G; Some A; None; None];\n    [Some B; Some A; Some T; Some V; Some A; Some W; Some G]] }\n\nSmithWaterman.runGeneric costs nucSeq1 nucSeq2\n\n{ MetaData = 1\n  Sequences =\n   [[Some A; Some T; Some G; Some A]; [Some A; Some T; Some V; Some A]] }\n\nor also Integers:\nlet intSeq1 = [|1;2;3;4;5|]\nlet intSeq2 = [|1;1;2;4;6;7;|]\n\nNeedlemanWunsch.runGeneric costs intSeq1 intSeq2\n\n{ MetaData = -2\n  Sequences =\n   [[Some 1; None; Some 2; Some 3; Some 4; Some 5; None];\n    [Some 1; Some 1; Some 2; None; Some 4; Some 6; Some 7]] }\n\nSmithWaterman.runGeneric costs intSeq1 intSeq2\n\n{ MetaData = 0\n  Sequences =\n   [[Some 1; Some 2; Some 3; Some 4]; [Some 1; Some 2; None; Some 4]] }\n\nMultiple sequence alignment with ClustalOmega\nClustal Omega is a multiple sequence alignment (MSA) tool. This tutorial describes using it in F# via the ClustalOWrapper. For some more indepth information about which parameters to choose for your goal, also check out the official tutorial.\nAligning sequences from files\nThe first step is to create a wrapper-object. As optional input it takes a path to the clustalo executable you want to use. You have to fill this argument if you work with a precompiled verion or on linux.\nyou will have to install clustal omega yourself to use this wrapper.\nopen BioFSharp.IO\nopen ClustalOWrapper\nopen BioFSharp\n\nlet cw = ClustalOWrapper(\u0026quot;path/where/you/extracted/clustal-omega/clustalo.exe\u0026quot;)\n\nThe general structure of arguments the wrapper takes was kept the same as in the command line tool. In general, you need an inputPath, an outputPath and parameters. As there are several inputs possible, you have to choose what it is. As we want to align a normal sequence we just pick SequenceFile.\nlet inputPath = Input.SequenceFile (__SOURCE_DIRECTORY__ \u002B @\u0026quot;\\data\\Chlamy_Cp.fastA\u0026quot;)\n\nlet outputPath = __SOURCE_DIRECTORY__ \u002B @\u0026quot;\\data\\Chlamy_Cp.aln\u0026quot;\n\nAs additional parameters go, we\u0027ll restrict input to FastA format and the output to Clustal format. Also we will use the Force parameter to force the overwrite of a possilby already existing file with the name ChlamyCp.aln.\n//Input has to be in FastA format\nlet inputModifier = Parameters.ClustalParams.Input [Parameters.InputCustom.Format Parameters.FileFormat.FastA]\n//Output has to be in Clustal format\nlet outputModifier = Parameters.ClustalParams.Output [Parameters.OutputCustom.Format Parameters.FileFormat.Clustal]\n//Forces overwriting\nlet forceModifier = Parameters.ClustalParams.Miscallaneous [Parameters.MiscallaneousCustom.Force]\n\n//Perform alignment\ncw.AlignFromFile(inputPath,outputPath,[inputModifier;outputModifier;forceModifier])\n\nAligning sequences directly in F# Interactive\nWith the AlignSequences method, one can also directly align sequences with the clustal tool and also directly receive the alignment directly in F#.\nAs input, it takes a collection of TaggedSequences, and again a set of parameters. The default options can be used by not using any additional parameters.\nlet sequences = [\n    TaggedSequence.create \u0026quot;pep1\u0026quot; (\u0026quot;AAGECGEK\u0026quot;)\n    TaggedSequence.create \u0026quot;pep2\u0026quot; (\u0026quot;AAGEGEK\u0026quot;)\n    TaggedSequence.create \u0026quot;pep3\u0026quot; (\u0026quot;AAAGECGEK\u0026quot;)\n    TaggedSequence.create \u0026quot;pep4\u0026quot; (\u0026quot;AAGECGEL\u0026quot;)\n]\n\ncw.AlignSequences(sequences,Seq.empty)\n\n{ MetaData = { Header = seq [\u0027C\u0027; \u0027L\u0027; \u0027U\u0027; \u0027S\u0027; ...]\nConservationInfo = seq [\u0027 \u0027; \u0027*\u0027; \u0027*\u0027; \u0027*\u0027; ...] }\n    Sequences =\n     [{ Tag = \u0022pep1\u0022\n        Sequence = seq [\u0027-\u0027; \u0027A\u0027; \u0027A\u0027; \u0027G\u0027; ...] };\n      { Tag = \u0022pep2\u0022\n        Sequence = seq [\u0027-\u0027; \u0027A\u0027; \u0027A\u0027; \u0027G\u0027; ...] };\n      { Tag = \u0022pep3\u0022\n        Sequence = seq [\u0027A\u0027; \u0027A\u0027; \u0027A\u0027; \u0027G\u0027; ...] };\n      { Tag = \u0022pep4\u0022\n        Sequence = seq [\u0027-\u0027; \u0027A\u0027; \u0027A\u0027; \u0027G\u0027; ...] }] }\n\n","headings":["Pairwise Alignment","Aligning aminoacid and nucleotide sequences","Aligning anything else","Multiple sequence alignment with ClustalOmega","Aligning sequences from files","Aligning sequences directly in F# Interactive"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/01_04_sequence_properties.html","title":"Sequence properties","content":"\nSequence Properties\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to calculate properties of amino acid sequences in BioFSharp\nGeneral\nBioFSharp comes equipped with a range of numerical values for important amino acid properties. To access them in an easy fashion, you can use the initGetAminoProperty function in the following way. The result is a mapping function, which assigns a value to each compatible amino acid.\nIn this tutorial our aim is to find out the hydrophobicity of a peptide. We start by calling the aforementioned function.\nopen BioFSharp\nopen AminoProperties\n\nlet getHydrophobicityIndex  = initGetAminoProperty AminoProperty.HydrophobicityIndex\n\ngetHydrophobicityIndex AminoAcidSymbols.AminoAcidSymbol.Ala \n\n0.61\n\nlet getHydrophobicityIndexZ  = initGetAminoPropertyZnorm AminoProperty.HydrophobicityIndex\n\ngetHydrophobicityIndexZ AminoAcidSymbols.AminoAcidSymbol.Ala \n\n-0.4813502112\n\nWith this function you might easily estimate the hydrophobictiy of our peptide by calling it on every element with a map. Usually close amino acids in a peptide influence each other. To cover this you can use the ofWindowedBioArray function. It also takes a window size and calculates the value of the property of every amino acid in the chain with regards to the effect of the adjacent amino acids in this window.\nlet peptide = \n    \u0026quot;REYAHMIGMEYDTVQK\u0026quot;\n    |\u0026gt; BioArray.ofAminoAcidString\n    |\u0026gt; Array.map AminoAcidSymbols.aminoAcidSymbol\n\nlet peptidehydrophobicites = peptide |\u0026gt; Array.map getHydrophobicityIndex\n\n[|0.6; 0.47; 1.88; 0.61; 0.61; 1.18; 2.22; 0.07; 1.18; 0.47; 1.88; 0.46;\n0.05; 1.32; 0.0; 1.15|]\n\nlet peptidehydrophobicites\u0026#39; = peptide |\u0026gt; AminoProperties.ofWindowedBioArray 3 getHydrophobicityIndex\n\n\n\nIn the last step you can then just sum or average over the values to get a summary value of the hydrophobicity, depending on wether you want a length dependent or independent value.\nArray.sum peptidehydrophobicites\n\n[|0.89; 0.834; 0.8916666667; 1.081428571; 1.005714286; 1.107142857;\n0.9057142857; 1.087142857; 1.065714286; 0.9042857143; 0.7757142857;\n0.7657142857; 0.7614285714; 0.81; 0.596; 0.63|]\n\nArray.sum peptidehydrophobicites\u0026#39;\n\n14.11166667\n\nArray.average peptidehydrophobicites\n\n14.11166667\n\nArray.average peptidehydrophobicites\u0026#39;\n\n0.8819791667\n\nIsoelectric Point\nThe isoelectric point (pI) of a protein is the point at which it carries as many positive as negative charges.\nTherefore the overall charge is zero. Knowing this value can e.g. be useful for isolation of single proteins in a voltage gradient.\nThe implementation is based on: this document.\nIn principle, the distinct amino acids in the protein are counted.\nBy using the Henderson-Hasselbalch equation and the pKr values, the theoretic charge states of the amino acids for a specific pH can be calculated.\nMultiplying those charge states with the count of the associated amino acids and adding those products together then gives the overall charge of the protein. This is only done with the amino acids, which might be charged (basic, acidic).\nThe isoelectric point is the pH value for which this function returns zero. It is found by bisection (also called Binary Search).\nDisclaimer: Keep in mind, that this algorithm ignores post-translational modifications and interactions of the amino acids with each other. Therefore it is only intented to be a rough approximation and should be used as such.\n\nThe function for finding the isoelectric point is found in the IsoelectricPoint module.\n\nBesides the peptide sequence in form of a AminoAcidSymbol Seq, it takes\na mapping function, which maps an AminoAcidSymbol to a float representing the pKr and\nan accuracy value. The found pI has to be at least as close to zero as this accuracy value\n\n//AA sequence\nlet myProteinForPI = \n    \u0026quot;ATPIIEMNYPWTMNIKLSSDACMTNWWPNCMTLKIIA\u0026quot;\n    |\u0026gt; Seq.map AminoAcidSymbols.aminoAcidSymbol\n\n//accuracy in z\nlet acc = 0.5\n\nIsoelectricPoint.tryFind IsoelectricPoint.getpKr acc myProteinForPI\n\nSome 7.0\n\n","headings":["Sequence Properties","General","Isoelectric Point"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/03_05_obo.html","title":"Obo","content":"\nObo parsing\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to parse obo formatted files with BioFSharp\nOBO format is a popular ontology file format. It can express a subset of the description logic language\nOWL-DL 2.0 but in addition has standard syntax for representing important classes of meta-data including\nas synonyms, references to publications and deprecated IDs. It is designed to be human readable and\neditable.\nReading Obo files\nopen FSharpAux.IO\nopen BioFSharp.IO\n\nlet fileDir = __SOURCE_DIRECTORY__ \u002B \u0026quot;/data/\u0026quot;  \n\nlet psiMs = \n    Seq.fromFile (fileDir \u002B \u0026quot;Psi-MS.obo\u0026quot;)\n    |\u0026gt; Obo.parseOboTerms true\n    |\u0026gt; Seq.toArray\n\npsiMs.[0]\n\nWarning: Output, it-value and value references require --eval\n","headings":["Obo parsing","Reading Obo files"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/03_04_genbank_parsing.html","title":"GenBank","content":"\nGenBank parsing\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to parse and write genbank formatted files with BioFSharp\nGenBank format\nGenBank is the NIH genetic sequence database, an annotated collection of all publicly available DNA sequences\n(Nucleic Acids Research, 2013 Jan;41(D1):D36-42).\nA GenBank file contains various information about a sequence and its features.\nThe file structure of a GenBank (.gb) flat file can be split into 4 subsections:\n\n\n\nSection\nDescription\n\n\n\n\nMeta\nContains meta information about the annotated sequence, the file itself and the organism the sequence is found in\n\n\nReferences\nA collection of publications about the annotated sequence(or a subsequence of it) and information associated with them\n\n\nFeatures\nA collection of features and their position within the sequence\n\n\nOrigin\nThe annotated sequence itself\n\n\n\n\nWith the origins section being optional and the features section usually being by far the largest amongst them.\nFor more information about the sections and their formatting, have a look at this\nannotated sample record over at NCBI.\nThis file will also be used for the purpose of this tutorial and in plain text looks like this:\nLOCUS       SCU49845                5028 bp    DNA     linear   PLN 14-JUL-2016 \nDEFINITION  Saccharomyces cerevisiae TCP1-beta gene, partial cds; and Axl2p     \n            (AXL2) and Rev7p (REV7) genes, complete cds.                        \nACCESSION   U49845                                                              \nVERSION     U49845.1                                                            \nKEYWORDS    .                                                                   \nSOURCE      Saccharomyces cerevisiae (baker\u0027s yeast)                            \n    ORGANISM  Saccharomyces cerevisiae                                            \n            Eukaryota; Fungi; Dikarya; Ascomycota; Saccharomycotina;            \n            Saccharomycetes; Saccharomycetales; Saccharomycetaceae;             \n            Saccharomyces.                                                      \nREFERENCE   1  (bases 1 to 5028)                                                \n    AUTHORS   Roemer,T., Madden,K., Chang,J. and Snyder,M.                        \n    TITLE     Selection of axial growth sites in yeast requires Axl2p, a novel    \n            plasma membrane glycoprotein                                        \n    JOURNAL   Genes Dev. 10 (7), 777-793 (1996)                                   \n    PUBMED   8846915                                                             \nREFERENCE   2  (bases 1 to 5028)                                                \n    AUTHORS   Roemer,T.                                                           \n    TITLE     Direct Submission                                                   \n    JOURNAL   Submitted (22-FEB-1996) Biology, Yale University, New Haven, CT     \n            06520, USA                                                          \nFEATURES             Location/Qualifiers                                        \n        source          1..5028                                                    \n                        /organism=\u0022Saccharomyces cerevisiae\u0022                       \n                        /mol_type=\u0022genomic DNA\u0022                                    \n                        /db_xref=\u0022taxon:4932\u0022                                      \n                        /chromosome=\u0022IX\u0022                                           \n        mRNA            \u0026lt;1..\u0026gt;206                                                   \n                        /product=\u0022TCP1-beta\u0022                                       \n        CDS             \u0026lt;1..206                                                    \n                        /codon_start=3                                             \n                        /product=\u0022TCP1-beta\u0022                                       \n                        /protein_id=\u0022AAA98665.1\u0022                                   \n                        /translation=\u0022SSIYNGISTSGLDLNNGTIADMRQLGIVESYKLKRAVVSSASEA \n                        AEVLLRVDNIIRARPRTANRQHM\u0022                                   \n        gene            \u0026lt;687..\u0026gt;3158                                                \n                        /gene=\u0022AXL2\u0022                                               \n        mRNA            \u0026lt;687..\u0026gt;3158                                                \n                        /gene=\u0022AXL2\u0022                                               \n                        /product=\u0022Axl2p\u0022                                           \n        CDS             687..3158                                                  \n                        /gene=\u0022AXL2\u0022                                               \n                        /note=\u0022plasma membrane glycoprotein\u0022                       \n                        /codon_start=1                                             \n                        /product=\u0022Axl2p\u0022                                           \n                        /protein_id=\u0022AAA98666.1\u0022                                   \n                        /translation=\u0022MTQLQISLLLTATISLLHLVVATPYEAYPIGKQYPPVARVNESF \n                        TFQISNDTYKSSVDKTAQITYNCFDLPSWLSFDSSSRTFSGEPSSDLLSDANTTLYFN \n                        VILEGTDSADSTSLNNTYQFVVTNRPSISLSSDFNLLALLKNYGYTNGKNALKLDPNE \n                        VFNVTFDRSMFTNEESIVSYYGRSQLYNAPLPNWLFFDSGELKFTGTAPVINSAIAPE \n                        TSYSFVIIATDIEGFSAVEVEFELVIGAHQLTTSIQNSLIINVTDTGNVSYDLPLNYV \n                        YLDDDPISSDKLGSINLLDAPDWVALDNATISGSVPDELLGKNSNPANFSVSIYDTYG \n                        DVIYFNFEVVSTTDLFAISSLPNINATRGEWFSYYFLPSQFTDYVNTNVSLEFTNSSQ \n                        DHDWVKFQSSNLTLAGEVPKNFDKLSLGLKANQGSQSQELYFNIIGMDSKITHSNHSA \n                        NATSTRSSHHSTSTSSYTSSTYTAKISSTSAAATSSAPAALPAANKTSSHNKKAVAIA \n                        CGVAIPLGVILVALICFLIFWRRRRENPDDENLPHAISGPDLNNPANKPNQENATPLN \n                        NPFDDDASSYDDTSIARRLAALNTLKLDNHSATESDISSVDEKRDSLSGMNTYNDQFQ \n                        SQSKEELLAKPPVQPPESPFFDPQNRSSSVYMDSEPAVNKSWRYTGNLSPVSDIVRDS \n                        YGSQKTVDTEKLFDLEAPEKEKRTSRDVTMSSLDPWNSNISPSPVRKSVTPSPYNVTK \n                        HRNRHLQNIQDSQSGKNGITPTTMSTSSSDDFVPVKDGENFCWVHSMEPDRRPSKKRL \n                        VDFSNKSNVNVGQVKDIHGRIPEML\u0022                                 \n        gene            complement(\u0026lt;3300..\u0026gt;4037)                                   \n                        /gene=\u0022REV7\u0022                                               \n        mRNA            complement(\u0026lt;3300..\u0026gt;4037)                                   \n                        /gene=\u0022REV7\u0022                                               \n                        /product=\u0022Rev7p\u0022                                           \n        CDS             complement(3300..4037)                                     \n                        /gene=\u0022REV7\u0022                                               \n                        /codon_start=1                                             \n                        /product=\u0022Rev7p\u0022                                           \n                        /protein_id=\u0022AAA98667.1\u0022                                   \n                        /translation=\u0022MNRWVEKWLRVYLKCYINLILFYRNVYPPQSFDYTTYQSFNLPQ \n                        FVPINRHPALIDYIEELILDVLSKLTHVYRFSICIINKKNDLCIEKYVLDFSELQHVD \n                        KDDQIITETEVFDEFRSSLNSLIMHLEKLPKVNDDTITFEAVINAIELELGHKLDRNR \n                        RVDSLEEKAEIERDSNWVKCQEDENLPDNNGFQPPKIKLTSLVGSDVGPLIIHQFSEK \n                        LISGDDKILNGVYSQYEEGESIFGSLF\u0022                               \nORIGIN                                                                          \n        1 gatcctccat atacaacggt atctccacct caggtttaga tctcaacaac ggaaccattg     \n        61 ccgacatgag acagttaggt atcgtcgaga gttacaagct aaaacgagca gtagtcagct     \n        121 ctgcatctga agccgctgaa gttctactaa gggtggataa catcatccgt gcaagaccaa     \n        181 gaaccgccaa tagacaacat atgtaacata tttaggatat acctcgaaaa taataaaccg     \n        241 ccacactgtc attattataa ttagaaacag aacgcaaaaa ttatccacta tataattcaa     \n        301 agacgcgaaa aaaaaagaac aacgcgtcat agaacttttg gcaattcgcg tcacaaataa     \n        361 attttggcaa cttatgtttc ctcttcgagc agtactcgag ccctgtctca agaatgtaat     \n        421 aatacccatc gtaggtatgg ttaaagatag catctccaca acctcaaagc tccttgccga     \n        481 gagtcgccct cctttgtcga gtaattttca cttttcatat gagaacttat tttcttattc     \n        541 tttactctca catcctgtag tgattgacac tgcaacagcc accatcacta gaagaacaga     \n        601 acaattactt aatagaaaaa ttatatcttc ctcgaaacga tttcctgctt ccaacatcta     \n        661 cgtatatcaa gaagcattca cttaccatga cacagcttca gatttcatta ttgctgacag     \n        721 ctactatatc actactccat ctagtagtgg ccacgcccta tgaggcatat cctatcggaa     \n        781 aacaataccc cccagtggca agagtcaatg aatcgtttac atttcaaatt tccaatgata     \n        841 cctataaatc gtctgtagac aagacagctc aaataacata caattgcttc gacttaccga     \n        901 gctggctttc gtttgactct agttctagaa cgttctcagg tgaaccttct tctgacttac     \n        961 tatctgatgc gaacaccacg ttgtatttca atgtaatact cgagggtacg gactctgccg     \n        1021 acagcacgtc tttgaacaat acataccaat ttgttgttac aaaccgtcca tccatctcgc     \n        1081 tatcgtcaga tttcaatcta ttggcgttgt taaaaaacta tggttatact aacggcaaaa     \n        1141 acgctctgaa actagatcct aatgaagtct tcaacgtgac ttttgaccgt tcaatgttca     \n        1201 ctaacgaaga atccattgtg tcgtattacg gacgttctca gttgtataat gcgccgttac     \n        1261 ccaattggct gttcttcgat tctggcgagt tgaagtttac tgggacggca ccggtgataa     \n        1321 actcggcgat tgctccagaa acaagctaca gttttgtcat catcgctaca gacattgaag     \n        1381 gattttctgc cgttgaggta gaattcgaat tagtcatcgg ggctcaccag ttaactacct     \n        1441 ctattcaaaa tagtttgata atcaacgtta ctgacacagg taacgtttca tatgacttac     \n        1501 ctctaaacta tgtttatctc gatgacgatc ctatttcttc tgataaattg ggttctataa     \n        1561 acttattgga tgctccagac tgggtggcat tagataatgc taccatttcc gggtctgtcc     \n        1621 cagatgaatt actcggtaag aactccaatc ctgccaattt ttctgtgtcc atttatgata     \n        1681 cttatggtga tgtgatttat ttcaacttcg aagttgtctc cacaacggat ttgtttgcca     \n        1741 ttagttctct tcccaatatt aacgctacaa ggggtgaatg gttctcctac tattttttgc     \n        1801 cttctcagtt tacagactac gtgaatacaa acgtttcatt agagtttact aattcaagcc     \n        1861 aagaccatga ctgggtgaaa ttccaatcat ctaatttaac attagctgga gaagtgccca     \n        1921 agaatttcga caagctttca ttaggtttga aagcgaacca aggttcacaa tctcaagagc     \n        1981 tatattttaa catcattggc atggattcaa agataactca ctcaaaccac agtgcgaatg     \n        2041 caacgtccac aagaagttct caccactcca cctcaacaag ttcttacaca tcttctactt     \n        2101 acactgcaaa aatttcttct acctccgctg ctgctacttc ttctgctcca gcagcgctgc     \n        2161 cagcagccaa taaaacttca tctcacaata aaaaagcagt agcaattgcg tgcggtgttg     \n        2221 ctatcccatt aggcgttatc ctagtagctc tcatttgctt cctaatattc tggagacgca     \n        2281 gaagggaaaa tccagacgat gaaaacttac cgcatgctat tagtggacct gatttgaata     \n        2341 atcctgcaaa taaaccaaat caagaaaacg ctacaccttt gaacaacccc tttgatgatg     \n        2401 atgcttcctc gtacgatgat acttcaatag caagaagatt ggctgctttg aacactttga     \n        2461 aattggataa ccactctgcc actgaatctg atatttccag cgtggatgaa aagagagatt     \n        2521 ctctatcagg tatgaataca tacaatgatc agttccaatc ccaaagtaaa gaagaattat     \n        2581 tagcaaaacc cccagtacag cctccagaga gcccgttctt tgacccacag aataggtctt     \n        2641 cttctgtgta tatggatagt gaaccagcag taaataaatc ctggcgatat actggcaacc     \n        2701 tgtcaccagt ctctgatatt gtcagagaca gttacggatc acaaaaaact gttgatacag     \n        2761 aaaaactttt cgatttagaa gcaccagaga aggaaaaacg tacgtcaagg gatgtcacta     \n        2821 tgtcttcact ggacccttgg aacagcaata ttagcccttc tcccgtaaga aaatcagtaa     \n        2881 caccatcacc atataacgta acgaagcatc gtaaccgcca cttacaaaat attcaagact     \n        2941 ctcaaagcgg taaaaacgga atcactccca caacaatgtc aacttcatct tctgacgatt     \n        3001 ttgttccggt taaagatggt gaaaattttt gctgggtcca tagcatggaa ccagacagaa     \n        3061 gaccaagtaa gaaaaggtta gtagattttt caaataagag taatgtcaat gttggtcaag     \n        3121 ttaaggacat tcacggacgc atcccagaaa tgctgtgatt atacgcaacg atattttgct     \n        3181 taattttatt ttcctgtttt attttttatt agtggtttac agatacccta tattttattt     \n        3241 agtttttata cttagagaca tttaatttta attccattct tcaaatttca tttttgcact     \n        3301 taaaacaaag atccaaaaat gctctcgccc tcttcatatt gagaatacac tccattcaaa     \n        3361 attttgtcgt caccgctgat taatttttca ctaaactgat gaataatcaa aggccccacg     \n        3421 tcagaaccga ctaaagaagt gagttttatt ttaggaggtt gaaaaccatt attgtctggt     \n        3481 aaattttcat cttcttgaca tttaacccag tttgaatccc tttcaatttc tgctttttcc     \n        3541 tccaaactat cgaccctcct gtttctgtcc aacttatgtc ctagttccaa ttcgatcgca     \n        3601 ttaataactg cttcaaatgt tattgtgtca tcgttgactt taggtaattt ctccaaatgc     \n        3661 ataatcaaac tatttaagga agatcggaat tcgtcgaaca cttcagtttc cgtaatgatc     \n        3721 tgatcgtctt tatccacatg ttgtaattca ctaaaatcta aaacgtattt ttcaatgcat     \n        3781 aaatcgttct ttttattaat aatgcagatg gaaaatctgt aaacgtgcgt taatttagaa     \n        3841 agaacatcca gtataagttc ttctatatag tcaattaaag caggatgcct attaatggga     \n        3901 acgaactgcg gcaagttgaa tgactggtaa gtagtgtagt cgaatgactg aggtgggtat     \n        3961 acatttctat aaaataaaat caaattaatg tagcatttta agtataccct cagccacttc     \n        4021 tctacccatc tattcataaa gctgacgcaa cgattactat tttttttttc ttcttggatc     \n        4081 tcagtcgtcg caaaaacgta taccttcttt ttccgacctt ttttttagct ttctggaaaa     \n        4141 gtttatatta gttaaacagg gtctagtctt agtgtgaaag ctagtggttt cgattgactg     \n        4201 atattaagaa agtggaaatt aaattagtag tgtagacgta tatgcatatg tatttctcgc     \n        4261 ctgtttatgt ttctacgtac ttttgattta tagcaagggg aaaagaaata catactattt     \n        4321 tttggtaaag gtgaaagcat aatgtaaaag ctagaataaa atggacgaaa taaagagagg     \n        4381 cttagttcat cttttttcca aaaagcaccc aatgataata actaaaatga aaaggatttg     \n        4441 ccatctgtca gcaacatcag ttgtgtgagc aataataaaa tcatcacctc cgttgccttt     \n        4501 agcgcgtttg tcgtttgtat cttccgtaat tttagtctta tcaatgggaa tcataaattt     \n        4561 tccaatgaat tagcaatttc gtccaattct ttttgagctt cttcatattt gctttggaat     \n        4621 tcttcgcact tcttttccca ttcatctctt tcttcttcca aagcaacgat ccttctaccc     \n        4681 atttgctcag agttcaaatc ggcctctttc agtttatcca ttgcttcctt cagtttggct     \n        4741 tcactgtctt ctagctgttg ttctagatcc tggtttttct tggtgtagtt ctcattatta     \n        4801 gatctcaagt tattggagtc ttcagccaat tgctttgtat cagacaattg actctctaac     \n        4861 ttctccactt cactgtcgag ttgctcgttt ttagcggaca aagatttaat ctcgttttct     \n        4921 ttttcagtgt tagattgctc taattctttg agctgttctc tcagctcctc atatttttct     \n        4981 tgccatgact cagattctaa ttttaagcta ttcaatttct ctttgatc                  \n\nReading GenBank files\nThe type equivalent for a GenBank file in BioFSharp is a dictionary, mapping string keys to the GenBankItem\u0026lt;\u0027a\u0026gt; type, where \u0027a is the type of the origin sequence in the file.\nMore information about the type modelling can be found in our API reference.\nThe default reader fromFile simply takes the origin sequence as a sequence of chars.\nopen BioFSharp\nopen BioFSharp.IO\n\n///Path of the example file\nlet exampleFilePath = __SOURCE_DIRECTORY__ \u002B @\u0026quot;\\data\\sequence.gb\u0026quot;\n\n///Parsed Example File \nlet parsedGBFile = GenBank.Read.fromFile exampleFilePath\n\ndict\n[(\u0022LOCUS\u0022,\n  Value\n    \u0022SCU49845                5028 bp    DNA     linear   PLN 14-JUL-2016\u0022);\n (\u0022DEFINITION\u0022,\n  Value\n    \u0022Saccharomyces cerevisiae TCP1-beta gene, partial cds; and Axl2p(AXL2) and Rev7p (REV7) genes, complete cds.\u0022);\n (\u0022ACCESSION\u0022, Value \u0022U49845\u0022); (\u0022VERSION\u0022, Value \u0022U49845.1\u0022);\n (\u0022KEYWORDS\u0022, Value \u0022.\u0022);\n (\u0022SOURCE\u0022, Value \u0022Saccharomyces cerevisiae (baker\u0027s yeast)\u0022);\n (\u0022ORGANISM\u0022,\n ...\n]\n\nYou can also use converter functions for the origin sequence, which makes it easier to use them for other BioFSharp workflows. There are multiple prebuilt converters contained in the\nOriginConverters module for reading and writing. For example, the following code will parse the sequence as a BioSeq containing nucleotides\nlet converter = GenBank.OriginConverters.Input.nucleotideConverter\n\nlet parsedGBFile\u0026#39; = GenBank.Read.fromFileWithOriginConverter converter exampleFilePath\n\nThis makes it easy to perform additional tasks with the origin sequence:\nlet origin = GenBank.getOrigin parsedGBFile\u0026#39;\n\nseq [G; A; T; C; ...]\n\n///Transcribed origin sequence\nlet rnaSeq = origin |\u0026gt; BioSeq.transcribeCodingStrand \n\nseq [G; A; U; C; ...]\n\n///Translated origin sequence\nlet protein = rnaSeq |\u0026gt; BioSeq.translate 0\n\nseq [Asp; Pro; Pro; Tyr; ...]\n\nWriting GenBank files\nJust as in the Read module, there is a default writer for a GenBank dictionary that contains a sequence of chars, as a writer taking a custom converter function. Just specify the output path, and you are ready to go.\nlet outputPath1 = __SOURCE_DIRECTORY__ \u002B @\u0026quot;\\data\\sequenceTestWrite1.gb\u0026quot;\nlet outputPath2 = __SOURCE_DIRECTORY__ \u002B @\u0026quot;\\data\\sequenceTestWrite2.gb\u0026quot;\nlet outputConverter = GenBank.OriginConverters.Output.bioItemConverter\n\nparsedGBFile |\u0026gt; GenBank.Write.toFile outputPath1\n\nparsedGBFile\u0026#39; |\u0026gt; GenBank.Write.toFileWithOriginConverter outputPath2 outputConverter\n\n","headings":["GenBank parsing","GenBank format","Reading GenBank files","Writing GenBank files"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/03_06_newick.html","title":"Newick","content":"\nNewick parsing\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to parse obo formatted files with BioFSharp\nNewick format\nThe newick format is a simple, strictly symbolised format representing phylogenetic trees. It is the standard tree format used by the Clustal tool.\nIn general, internal nodes (nodes with a least one descendant) are opened with ( and closed with ). The childnodes within those internals are separated by ,. After every node, there can be, but most not be information about its name and the distance from its parent. Name and distance are separated by :. Every full tree has a ; at its end.\nThese key characters are not allowed to be used within the given names or distances. This restriction allows a wide range of possible trees as can be seen by the following list of example trees:\n( taken from wikipedia )\n\n\n(,,(,));\nno nodes are named\n\n\n(A,B,(C,D));\nleaf nodes are named\n\n\n(A,B,(C,D)E)F;\nall nodes are named\n\n\n(:0.1,:0.2,(:0.3,:0.4):0.5);\nall but root node have a distance to parent\n\n\n(:0.1,:0.2,(:0.3,:0.4):0.5):0.0;\nall have a distance to parent\n\n\n(A:0.1,B:0.2,(C:0.3,D:0.4):0.5);\ndistances and leaf names (popular)\n\n\n(A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\ndistances and all names\n\n\n((B:0.2,(C:0.3,D:0.4)E:0.5)F:0.1)A;\na tree rooted on a leaf node (rare)\n\n\nThe parser integrated in BioFSharp tries to cover this wide range of possible input data by using a very generic tree representantion and allowing the user to parse it the way he wants by the usage of a mapping function as additional input. Of course having an idea about this tree implementation is necessary for working with the already parsed trees. It is therefore recommended to look into the PhylTree(API reference can be found here).\nReading Newick files\nTo read a newick file, the function ofFile in BioFSharp.IO.Newick has to be used. It takes a mapping function of type string -\u0026gt; \u0027Distance and a path of type string. This means that names are always parsed as string but distances can be parsed at will. The usage of this is demonstrated here:\nLet\u0027s say we want to parse the following tree (which is btw. output generated by clustal omega):\n(  \n(  \nMozarella:0.44256,  \nBrie:-0.01399)  \n:0.01161,  \nCheddar:-0.00714,  \n(  \nEmmentaler:0.00113,  \nGouda:-0.00113)  \n:0.00714);  \n\nAfter wrapping ones head about this symbol salad, one might find a few things about this tree:\n* Only the leaf nodes are named\n* Every node but the top node has a distance in form of a float number\n* All subtrees are binary\nHere is the same tree in the form of a cladogramm:\n\nParsing newick files\nNow comes the parsing, as already mentioned, to bring the distance into a better form, we have to define a mapping function. In this case it\u0027s easy: we basically only need a function that transforms a string to a float if possible. Here it\u0027s important to mention that the parser interprets all nodes in the same way, as a functional programmer might expect. As not all nodes in the above tree have distances, that case has to be covered too, which is done in two different ways in this example:\nopen BioFSharp.IO\n\nlet fileDir = __SOURCE_DIRECTORY__ \u002B \u0026quot;/data/\u0026quot;\n\n\n//Maps string to float if possible. In the case it\u0026#39;s not it just returns 0 instead\nlet floatMapping (distance: string) =\n    try (float distance) with | _ -\u0026gt; 0.\n\n//Maps string to optional float wether it can be converted or not.\nlet floatMappingOptional (distance: string) =\n    match System.Double.TryParse distance with\n    | true, v    -\u0026gt; Some v\n    | false, _   -\u0026gt; None\n\n//As path we set an examplefile included in biofsharp which consists of the tree shown above\nlet path = fileDir \u002B \u0026quot;treeExample.txt\u0026quot;\n\nNewick.ofFile floatMapping path\n\nWarning: Output, it-value and value references require --eval\nAs written above, having an idea about the PhylTree in BioFSharp makes understanding this result much easier. Its API reference can be found here.\nWriting Newick files\nTo write a Newick file, the function toFile is used. Besides the output path and the tree it takes two additional functions. nodeConverter is intended to be used as a kind of separator of node name and distance, as sometimes the node info is not stored as a simple tuple, but has to be parsed as such. Both have to be converted to strings for parsing reasons.\nLet\u0027s see this in action. As an example we want to rebuild the original treeFile we read out above. Keep one thing in mind though: Of course we want to have it exactly look like the original. If you have read the tree with the converter function which returns a zero if the distance is not mappable to float, then the conversion back to string has to cover this case, or this zero will end up being in the file. This is not really a safe approach though, as real zeros might be lost with it. Therefore we will read and write the distance as an option and use the floatConverterOptional defined above:\n//Tree with distancevalue wrapped as option\nlet myOptionalTree = Newick.ofFile floatMappingOptional path\n\n//convertes nodeinformation to writeable name and distance\nlet converter (n,d) = \n    n,\n    match d with\n    | Some fl   -\u0026gt; string fl\n    | None      -\u0026gt; \u0026quot;\u0026quot; \n\n//write our original tree to path\n\nNewick.toFile converter (fileDir \u002B \u0026quot;outputTree.txt\u0026quot;) myOptionalTree\n\n","headings":["Newick parsing","Newick format","Reading Newick files","Parsing newick files","Writing Newick files"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/03_01_fasta_parsing.html","title":"Fasta","content":"\nFasta parsing\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to parse and write fasta formatted files with BioFSharp\nOne of the various biology-associated file formats that can be manipulated using BioFSharp is the Fasta format.\nThe Fasta format can be used to represent sequences of amino acids or nucleotides written in single-letter code.\nA sequence constists of two parts: The first line (Header) starting with a \u0022\u0026gt;\u0022 is followed by a sequence identification code which should represent a unique description of the sequence.\nSubsequent lines contain the sequence itself, which is separated into chunks of 60 to 80 characters per line.\nFor further information about the format please visit NCBI - FASTA.\nExample:\n\u0026gt;sp|P19532| ribosomal protein L20 GN=rpl20 PE=rpl20.p01\nMTRVKRGNVSRKRHKKILNMSKGFRGAASTLFRTANQQNMKALRYSYRNRRQKKRDFRRM\nWITRVNSAVRRYGLNYSEFMNYLKTHKIQLNRKVIAQLSICDPEAFMQLLLF*\n\nReading Fasta files\nopen BioFSharp\nopen BioFSharp.IO\n\nlet fileDir = __SOURCE_DIRECTORY__ \u002B \u0026quot;/data/\u0026quot;  //FASTAExample1.fasta\u0026quot;\n\n//reads from file to an array of FastaItems.\nlet sequences = \n    fileDir \u002B \u0026quot;Chlamy_Cp.fastA\u0026quot;\n    |\u0026gt; FastA.fromFile BioArray.ofAminoAcidString\n    |\u0026gt; Seq.toArray\n\nsequences.[0]\n\nWarning: Output, it-value and value references require --eval\nAnalogously it is possible to directly read compressed fastA files:\nlet sequences2 = \n    fileDir \u002B \u0026quot;Chlamy_Cp.gz\u0026quot;\n    |\u0026gt; FastA.fromGzipFile BioArray.ofAminoAcidString\n    \n\nIn both cases it is worth noticing that BioArray.ofAminoAcidString can be replaced by any converter function.\nThe converter maps from the sequence of character to either amino acid or nucleotide sequences. Therefore use BioArray.ofAminoAcidString for petide and BioArray.ofNucleotideString for gene FastA files, respectively.\nIt is of course also possible to introduce any converter function.\nWriting FastA files\nIn order to write a collection of sequences (FastaItem\u0026lt;_\u0026gt;) into a file use the following function.\nsequences\n|\u0026gt; FastA.write BioItem.symbol (fileDir \u002B \u0026quot;FASTAExample3.fasta\u0026quot;)  \n\nExample: protein length distribution\nWith the FastA reader it is straightforward to access the protein length distribution:\nopen Plotly.NET\n\nlet sequencesLength = \n    fileDir \u002B \u0026quot;Chlamy_Cp.fastA\u0026quot;\n    |\u0026gt; FastA.fromFile BioArray.ofAminoAcidString\n    |\u0026gt; Seq.map (fun item -\u0026gt; item.Sequence.Length)\n\nlet distChart =\n    Chart.Histogram sequencesLength\n    |\u0026gt; Chart.withXAxisStyle(\u0026quot;length\u0026quot;)\n    |\u0026gt; Chart.withYAxisStyle(\u0026quot;#count\u0026quot;)\n\nWarning: Output, it-value and value references require --eval\n","headings":["Fasta parsing","Reading Fasta files","Writing FastA files","Example: protein length distribution"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/03_03_gff3_parsing.html","title":"GFF3","content":"\nGFF3 parsing\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to parse and write gff3 formatted files with BioFSharp\nGeneric Feature Format Version 3\nIn GFF3 files every line represents one genomic feature with nine tab-delimited fields, whereas unlimited key-value pairs can be stored in field 9.\nIt is possible to link multiple features to genomic units using the \u0027Parent tag\u0027.\nIn the following you can see a GFF file example (modified version of saccharomyces_cerevisiae.gff):\n##gff-version 3\n# date Mon Feb  7 19:35:06 2005\nchrI  SGD  gene  335  649  .  \u002B  .  ID=YAL069W;Name=YAL069W;Ontology_term=GO:0000004,GO:0005554,GO:0008372;Note=Hypothetical%20ORF;dbxref=SGD:S000002143;orf_classification=Dubious\nchrI  SGD  CDS  335  649  .  \u002B  0  Parent=YAL069W;Name=YAL069W;Ontology_term=GO:0000004,GO:0005554,GO:0008372;Note=Hypothetical%20ORF;dbxref=SGD:S000002143;orf_classification=Dubious\n###\n##FASTA\n\u0026gt;chrI\nCCACACCACACCCACACACCCACACACCACACCACACACCACACCACACCCACACACACACATCCTAACACTACCCTAAC\nACAGCCCTAATCTAACCCTGGCCAACCTGTCTCTCAACTTACCCTCCATTACCCTGCCTCCACTCGTTACCCTGTCCCAT\nTCAACCATACCACTCCGAACCACCATCCATCCCTCTACTTACTACCACTCACCCACCGTTACCCTCCAATTACCCATATC\nCAACCCACTGCCACTTACCCTACCATTACCCTACCATCCACCATGACCTACTCACCATACTGTTCTTCTACCCACCATAT\nTGAAACGCTAACAAATGATCGTAAATAACACACACGTGCTTACCCTACCACTTTATACCACCACCACATGCCATACTCAC\nCCTCACTTGTATACTGATTTTACGTACGCACACGGATGCTACAGTATATACCATCTCAAACTTACCCTACTCTCAGATTC\nCACTTCACTCCATGGCCCATCTCTCACTGAATCAGTACCAAATGCACTCACATCATTATGCACGGCACTTGCCTCAGCGG\nTCTATACCCTGTGCCATTTACCCATAACGCCCATCATTATCCACATTTTGATATCTATATCTCATTCGGCGGTCCCAAAT\nATTGTATAACTGCCCTTAATACATACGTTATACCACTTTTGCACCATATACTTACCACTCCATTTATATACACTTATGTC\nAATATTACAGAAAAATCCCCACAAAAATCACCTAAACATAAAAATATTCTACTTTTCAACAATAATACATAAACATATTG\n\nDirectives (marked with \u0022##[...]\u0022) provide additional information like the gff-version which has to be the first line of each file (\u0022##gff-version 3[...]\u0022).\nComment lines have to start with a single \u0022#[...]\u0022. It is possible that sequences in FastA format are attached at the end of the file. This has to be announced by a \u0022##FASTA\u0022 directive line.\nFor further information visit GFF3-Specifications.\nReading GFF3 files\nTo read in a gff you have to insert a filepath and optionally a FastA converter. For further information about FastA check the FastA section\nor visit API Reference - FastA.\nopen BioFSharp\nopen BioFSharp.IO\n\n//path of the input file\nlet filepathGFF = (__SOURCE_DIRECTORY__ \u002B \u0026quot;/data/gff3Example.gff\u0026quot;)\n\n//reads from file to seq of GFFLines\n//If no FASTA Sequence is included you directly can use GFF3.fromFileWithoutFasta [filepathGFF].\n\nlet features = GFF3.fromFile BioFSharp.BioArray.ofNucleotideString filepathGFF \n\nseq\n[Directive \u0022##gff-version 3\u0022; Comment \u0022# date Mon Feb  7 19:35:06 2005\u0022;\n GFFEntryLine\n   { Seqid = \u0022chrI\u0022\n     Source = \u0022SGD\u0022\n     Feature = \u0022gene\u0022\n     StartPos = 335\n     EndPos = 649\n     Score = nan\n     Strand = \u0027\u002B\u0027\n     Phase = -1\n     Attributes =\n      map\n        [(\u0022ID\u0022, [\u0022YAL069W\u0022]); (\u0022Name\u0022, [\u0022YAL069W\u0022]);\n         (\u0022Note\u0022, [\u0022Hypothetical%20ORF\u0022]);\n         (\u0022Ontology_term\u0022, [\u0022GO:0000004\u0022; \u0022GO:0005554\u0022; \u0022GO:0008372\u0022]);\n         (\u0022dbxref\u0022, [\u0022SGD:S000002143\u0022]);\n         (\u0022orf_classification\u0022, [\u0022Dubious\u0022])]\n     Supplement = [|\u0022No supplement\u0022|] };\n GFFEntryLine{\n     ...\n]\n\nHow to use GFF3SanityCheck\nThe GFF3SanityCheck prints wether your GFF3 file is valid or not. It returns all specified errors including the lines in which they occured.\nIn contrast to GFF2 the field 3 (type, feature or method) of a GFF3 entry is restricted to terms defined by the sequence ontology (SO) so this validator is able to check if the entry is a valid SO term.\nYou can find new versions of the SO at (https://sourceforge.net/projects/song/files/SO_Feature_Annotation).\n//to validate the GFF file without SOTerm verification use this function and only insert the filepath\nlet featuresSanityCheck = GFF3.sanityCheck filepathGFF\n\n//path, name and version of the \u0026#39;Sequence Ontology terms\u0026#39;-file\nlet filepathSO_Terms = (__SOURCE_DIRECTORY__ \u002B \u0026quot;/data/Sequence_Ontology_Terms_2_5_3.txt\u0026quot;)\n\n//to validate the gff file insert filepath\nlet featuresSanityCheckWithSOTerm = GFF3.sanityCheckWithSOTerm filepathSO_Terms filepathGFF\n\nHow to use GFF3RelationshipSearch\nYou also can do a simple search for \u0022Parent - child of\u0022 relationships giving back all genomic features which contain the searchterm in ID/Id or Parent field.\n///Term to search for:\nlet searchterm = \u0026quot;YAL069W\u0026quot;\n\n///with this function you can search features which are related to the searchterm\nlet gffExampleSearch = GFF3.relationshipSearch features searchterm\n\nseq\n[{ Seqid = \u0022chrI\u0022\n   Source = \u0022SGD\u0022\n   Feature = \u0022gene\u0022\n   StartPos = 335\n   EndPos = 649\n   Score = nan\n   Strand = \u0027\u002B\u0027\n   Phase = -1\n   Attributes =\n    map\n      [(\u0022ID\u0022, [\u0022YAL069W\u0022]); (\u0022Name\u0022, [\u0022YAL069W\u0022]);\n       (\u0022Note\u0022, [\u0022Hypothetical%20ORF\u0022]);\n       (\u0022Ontology_term\u0022, [\u0022GO:0000004\u0022; \u0022GO:0005554\u0022; \u0022GO:0008372\u0022]);\n       (\u0022dbxref\u0022, [\u0022SGD:S000002143\u0022]); (\u0022orf_classification\u0022, [\u0022Dubious\u0022])]\n   Supplement = [|\u0022No supplement\u0022|] };\n { Seqid = \u0022chrI\u0022\n   Source = \u0022SGD\u0022\n   Feature = \u0022CDS\u0022\n   StartPos = 335\n   EndPos = 649\n   Score = nan\n   Strand = \u0027\u002B\u0027\n   Phase = 0\n   Attributes =\n    map\n      [(\u0022Name\u0022, [\u0022YAL069W\u0022]); (\u0022Note\u0022, [\u0022Hypothetical%20ORF\u0022]);\n       (\u0022Ontology_term\u0022, [\u0022GO:0000004\u0022; \u0022GO:0005554\u0022; \u0022GO:0008372\u0022]);\n       (\u0022Parent\u0022, [\u0022YAL069W\u0022]); (\u0022dbxref\u0022, [\u0022SGD:S000002143\u0022]);\n       (\u0022orf_classification\u0022, [\u0022Dubious\u0022])]\n   Supplement = [|\u0022No supplement\u0022|] }]\n\nWriting GFF3 files\nIn order to write a sequence of (GFFLine) into a file use the following function.\nIf FastA sequences are included they are appended by a FastA writer described in the API Reference - FastA.\nNote: The order of key value pairs in field 9 (attributes) may be changed.\n///Takes a seq\u0026lt;GFF\u0026lt;\u0026#39;a\u0026gt;\u0026gt;, a FASTA converter and a destination filepath and writes it into a .gff. Hint: Use converter = id if no FastA sequence is included.\nlet gffExampleWrite = GFF3.write BioItem.symbol (__SOURCE_DIRECTORY__ \u002B \u0026quot;/data/gffExampleWrite.gff\u0026quot;) features\n\nExample: Sequence of CDS\nIf a FastA file is included you can look up the sequence of a CDS feature using the following function.\nlet firstCDS = \n    //get GFFEntries\n    let filteredGFFEntries = \n        features \n        |\u0026gt; Seq.choose (fun x -\u0026gt;    \n            match x with\n            | GFF3.GFFEntryLine x -\u0026gt; Some x\n            | _ -\u0026gt; None)\n\n    //get all CDS features\n    let filteredCDSFeatures =\n        filteredGFFEntries\n        |\u0026gt; Seq.filter (fun x -\u0026gt; x.Feature = \u0026quot;CDS\u0026quot;)\n\n    filteredCDSFeatures |\u0026gt; Seq.head\n\nlet firstCDSSequence = GFF3.getSequence firstCDS features\n\nseq [A; T; G; A; ...]\n\n","headings":["GFF3 parsing","Generic Feature Format Version 3","Reading GFF3 files","How to use GFF3SanityCheck","How to use GFF3RelationshipSearch","Writing GFF3 files","Example: Sequence of CDS"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/02_03_pattern_query_algorithms.html","title":"Pattern query algorithms","content":"\nPattern query algorithms\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to use different pattern query algorithms in BioFSharp\nString matching algorithms are concerned with finding a single or multiple matches of a query pattern within a source. The sub-modules of the BioFSharp.Algorithm.StringMatching module are organized as following:\n\nAlgorithmName.findAll : returns the (zero-based) starting position of all matches of the query pattern in the source as an integer list\nAlgorithmName.find : returns the (zero-based) starting position of the first match of the query pattern in the source as an integer\nAlgorithmName.findFrom : returns the (zero-based) starting position of the first match of the query pattern in the source as an integer, starting from a specified (zero-based) position in the source\n\nAll algorithms contained in this library are implemented as generic as possible regarding the data type that the input source and query pattern can contain, being only restricted by implementing the IEquatable interface, as there must be a way to assure that two equal elements are indeed equal.\nHowever, the nature of the specific algorithm may impose additional restrictions, for example concerning the size of a single comparable item.\nThe type of query pattern and source has been constrained to be an array\u0026lt;\u0027a\u0026gt; because many index accessions are made during the search.\nRuntimes are provided using Bachmann-Landau notations:\n\nn : length of the source\nm : length of the query pattern\nk : size of the Alphabet\n\nThe following query pattern and source will be used in all further examples demonstrating how to use the specific module.\nopen BioFSharp\n\n///source containing the query pattern at positions 0,10 and 17 \nlet source = \u0026quot;AAABBBBBBBAAABBBBAAA\u0026quot; |\u0026gt; BioArray.ofAminoAcidString\n\n///query pattern to find in the source\nlet queryPattern = \u0026quot;AAA\u0026quot;|\u0026gt; BioArray.ofAminoAcidString\n\nThe Naive Algorithm\nThe naive approach to the string matching problem is walking through the source starting from the beginning and checking at each position if the resulting substring equals the query pattern.\nWhile being inefficient, it may be beneficial to use it in cases where the speed advantage of another algorithm is neglegible or does not outhweigh the additional setup needed (for example if your source and query pattern are really short)\nUsage\nNo additional setup needed. Just use query pattern and source as input parameters for the respective function\nopen BioFSharp.Algorithm.StringMatching\n\nNaive.findAll queryPattern source\n\nWarning: Output, it-value and value references require --eval\nNaive.find queryPattern source\n\nWarning: Output, it-value and value references require --eval\nNaive.findFrom 12 queryPattern source\n\nWarning: Output, it-value and value references require --eval\nRuntime\n\nPreprocessing: None\nMatching time: O(nm)\n\nKnuth Morris Pratt\nThe KMP algorithm makes use of previous match information to determine an amount of skips that can be made until the next position in the source gets examined as a possible match.\nTo achieve that, a prefix table (or failure function) of the pattern needs to be computed, which determines the amount of skippable elements depending on the previous (partial) match.\nUsage\n///prefix table computed from the query pattern\nlet prefixTable = KnuthMorrisPratt.createPrefixTable queryPattern\n\nKnuthMorrisPratt.findAll prefixTable queryPattern source\n\nWarning: Output, it-value and value references require --eval\nKnuthMorrisPratt.find prefixTable queryPattern source\n\nWarning: Output, it-value and value references require --eval\nKnuthMorrisPratt.findFrom prefixTable queryPattern 12 source\n\nWarning: Output, it-value and value references require --eval\nRuntime\n\nPreprocessing: \u0398(m)\nMatching time: average: \u0398(n)\nWorst case(if the prefix table results in no possible skips): \u0398(mn)\n\nRabin Karp\nThe RK Algorithm saves time by not comparing every single element of pattern and a substring of the same length from the source. Instead, it compares hashed versions of them.\nThe RabinKarp module contains two submodules:\n\nRKStandard: uses the build in .NET hash function hash\n\nCP: uses a cyclic polynomial hash, which is way faster than the built in hash function. Elements must be castable to uint64 , as they get hashed as a 64 bit unsigned integer and updating the hash uses bitwise operators.\nUsing large query patterns is problematic, as the combined hash may exceed the size of an uint64.\n\n\nUsage\nRKStandard\nRabinKarp.RKStandard.findAll queryPattern source\n\nWarning: Output, it-value and value references require --eval\nRabinKarp.RKStandard.find queryPattern source\n\nWarning: Output, it-value and value references require --eval\nRabinKarp.RKStandard.findFrom 12 queryPattern source\n\nWarning: Output, it-value and value references require --eval\nCP\nAs the AminoAcid type cannot be casted to an uint64, a conversion to their one character code is needed\n///source converted to char array \nlet source\u0026#39; = source |\u0026gt; Array.map (fun x -\u0026gt; (x :\u0026gt; IBioItem).Symbol)\n\n///query pattern converted to char array\nlet queryPattern\u0026#39; = queryPattern |\u0026gt; Array.map (fun x -\u0026gt; (x :\u0026gt; IBioItem).Symbol)\n\nRabinKarp.CP.findAll queryPattern\u0026#39; source\u0026#39;\n\nWarning: Output, it-value and value references require --eval\nRabinKarp.CP.find queryPattern\u0026#39; source\u0026#39;\n\nWarning: Output, it-value and value references require --eval\nRabinKarp.CP.findFrom 12 queryPattern\u0026#39; source\u0026#39;\n\nWarning: Output, it-value and value references require --eval\nUsing your own hash functions\nThe RabinKarp module provides generic findAll, find and findFrom functions that take the following additional parameters:\n\nblockHash: a function that hashes an entire array (used to hash the pattern and the first substring of the source)\nupdateHash: a function that removes an element from an existing hash and adds a new one\n\nJust use functional composition to build your own findX functions.\nIn fact the two provided algorithms are built the same way:\n///RabinKarp.CP.findAll built by functional composition\nlet inline findAll (pattern : array\u0026lt;\u0026#39;a\u0026gt;) (s : array\u0026lt;\u0026#39;a\u0026gt;) = \n    RabinKarp.findAllGeneric (RabinKarp.CP.updateHash pattern.Length) (RabinKarp.CP.blockHash) pattern s \n\nRuntime\n\nPreprocessing: \u0398(m)\nMatching time: average \u0398(n \u002B m)\nWorst case: \u0398((n\u2212m)m)\n\nBoyer Moore\ncoming soon...\nSpeed Comparison\nComing soon...\n","headings":["Pattern query algorithms","The Naive Algorithm","Usage","Runtime","Knuth Morris Pratt","Usage","Runtime","Rabin Karp","Usage","RKStandard","CP","Using your own hash functions","Runtime","Boyer Moore","Speed Comparison"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/rnaseq_normalization.html","title":"RNA-Seq data normalization","content":"\nRNA-Seq data normalization\nRNA-Seq is a high-throughput transcriptomics technique, that quantifies RNA molecules in a biological sample. RNA-Seq provides a view of the whole transcriptome and allows to look at gene-expression, post-transcriptonal modifications and look at different populations of RNA. When dealing with RNA-sequencing data, normalization is needed to correct technical biases. RPKM and TPM are two metrics that normalize for gene length and sequencing depth. RNA-Sequencing data needs to be normalized for gene length, because longer genes show greater read counts when expressed at the same level and for sequencing depth, as deeper sequencing depth produces more read counts per gene.\nRPKM (Reads per kilobase million)\nRPKM (Reads per kilobase million) normalization at first determines a scaling factor, by calculating the sum of all reads in a sample and dividing that number by 1,000,000. That scaling factor is used to calculate RPM (Reads per million), by dividing the read counts for each sample with it, normalizing for sequencing depth. To get RPKM and normalize for gene length, RPM values are divided by genelength in kilobases. RPKM is calculated by\n\\[RPKM = 10^9 * \\frac {\\text {Reads mapped to transcript}} {\\text {Total reads * Transcript length}}\\]\nThe formula is applied by using the RNASeq.rpkms function.\nThe following dataset will be used as an example for both normalizations.\nopen BioFSharp.Stats\nlet rawDataGeneID = seq {\u0026quot;g01\u0026quot;;\u0026quot;g02\u0026quot;;\u0026quot;g03\u0026quot;;\u0026quot;g04\u0026quot;;\u0026quot;g05\u0026quot;}\nlet rawDataGeneLength = seq {150.; 500.; 1500.; 500.; 1700.}\nlet rawDataGeneCount = seq {16.; 53.; 156.; 52.; 180.}\n\nlet rawData = Seq.map3 (fun id gl gc -\u0026gt;  RNASeq.RNASeqInput.Create id gl gc) rawDataGeneID rawDataGeneLength rawDataGeneCount\n\n\n// rpkm normalization \nopen BioFSharp.Stats\nlet rpkmData = RNASeq.rpkms rawData\n\nTPM (Transcripts per kilobase million)\nWhat differentiates TPM (Transcripts per kilobase million) from RPKM is the order of operations. To calculate TPM values, data gets normalized for gene length first. This is achieved by calculating RPK values (reads per kilobase), by dividing the read counts by genelength in kilobases. The sum of all RPK values is divided by 1,000,000, to get a scaling factor. Finally, TPM values are calculated by dividing the RPK values by the scaling factor, also normalizing for sequencing depth.\nBy normalizing for gene length first, the sum of all samples is always 1,000,000, making comparisons of proportions easier. TPM is calculated by\n\\[TPM = 10^6 * \\frac {\\text{Reads mapped to transcript / Transcript length}} {\\text {Sum(reads mapped to transcript / Transcript length)}}\\]\nThe formula is applied by using the RNASeq.tpms function.\n// tpm normalization\nopen BioFSharp.Stats\nlet tpmData = RNASeq.tpms rawData\n\nThe effects of both normalizations becomes apparent when comparing the relation of the samples\n// visualization of Raw Data, RPKM \u0026amp; TPM\n\nlet rawDataCounts =\n    rawData\n    |\u0026gt; Seq.map (fun input -\u0026gt; input.GeneCount)\n\nlet rawDataKeys =\n    rawData\n    |\u0026gt; Seq.map (fun input -\u0026gt; input.GeneID)\n\nlet rawDataLength = \n    rawData \n    |\u0026gt; Seq.map (fun input -\u0026gt; input.GeneLength)\n\nlet rpkmDataCounts =\n    rpkmData\n    |\u0026gt; Seq.map (fun rpkmData -\u0026gt; rpkmData.NormalizedCount)\n\nlet rpkmDataKeys =\n    rpkmData\n    |\u0026gt; Seq.map (fun rpkmData -\u0026gt; rpkmData.GeneID)\n\nlet tpmDataCounts =\n    tpmData\n    |\u0026gt; Seq.map (fun tpmData -\u0026gt; tpmData.NormalizedCount)\n    \nlet tpmDataKeys =\n    tpmData\n    |\u0026gt; Seq.map (fun tpmData -\u0026gt; tpmData.GeneID)\n\n[ \n    Chart.Column(values = rawDataLength, Keys = rawDataKeys, Name = \u0026quot;Gene Length\u0026quot;) \n    |\u0026gt; Chart.withXAxisStyle(TitleText = \u0026quot;gene ID\u0026quot;) \n    |\u0026gt; Chart.withYAxisStyle(TitleText = \u0026quot;gene Length\u0026quot;, TitleStandoff = 2, MinMax = (0., 1800.))\n    \n    Chart.Column(values = rawDataCounts, Keys = rawDataKeys, Name = \u0026quot;raw data counts\u0026quot;) \n    |\u0026gt; Chart.withXAxisStyle(TitleText = \u0026quot;gene ID\u0026quot;) \n    |\u0026gt; Chart.withYAxisStyle(TitleText = \u0026quot;Read Counts\u0026quot;, TitleStandoff = 2, MinMax = (0.,200.))\n                    \n    Chart.Column(values = rpkmDataCounts, Keys = rpkmDataKeys, Name = \u0026quot;RPKM\u0026quot;) \n    |\u0026gt; Chart.withXAxisStyle(TitleText = \u0026quot;gene ID\u0026quot;) \n    |\u0026gt; Chart.withYAxisStyle(TitleText = \u0026quot;Read Counts\u0026quot;, TitleStandoff = 2, MinMax = (0.,260000.))\n\n    Chart.Column(values = tpmDataCounts, Keys = tpmDataKeys, Name = \u0026quot;TPM\u0026quot;) \n    |\u0026gt; Chart.withXAxisStyle(TitleText = \u0026quot;gene ID\u0026quot;) \n    |\u0026gt; Chart.withYAxisStyle(TitleText = \u0026quot;Read Counts\u0026quot;, TitleStandoff = 2, MinMax = (0.,260000.))\n\n]\n|\u0026gt; Chart.Grid(nRows = 1, nCols = 4, XGap = 0.35)\n|\u0026gt; Chart.withSize (1000)\n\n\nvar renderPlotly_3c402ba6e240425180446bae4f6a1289 = function() {\n    var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-2.21.0.min\u0027}}) || require;\n    fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n        var data = [{\u0022type\u0022:\u0022bar\u0022,\u0022name\u0022:\u0022Gene Length\u0022,\u0022x\u0022:[\u0022g01\u0022,\u0022g02\u0022,\u0022g03\u0022,\u0022g04\u0022,\u0022g05\u0022],\u0022y\u0022:[150.0,500.0,1500.0,500.0,1700.0],\u0022orientation\u0022:\u0022v\u0022,\u0022marker\u0022:{\u0022pattern\u0022:{}},\u0022xaxis\u0022:\u0022x\u0022,\u0022yaxis\u0022:\u0022y\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022name\u0022:\u0022raw data counts\u0022,\u0022x\u0022:[\u0022g01\u0022,\u0022g02\u0022,\u0022g03\u0022,\u0022g04\u0022,\u0022g05\u0022],\u0022y\u0022:[16.0,53.0,156.0,52.0,180.0],\u0022orientation\u0022:\u0022v\u0022,\u0022marker\u0022:{\u0022pattern\u0022:{}},\u0022xaxis\u0022:\u0022x2\u0022,\u0022yaxis\u0022:\u0022y2\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022name\u0022:\u0022RPKM\u0022,\u0022x\u0022:[\u0022g01\u0022,\u0022g02\u0022,\u0022g03\u0022,\u0022g04\u0022,\u0022g05\u0022],\u0022y\u0022:[233406.27279358136,231947.48358862146,227571.11597374178,227571.1159737418,231690.05019951088],\u0022orientation\u0022:\u0022v\u0022,\u0022marker\u0022:{\u0022pattern\u0022:{}},\u0022xaxis\u0022:\u0022x3\u0022,\u0022yaxis\u0022:\u0022y3\u0022},{\u0022type\u0022:\u0022bar\u0022,\u0022name\u0022:\u0022TPM\u0022,\u0022x\u0022:[\u0022g01\u0022,\u0022g02\u0022,\u0022g03\u0022,\u0022g04\u0022,\u0022g05\u0022],\u0022y\u0022:[202576.89729649218,201310.7916883891,197512.47486407985,197512.47486407985,201087.36128695915],\u0022orientation\u0022:\u0022v\u0022,\u0022marker\u0022:{\u0022pattern\u0022:{}},\u0022xaxis\u0022:\u0022x4\u0022,\u0022yaxis\u0022:\u0022y4\u0022}];\n        var layout = {\u0022width\u0022:1000,\u0022height\u0022:600,\u0022template\u0022:{\u0022layout\u0022:{\u0022title\u0022:{\u0022x\u0022:0.05},\u0022font\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022paper_bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022plot_bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022autotypenumbers\u0022:\u0022strict\u0022,\u0022colorscale\u0022:{\u0022diverging\u0022:[[0.0,\u0022#8e0152\u0022],[0.1,\u0022#c51b7d\u0022],[0.2,\u0022#de77ae\u0022],[0.3,\u0022#f1b6da\u0022],[0.4,\u0022#fde0ef\u0022],[0.5,\u0022#f7f7f7\u0022],[0.6,\u0022#e6f5d0\u0022],[0.7,\u0022#b8e186\u0022],[0.8,\u0022#7fbc41\u0022],[0.9,\u0022#4d9221\u0022],[1.0,\u0022#276419\u0022]],\u0022sequential\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]],\u0022sequentialminus\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]},\u0022hovermode\u0022:\u0022closest\u0022,\u0022hoverlabel\u0022:{\u0022align\u0022:\u0022left\u0022},\u0022coloraxis\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022geo\u0022:{\u0022showland\u0022:true,\u0022landcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showlakes\u0022:true,\u0022lakecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022subunitcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022bgcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022mapbox\u0022:{\u0022style\u0022:\u0022light\u0022},\u0022polar\u0022:{\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022radialaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022},\u0022angularaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022ticks\u0022:\u0022\u0022}},\u0022scene\u0022:{\u0022xaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022yaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true},\u0022zaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridwidth\u0022:2.0,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022backgroundcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022showbackground\u0022:true}},\u0022ternary\u0022:{\u0022aaxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022baxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022caxis\u0022:{\u0022ticks\u0022:\u0022\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022},\u0022bgcolor\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022},\u0022xaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:\u0022height\u002Bwidth\u002Bleft\u002Bright\u002Btop\u002Bbottom\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022yaxis\u0022:{\u0022title\u0022:{\u0022standoff\u0022:15},\u0022ticks\u0022:\u0022\u0022,\u0022automargin\u0022:\u0022height\u002Bwidth\u002Bleft\u002Bright\u002Btop\u002Bbottom\u0022,\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022zerolinewidth\u0022:2.0},\u0022annotationdefaults\u0022:{\u0022arrowcolor\u0022:\u0022#2a3f5f\u0022,\u0022arrowhead\u0022:0,\u0022arrowwidth\u0022:1},\u0022shapedefaults\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}},\u0022colorway\u0022:[\u0022rgba(99, 110, 250, 1.0)\u0022,\u0022rgba(239, 85, 59, 1.0)\u0022,\u0022rgba(0, 204, 150, 1.0)\u0022,\u0022rgba(171, 99, 250, 1.0)\u0022,\u0022rgba(255, 161, 90, 1.0)\u0022,\u0022rgba(25, 211, 243, 1.0)\u0022,\u0022rgba(255, 102, 146, 1.0)\u0022,\u0022rgba(182, 232, 128, 1.0)\u0022,\u0022rgba(255, 151, 255, 1.0)\u0022,\u0022rgba(254, 203, 82, 1.0)\u0022]},\u0022data\u0022:{\u0022bar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}},\u0022error_x\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022error_y\u0022:{\u0022color\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022barpolar\u0022:[{\u0022marker\u0022:{\u0022line\u0022:{\u0022color\u0022:\u0022rgba(229, 236, 246, 1.0)\u0022,\u0022width\u0022:0.5},\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022carpet\u0022:[{\u0022aaxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022},\u0022baxis\u0022:{\u0022linecolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022gridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022endlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022,\u0022minorgridcolor\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022,\u0022startlinecolor\u0022:\u0022rgba(42, 63, 95, 1.0)\u0022}}],\u0022choropleth\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022contourcarpet\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022heatmap\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022heatmapgl\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram\u0022:[{\u0022marker\u0022:{\u0022pattern\u0022:{\u0022fillmode\u0022:\u0022overlay\u0022,\u0022size\u0022:10,\u0022solidity\u0022:0.2}}}],\u0022histogram2d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022histogram2dcontour\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022mesh3d\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}],\u0022parcoords\u0022:[{\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022pie\u0022:[{\u0022automargin\u0022:true}],\u0022scatter\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatter3d\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}},\u0022line\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattercarpet\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergeo\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattergl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scattermapbox\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolar\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterpolargl\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022scatterternary\u0022:[{\u0022marker\u0022:{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022}}}],\u0022surface\u0022:[{\u0022colorbar\u0022:{\u0022outlinewidth\u0022:0.0,\u0022ticks\u0022:\u0022\u0022},\u0022colorscale\u0022:[[0.0,\u0022#0d0887\u0022],[0.1111111111111111,\u0022#46039f\u0022],[0.2222222222222222,\u0022#7201a8\u0022],[0.3333333333333333,\u0022#9c179e\u0022],[0.4444444444444444,\u0022#bd3786\u0022],[0.5555555555555556,\u0022#d8576b\u0022],[0.6666666666666666,\u0022#ed7953\u0022],[0.7777777777777778,\u0022#fb9f3a\u0022],[0.8888888888888888,\u0022#fdca26\u0022],[1.0,\u0022#f0f921\u0022]]}],\u0022table\u0022:[{\u0022cells\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(235, 240, 248, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}},\u0022header\u0022:{\u0022fill\u0022:{\u0022color\u0022:\u0022rgba(200, 212, 227, 1.0)\u0022},\u0022line\u0022:{\u0022color\u0022:\u0022rgba(255, 255, 255, 1.0)\u0022}}}]}},\u0022xaxis\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022gene ID\u0022}},\u0022yaxis\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022gene Length\u0022,\u0022standoff\u0022:2},\u0022range\u0022:[0.0,1800.0]},\u0022xaxis2\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022gene ID\u0022}},\u0022yaxis2\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022Read Counts\u0022,\u0022standoff\u0022:2},\u0022range\u0022:[0.0,200.0]},\u0022xaxis3\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022gene ID\u0022}},\u0022yaxis3\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022Read Counts\u0022,\u0022standoff\u0022:2},\u0022range\u0022:[0.0,260000.0]},\u0022xaxis4\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022gene ID\u0022}},\u0022yaxis4\u0022:{\u0022title\u0022:{\u0022text\u0022:\u0022Read Counts\u0022,\u0022standoff\u0022:2},\u0022range\u0022:[0.0,260000.0]},\u0022grid\u0022:{\u0022rows\u0022:1,\u0022columns\u0022:4,\u0022pattern\u0022:\u0022independent\u0022,\u0022xgap\u0022:0.35}};\n        var config = {\u0022responsive\u0022:true};\n        Plotly.newPlot(\u00273c402ba6-e240-4251-8044-6bae4f6a1289\u0027, data, layout, config);\n    });\n};\nif ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n    var script = document.createElement(\u0022script\u0022);\n    script.setAttribute(\u0022charset\u0022, \u0022utf-8\u0022);\n    script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n    script.onload = function(){\n        renderPlotly_3c402ba6e240425180446bae4f6a1289();\n    };\n    document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n}\nelse {\n    renderPlotly_3c402ba6e240425180446bae4f6a1289();\n}\n\n\nThese graphs show how RPKM and TPM correct for technical biases, especially gene length, as the three shorter genes (g01, g02 \u0026amp; g04) are no longer underrepresented.\nSources: RNA-Seqblog\n","headings":["RNA-Seq data normalization","RPKM (Reads per kilobase million)","TPM (Transcripts per kilobase million)"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/02_02_blast.html","title":"Blast","content":"\nBlast\n\u0026emsp;\n\u0026emsp;\n\nSummary: This example shows how to perform blast with BioFSharp\nBioFSharp\u0027s BlastWrapper is a tool for performing different tasks in NCBI BLAST console applications (version 2.2.31\u002B).\nIt is able to create BLAST databases and perform blastN or blastP queries, while providing a way to set\noutput parameter for creating a custom output format.\nOfficial documentation for all BLAST applications can be found here.\nFor the purpose of this tutorial, we will build a protein database using a .fastA file containing chloroplast proteins\nof Chlamydomonas reinhardtii included in BioFSharp/docs/content/data.\nOur query protein for the subsequent BLAST search will be the photosystem II protein D1 from Arabidopsis thaliana chloroplast.\nCreation of a BLAST database\nWe will use the minimal amount of parameters needed to create a BLAST database from an input file.\nThe created database files will have the same name as the input file and will be located in the same folder.\nHowever, there are many parameters you can use to specify your database. Please refer to the NCBI user manual for more information.\nFirst, lets specify the path of our input and the type of our database. Use a string for the input path and the provided MakeDbParams type\nfor every other parameter.\nopen BioFSharp\nopen BioFSharp.IO\nopen BlastNCBI\nopen Parameters\n\n///path and name of the input file/output database. \nlet inputFile = (__SOURCE_DIRECTORY__ \u002B \u0026quot;/data/Chlamy_Cp.fastA\u0026quot;)\n\n///defines database type (in this case: a protein database)\nlet typeOfDatabase = Parameters.MakeDbParams.DbType Parameters.Protein\n\nThe wrapper needs to know the path of the ncbi applications.\n///the path of the /bin folder where the BLAST applications are located\nlet ncbiPath = (__SOURCE_DIRECTORY__ \u002B \u0026quot;/../../lib/ncbi-blast/bin\u0026quot;)\n\nWe now provide the wrapper our ncbi path, the input path and a sequence of parameters (containing just one parameter in this case, the database type).\nBlastWrapper(ncbiPath).makeblastdb inputFile ([typeOfDatabase;] |\u0026gt; seq\u0026lt;Parameters.MakeDbParams\u0026gt;)\n\nYour console output will look like this:\nStarting Makeblastdb...\n\n\nBuilding a new DB, current time: 12/05/2018 09:02:20\nNew DB name:   C:\\Users\\Kevin\\source\\repos\\CSBiology\\BioFSharp\\docsrc\\content/data/Chlamy_Cp.fastA\nNew DB title:  C:\\Users\\Kevin\\source\\repos\\CSBiology\\BioFSharp\\docsrc\\content/data/Chlamy_Cp.fastA\nSequence type: Protein\nDeleted existing Protein BLAST database named C:\\Users\\Kevin\\source\\repos\\CSBiology\\BioFSharp\\docsrc\\content/data/Chlamy_Cp.fastA\nKeep Linkouts: T\nKeep MBits: T\nMaximum file size: 1000000000B\nAdding sequences from FASTA; added 74 sequences in 0.0107442 seconds.\nMakeblastdb done.\n\nThis creates 3 new files in our directory:\nChlamy_Cp.fastA.phr,Chlamy_Cp.fastA.pin and Chlamy_Cp.fastA.psq.\nWe have sucesssfully created our search database.\nCreating a fasta file from an aminoacid string\nNote: this step is not necessary if you want to use an already existing file as query. If this is the case, skip to step 3.\nFirst, lets specify a string with our aminoacid sequence and convert it to a BioSeq.\nFor more information about BioSeq, please refer to this documentation\n///Raw string of the aminoacid sequence of our query protein\nlet aminoacidString = \u0026quot;MTAILERRESESLWGRFCNWITSTENRLYIGWFGVLMIPTLLTATSVFIIAFIAAPPVDIDGIREPVSGS\nLLYGNNIISGAIIPTSAAIGLHFYPIWEAASVDEWLYNGGPYELIVLHFLLGVACYMGREWELSFRLGMR\nPWIAVAYSAPVAAATAVFLIYPIGQGSFSDGMPLGISGTFNFMIVFQAEHNILMHPFHMLGVAGVFGGSL\nFSAMHGSLVTSSLIRETTENESANEGYRFGQEEETYNIVAAHGYFGRLIFQYASFNNSRSLHFFLAAWPV\nVGIWFTALGISTMAFNLNGFNFNQSVVDSQGRVINTWADIINRANLGMEVMHERNAHNFPLDLAAVEAPS\nTNG\u0026quot;\n///header for the .fastA file\nlet header = \u0026quot;\u0026gt;gi|7525013|ref|NP_051039.1| photosystem II protein D1 (chloroplast) [Arabidopsis thaliana]\u0026quot;\n\n///Query sequency represented as a sequence of \u0060AminoAcid\u0060 one of BioFSharp\u0026#39;s \u0060BioItems\u0060\nlet querySequence = BioSeq.ofAminoAcidString aminoacidString\n\nWe will now use BioFSharp\u0027s FastA library to create a FASTA item and write it to a file.\n///path and name of the query file\nlet queryFastaPath = __SOURCE_DIRECTORY__ \u002B \u0026quot;/data/testQuery.fastA\u0026quot;\n\n///FastaItem containing header string and query sequence\nlet queryFastaItem = FastA.createFastaItem header querySequence\n\nTo create our .fastA file, we need to use the BioItem.symbol converter, which will convert the 3 letter code of the aminoacids in our biosequence\nto the one letter symbol (eg. Met -\u0026gt; M)\nFastA.write BioItem.symbol queryFastaPath [queryFastaItem;] \n\nPerforming the BLAST search\nWe have created our search database and the query we want to find. Before we can perform the actual search, we need to define the BLAST prameters.\nNote: custom output formats can only be specified for output types CSV, tabular and tabular with comments. For more information, check\nthe options for the command-line applicaions\nFirst, lets specify the overall output type. This will define the outline of our output. We want our output to be in tabular form, with added information\nin the form of comments.\nNote: when not specified otherwise, the output type will be pairwise\n///overall outline of the output \nlet outputType = OutputType.TabularWithComments\n\nWe have a large selection of parameters that we can include in the output.\n///a sequence of custom output format parameters\nlet outputFormat= \n    \n    [   \n        OutputCustom.Query_SeqId; \n        OutputCustom.Subject_SeqId;\n        OutputCustom.Query_Length;\n        OutputCustom.Subject_Length;\n        OutputCustom.AlignmentLength;\n        OutputCustom.MismatchCount;\n        OutputCustom.IdentityCount;\n        OutputCustom.PositiveScoringMatchCount;\n        OutputCustom.Evalue;\n        OutputCustom.Bitscore;\n    ] \n        |\u0026gt; List.toSeq\n\nFinally, we create a BlastParam of the type OutputTypeCustom from a touple of outputType and outputFormat.\nNote: No touple required if you want to use the default output format. If this is the case,\njust create a BlastParam of type OutputType.\n///The final output format\nlet customOutputFormat = OutputTypeCustom(outputType , outputFormat)\n\nWe now have everything set up to perform the BLAST search. As we are talking about proteins, we will use blastP. The parameters needed for the Wrapper function are:\n\npath of the ncbi/bin folder\npath and name of the search database\npath and name of the query\npath and name of our output file\na sequence of BLAST parameters, containing any parameters additional to the above (like our customOutputFormat)\n\nNote: in this case we can use the string inputFile that we used above for creating our database, as we did not specify another path or name for our database. Adjust accordingly if\ndone otherwise\n///output file of the BLAST search\nlet outputPath = (__SOURCE_DIRECTORY__ \u002B \u0026quot;/data/Output.txt\u0026quot;) \n\nBlastWrapper(ncbiPath).blastP inputFile queryFastaPath outputPath ([customOutputFormat;] |\u0026gt; seq\u0026lt;BlastParams\u0026gt;)\n\nAs you can see in the result file, the format is tab separated and contains the fields we specified in our our customOutputFormat.\n# BLASTP 2.2.31\u002B\n# Query: \u0026gt;gi|7525013|ref|NP_051039.1| photosystem II protein D1 (chloroplast) [Arabidopsis thaliana]\n# Database: C:\\Users\\Kevin\\source\\repos\\CSBiology\\BioFSharp\\docsrc\\content/data/Chlamy_Cp.fastA\n# Fields: query id, subject id, query length, subject length, alignment length, mismatches, identical, positives, evalue, bit score\n# 8 hits found\n\u0026gt;gi|7525013|ref|NP_051039.1|    sp|P19547|    353    353    346     20      326     338     0.0     645\n\u0026gt;gi|7525013|ref|NP_051039.1|    sp|P19546|    353    353    346     20      326     338     0.0     645\n\u0026gt;gi|7525013|ref|NP_051039.1|    sp|P19587|    353    353    303     199     93      162     9e-045  152\n\u0026gt;gi|7525013|ref|NP_051039.1|    sp|P19592|    353    490    49      32      14      24      2.2     21.6\n\u0026gt;gi|7525013|ref|NP_051039.1|    sp|P19592|    353    490    15      10      5       12      8.7     19.6\n\u0026gt;gi|7525013|ref|NP_051039.1|    sp|P19571|    353    3121   25      13      11      15      5.4     20.4\n\u0026gt;gi|7525013|ref|NP_051039.1|    sp|P19580|    353    470    30      20      10      12      6.5     20.0\n\u0026gt;gi|7525013|ref|NP_051039.1|    sp|P19565|    353    627    51      26      16      23      8.6     20.0\n# BLAST processed 1 queries\n\n","headings":["Blast","Creation of a BLAST database","Creating a fasta file from an aminoacid string","Performing the BLAST search"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/index.html","title":"BioFSharp\n","content":"BioFSharp\nBioFSharp aims to be a user-friendly functional library for bioinformatics written in F#. It contains the basic data structures for common biological objects like amino acids and nucleotides based on chemical formulas and chemical elements.\nBioFSharp facilitates working with sequences in a strongly typed way and is designed to work well with F# Interactive.\nIt provides a variety of parsers for many biological file formats and a variety of algorithms suited for bioinformatic workflows.\nThe core datamodel implements in ascending hierarchical order:\n\nChemical elements and formulas which are a collection of elements\nAmino Acids, Nucleotides and Modifications, which all implement the common IBioItem interface\nBioCollections (BioItem,BioList,BioSeq) as representation of biological sequences\n\n\n\n\n\nInstallation\nFor applications and libraries\nYou can find all available package versions on nuget.\n\n\ndotnet CLI\ndotnet add package BioFSharp\n\n\n\npaket CLI\npaket add BioFSharp\n\n\n\npackage manager\nInstall-Package BioFSharp -Version 2.0.0\n\nOr add the package reference directly to your .*proj file:\n\u0026lt;PackageReference Include=\u0026quot;BioFSharp\u0026quot; Version=\u0026quot;2.0.0\u0026quot; /\u0026gt;\n\n\n\nFor scripting and interactive notebooks\nYou can include the package via an inline package reference:\n#r \u0026quot;nuget: BioFSharp\u0026quot;\n\n\nExample\nThe following example shows how easy it is to start working with sequences:\nCreate a peptide sequence:\nopen BioFSharp\n\n\u0026quot;PEPTIDE\u0026quot; |\u0026gt; BioArray.ofAminoAcidString\n\n\n         1  PEPTIDE\n\n\nCreate a nucleotide sequence:\n\u0026quot;ATGC\u0026quot; |\u0026gt; BioArray.ofNucleotideString\n\n\n         1  ATGC\n\n\nBioFSharp comes equipped with a broad range of features and functions to map amino acids and nucleotides.\n// Returns the corresponding nucleotide of the complementary strand\nNucleotides.G |\u0026gt; Nucleotides.complement\n\nC\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\n// Returns the monoisotopic mass of Arginine (minus H2O)\nAminoAcids.Arg |\u0026gt; AminoAcids.monoisoMass\n\n156.10111102304\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nThe various file readers in BioFSharp help to easily retrieve information and write biology-associated file formats like for example FastA:\nopen BioFSharp.IO\n\nlet filepathFastaA = (__SOURCE_DIRECTORY__ \u002B \u0026quot;/data/Chlamy_Cp.fastA\u0026quot;)\n//reads from file to an array of FastaItems.\n\nlet fastaItems = FastA.fromFile BioArray.ofAminoAcidString filepathFastaA\n\nThis will return a sequence of FastaItems, where you can directly start working with the individual sequences represented as a BioArray of amino acids.\nfastaItems |\u0026gt; Seq.item 0\n\n{ Header = \u0026quot;sp|P19528| cytochrome b6/f complex subunit 4 GN=petD PE=petD.p01\u0026quot;\\n  Sequence =\\n   [|Met; Ser; Val; Thr; Lys; Lys; Pro; Asp; Leu; Ser; Asp; Pro; Val; Leu; Lys;\\n     Ala; Lys; Leu; Ala; Lys; Gly; Met; Gly; His; Asn; Thr; Tyr; Gly; Glu; Pro;\\n     Ala; Trp; Pro; Asn; Asp; Leu; Leu; Tyr; ...Headersp|P19528| cytochrome b6/f complex subunit 4 GN=petD PE=petD.p01Sequence\n         1  MSVTKKPDLS DPVLKAKLAK GMGHNTYGEP AWPNDLLYMF PVVILGTFAC VIGLSVLDPA\n        61  AMGEPANPFA TPLEILPEWY FYPVFQILRV VPNKLLGVLL MAAVPAGLIT VPFIESINKF\n       121  QNPYRRPIAT ILFLLGTLVA VWLGIGSTFP IDISLTLGLF *\n\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nFor more detailed examples continue to explore the BioFSharp documentation.\nIn the near future we will start to provide a cookbook like tutorial in the CSBlog.\nContributing and copyright\nThe project is hosted on GitHub where you can report issues, fork\nthe project and submit pull requests. If you\u0027re adding a new public API, please also\nconsider adding samples that can be turned into a documentation.\nThe library is available under the OSI-approved MIT license. For more information see the\nLicense file in the GitHub repository.\n","headings":["BioFSharp","Installation","For applications and libraries","For scripting and interactive notebooks","Example","Contributing and copyright"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/img/release-notes.html","title":"release-notes","content":"0.0.1 - Thursday, August 9, 2018\n\nInitial release\n\n","headings":["0.0.1 - Thursday, August 9, 2018"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/core/bioitems.html","title":"BioItems","content":"\nBioItems\nSummary: This example shows how to use BioItemsin BioFSharp\nOften, dealing with similar problems separately results in different approaches. In a programming background, this might make things needlessly complex. Therefore in BioFSharp nucleotides and amino acids are based on the same structural scaffold, leading to a consistent way of working with them. This can come in handy especially when working with their formulas.\nTable of contents\n\nBasics\n\nAminoAcids\n\nModifying Amino Acids\n\n\nNucleotides\n\nBasics\nMany functions are similar for AminoAcids and Nucleotides, like for example:\nopen BioFSharp\nopen BioFSharp.AminoAcids\nopen BioFSharp.Nucleotides\n\nAccessing the full name:\nAminoAcids.name Ala,\nNucleotides.name G \n\n(Alanine, Guanine)Item1AlanineItem2Guanine\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nor the underlying chemical formula:\nAminoAcids.formula Lys |\u0026gt; Formula.toString,\nNucleotides.formula T |\u0026gt; Formula.toString \n\n(C6.00 H12.00 N2.00 O1.00, C10.00 H14.00 N2.00 O5.00)Item1C6.00 H12.00 N2.00 O1.00Item2C10.00 H14.00 N2.00 O5.00\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nNucleotides and AminoAcids in BioFSharp are represented as Union cases. This makes applying functions selectively very easy.\nlet filterLysine aa = \n    match aa with\n    | AminoAcids.Lys -\u0026gt; AminoAcids.Gap\n    | _ -\u0026gt; aa\n\nfilterLysine Ala \n\nA\n\nfilterLysine Lys\n\n-\n\nOf course some functions like these are already defined. Let\u0027s use a predefined function to find charged amino acids.\nlet giveMePositiveAAs aminoAcid = \n    match aminoAcid with\n    | a when AminoAcids.isPosCharged a -\u0026gt; \n        printfn \n            \u0026quot;Hey, how are you? I am %s, but my friends call me %c. I\u0026#39;m usually in a positive mood\u0026quot;\n            (AminoAcids.name a)\n            (AminoAcids.symbol a)\n\n    | a when AminoAcids.isNegCharged a -\u0026gt; \n        printfn \n            \u0026quot;I am %s, short: %c. I\u0026#39;m usually in a negative mood\u0026quot;\n            (AminoAcids.name a)\n            (AminoAcids.symbol a)\n\n    | _ -\u0026gt; printfn \u0026quot;Just strolling around, minding my own business.\u0026quot;\n\nAlanine is usually not charged\ngiveMePositiveAAs Ala\n\nJust strolling around, minding my own business.\n\nLysine is usually positively charged:\ngiveMePositiveAAs Lys\n\nHey, how are you? I am Lysine, but my friends call me K. I\u0027m usually in a positive mood\n\nGlutamic acid is usually negatively charged:\ngiveMePositiveAAs Glu\n\nI am Glutamic Acid, short: E. I\u0027m usually in a negative mood\n\nAmino Acids\nModifying Amino Acids\nWhat makes working on Amino Acids with BioFSharp truly powerful is the ability to easily modify AminoAcids, even altering their mass and formula. In the following example we try to find out the mass of a phosphorylated Serine. Applications like these might be quite usefull for identification of peptides in mass spectrometry.\nSer\n|\u0026gt; AminoAcids.formula \n|\u0026gt; Formula.toString\n\nC3.00 H5.00 N1.00 O2.00\nAs you can see by the formula, ur Serine is missing two H and an O. In BioFSharp, all Amino Acids are dehydrolysed by default, because it is assumed that the user will use collections representing a peptide, rather than single Amino Acids. For our cause we want serine in hydrolysed form. An easy way to achieve this is to modify it. An addition of H2O is quite common and therefore premade:\n///Hydrolysed serine\n\nlet hydroSerine = AminoAcids.setModification ModificationInfo.Table.H2O Ser\n\nhydroSerine\n|\u0026gt; AminoAcids.formula \n|\u0026gt; Formula.toString\n\nC3.00 H7.00 N1.00 O3.00\nSo far so good. Now let\u0027s add the phosphate. For this we first create a function which alters the formula of a given molecule in the way a phosphorylation would. In the second step we create a modification resembling a phosphorylation of a residual. At last we modify our Serine with this modification.\n///Phosphorylation of OH-Groups adds PO3 to formula and removes one H\nlet phosporylate formula =  \n    Formula.add (Formula.parseFormulaString \u0026quot;PO3\u0026quot;) formula\n    |\u0026gt; Formula.substract (Formula.parseFormulaString \u0026quot;H\u0026quot;)\n\n//We create a modification at the residual called phosphorylation which in our case is hypothetical, hence the \u0060false\u0060 for the \u0026#39;isBiological\u0060 parameter\nlet phosphorylation = ModificationInfo.createModification \u0026quot;Phosphorylation\u0026quot; false ModificationInfo.ModLocation.Residual phosporylate\n\n///phosphorylated Serine\nlet phosphoSerine = AminoAcids.setModification phosphorylation hydroSerine\n\nphosphoSerine \n|\u0026gt; AminoAcids.formula \n|\u0026gt; Formula.toString\n\nP1.00 C3.00 H6.00 N1.00 O6.00\nAs you can see the Serine is phosphorylated just as we wanted. Our inital aim was to check the mass, this can be done quite easily:\nAminoAcids.averageMass Ser\n\n87.07757500000001\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nAminoAcids.averageMass phosphoSerine\n\n183.05688399999997\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nNucleotides\nAs working with nucleotides is usually focused on the sequence of the bases, rather than how they actually look like, the list of nucleotide specific functions would be quite short. Here are some of the basic helper functions:\nlet myAdenine = Nucleotides.A \nlet myThymine = Nucleotides.complement myAdenine \n\nmyAdenine, myThymine\n\n(A, T)Item1AItem2T\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nNucleotides.replaceTbyU myAdenine\n\nA\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nNucleotides.replaceTbyU myThymine \n\nU\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\n","headings":["BioItems","Table of contents","Basics","Amino Acids","Modifying Amino Acids","Nucleotides"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/core/biocollections.html","title":"Biocollections","content":"\nBioCollections\nSummary: This example shows how to use collections of biological items in BioFSharp\nAnalogous to the build-in collections BioFSharp provides BioSeq, BioList and BioArray for individual collection specific optimized operations.\nThe easiest way to create them are the ofBioItemString -functions\nopen BioFSharp\n\nlet s1 = \u0026quot;PEPTIDE\u0026quot; |\u0026gt; BioSeq.ofAminoAcidString \nlet s2 = \u0026quot;PEPTIDE\u0026quot; |\u0026gt; BioList.ofAminoAcidString \nlet s3 = \u0026quot;TAGCAT\u0026quot;  |\u0026gt; BioArray.ofNucleotideString \n\ns1, s2, s3\n\n(Microsoft.FSharp.Collections.IEnumerator\u002BmkSeq@177[BioFSharp.AminoAcids\u002BAminoAcid], [Pro; Glu; Pro; ... ], BioFSharp.Nucleotides\u002BNucleotide[])Item1\n1  PEPTIDE\nItem2\n1  PEPTIDE\nItem3\n1  TAGCAT\n\n.dni-code-hint {\nfont-style: italic;\noverflow: hidden;\nwhite-space: nowrap;\n}\n.dni-treeview {\nwhite-space: nowrap;\n}\n.dni-treeview td {\nvertical-align: top;\ntext-align: start;\n}\ndetails.dni-treeview {\npadding-left: 1em;\n}\ntable td {\ntext-align: start;\n}\ntable tr {\nvertical-align: top;\nmargin: 0em 0px;\n}\ntable tr td pre\n{\nvertical-align: top !important;\nmargin: 0em 0px !important;\n}\ntable th {\ntext-align: start;\n}\n\n\nNucleotides\n\nFigure 1: Selection of covered nucleotide operations (A) Biological principle. (B) Workflow with BioSeq. (C) Other covered functionalities.\nLet\u0027s imagine you have a given gene sequence and want to find out what the according protein might look like.\nlet myGene = BioArray.ofNucleotideString \u0026quot;ATGGCTAGATCGATCGATCGGCTAACGTAA\u0026quot;\n\nmyGene\n\n\n         1  ATGGCTAGAT CGATCGATCG GCTAACGTAA\n\n\nYikes! Unfortunately we got the 5\u0027-3\u0027 coding strand. For proper transcription we should get the complementary strand first:\nlet myProperGene = BioArray.complement myGene\n\nmyProperGene\n\n\n         1  TACCGATCTA GCTAGCTAGC CGATTGCATT\n\n\nNow let\u0027s transcribe and translate it:\nlet myTranslatedGene = \n    myProperGene\n    |\u0026gt; BioArray.transcribeTemplateStrand\n    |\u0026gt; BioArray.translate 0\n\nmyTranslatedGene\n\n\n         1  MARSIDRLT*\n\n\nOf course, if your input sequence originates from the coding strand, you can directly transcribe it to mRNA since the\nonly difference between the coding strand and the mRNA is the replacement of \u0027T\u0027 by \u0027U\u0027 (Figure 1B)\nlet myTranslatedGeneFromCodingStrand = \n    myGene\n    |\u0026gt; BioArray.transcribeCodingStrand\n    |\u0026gt; BioArray.translate 0\n\nmyTranslatedGeneFromCodingStrand\n\n\n         1  MARSIDRLT*\n\n\nOther Nucleotide conversion operations are also covered:\nlet mySmallGene = BioSeq.ofNucleotideString  \u0026quot;ATGTTCCGAT\u0026quot;\n\nmySmallGene\n\n\n         1  ATGTTCCGAT\n\n\nBioSeq.reverse mySmallGene \n\n\n         1  TAGCCTTGTA\n\n\nBioSeq.complement mySmallGene\n\n\n         1  TACAAGGCTA\n\n\nBioSeq.reverseComplement mySmallGene\n\n\n         1  ATCGGAACAT\n\n\nAminoAcids\nBasics\nSome functions which might be needed regularly are defined to work with nucleotides and amino acids:\nlet myPeptide = \u0026quot;PEPTIDE\u0026quot; |\u0026gt; BioSeq.ofAminoAcidString \n\nmyPeptide\n\n\n         1  PEPTIDE\n\n\nmyPeptide \n|\u0026gt; BioSeq.toFormula \n|\u0026gt; Formula.toString \n\nC34.00 H51.00 N7.00 O14.00\nBioSeq.toAverageMass myPeptide \n\n781.8103169999999\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nDigestion\nBioFSharp also comes equipped with a set of tools aimed at cutting apart amino acid sequences. To demonstrate the usage, we\u0027ll throw some trypsin at the small RuBisCO subunit of Arabidopos thaliana:\nIn the first step, we define our input sequence and the protease we want to use.\nlet RBCS = \n    \u0026quot;\u0026quot;\u0026quot;MASSMLSSATMVASPAQATMVAPFNGLKSSAAFPATRKANNDITSITSNGGRVNCMQVWP\n    PIGKKKFETLSYLPDLTDSELAKEVDYLIRNKWIPCVEFELEHGFVYREHGNSPGYYDGR\n    YWTMWKLPLFGCTDSAQVLKEVEECKKEYPNAFIRIIGFDNTRQVQCISFIAYKPPSFT\u0026quot;\u0026quot;\u0026quot; \n    |\u0026gt; BioArray.ofAminoAcidString\n\nRBCS\n\n\n         1  MASSMLSSAT MVASPAQATM VAPFNGLKSS AAFPATRKAN NDITSITSNG GRVNCMQVWP\n        61  PIGKKKFETL SYLPDLTDSE LAKEVDYLIR NKWIPCVEFE LEHGFVYREH GNSPGYYDGR\n       121  YWTMWKLPLF GCTDSAQVLK EVEECKKEYP NAFIRIIGFD NTRQVQCISF IAYKPPSFT\n\n\nlet trypsin = Digestion.Table.getProteaseBy \u0026quot;Trypsin\u0026quot;\n\nlet digestedRBCS = Digestion.BioArray.digest trypsin 0 RBCS \n\ndigestedRBCS\n|\u0026gt; Seq.head\n\n{ ProteinID = 0\\n  MissCleavages = 0\\n  CleavageStart = 0\\n  CleavageEnd = 27\\n  PepSequence =\\n   [Met; Ala; Ser; Ser; Met; Leu; Ser; Ser; Ala; Thr; Met; Val; Ala; Ser; Pro;\\n    Ala; Gln; Ala; Thr; Met; Val; Ala; Pro; Phe; Asn; Gly; Leu; Lys] }ProteinID0MissCleavages0CleavageStart0CleavageEnd27PepSequence\n         1  MASSMLSSAT MVASPAQATM VAPFNGLK\n\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\nIn reality, proteases don\u0027t always completely cut the protein down. Instead, some sites stay intact and should be considered for in silico analysis.\nThis can easily be done with the concernMissCleavages function. It takes the minimum and maximum amount of misscleavages you want to have and also the digested protein. As a result you get all possible combinations arising from this information.\nlet digestedRBCS\u0026#39; = Digestion.BioArray.concernMissCleavages 0 2 digestedRBCS\n\ndigestedRBCS\n|\u0026gt; Seq.item 1\n\n{ ProteinID = 0\\n  MissCleavages = 0\\n  CleavageStart = 28\\n  CleavageEnd = 36\\n  PepSequence = [Ser; Ser; Ala; Ala; Phe; Pro; Ala; Thr; Arg] }ProteinID0MissCleavages0CleavageStart28CleavageEnd36PepSequence\n         1  SSAAFPATR\n\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\n","headings":["BioCollections","Nucleotides","AminoAcids","Basics","Digestion"],"type":"content"},{"uri":"https://csbiology.github.io/BioFSharp/core/formula.html","title":"Formulas","content":"\nFormula\nSummary: This example shows how to use chemical formulas in BioFSharp\nBioFSharp offers a great bunch of functionality for working with molecules. All elements are represented as the composition of their stable isotopes. A Formula is a collection of those Elements with the given count. Creating and altering formulas is quite easy. Also functions for obtaining a mass of a molecule, which becomes quite handy especially for mass spectrometry, can be used straightforwardly.\nTo create formulas, no direct fiddling around with the data type is necessary. You can just use the stringparser:\nopen BioFSharp\n\nlet CO2 = Formula.parseFormulaString \u0026quot;CO2\u0026quot;\nFormula.toString CO2\n\nC1.00 O2.00\nWe just created some Carbon Dioxide. Luckily there is no in silico climate change. But let\u0027s get rid of it anyways, by making some Sprudel (german term for sprinkly water)\nlet sprudel = Formula.add CO2 (Formula.Table.H2O)\nFormula.toString sprudel\n\nC1.00 H2.00 O3.00\nQuite refreshing, but boring nevertheless. Let\u0027s make some radioactive sprudel.\n/// create a monoisotopic carbon consisting only of C14\nlet monoC14 = \n    Elements.createMono \u0026quot;C14\u0026quot; (Isotopes.Table.C14,1.)\n    |\u0026gt; Elements.Mono \n\n/// exchanges all carbon in formula with monoIsotopic C14\nlet lableWithC14 molecule = Formula.replaceElement molecule Elements.Table.C monoC14\n\nlet radioactiveSprudel = lableWithC14 sprudel\n\nAs you can see converting a refreshing drink to a refreshing, radioactive drink is quickly done. As a check up, let\u0027s compare the masses:\nFormula.monoisoMass sprudel,\nFormula.monoisoMass radioactiveSprudel\n\n(62.00039392114, 64.00363591054)Item162.00039392114Item264.00363591054\n.dni-code-hint {\n    font-style: italic;\n    overflow: hidden;\n    white-space: nowrap;\n}\n.dni-treeview {\n    white-space: nowrap;\n}\n.dni-treeview td {\n    vertical-align: top;\n    text-align: start;\n}\ndetails.dni-treeview {\n    padding-left: 1em;\n}\ntable td {\n    text-align: start;\n}\ntable tr { \n    vertical-align: top; \n    margin: 0em 0px;\n}\ntable tr td pre \n{ \n    vertical-align: top !important; \n    margin: 0em 0px !important;\n} \ntable th {\n    text-align: start;\n}\n\n\n","headings":["Formula"],"type":"content"}]